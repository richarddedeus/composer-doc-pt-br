{"config":{"lang":["pt"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Documenta\u00e7\u00e3o do Composer \u00b6 Livro \u00b6 Introdu\u00e7\u00e3o Uso B\u00e1sico Bibliotecas CLI / Comandos Esquema Reposit\u00f3rios Config Comunidade Artigos \u00b6 Aliases FAQs \u00b6","title":"Documenta\u00e7\u00e3o do Composer"},{"location":"index.html#documentacao-do-composer","text":"","title":"Documenta\u00e7\u00e3o do Composer"},{"location":"index.html#livro","text":"Introdu\u00e7\u00e3o Uso B\u00e1sico Bibliotecas CLI / Comandos Esquema Reposit\u00f3rios Config Comunidade","title":"Livro"},{"location":"index.html#artigos","text":"Aliases","title":"Artigos"},{"location":"index.html#faqs","text":"","title":"FAQs"},{"location":"bibliotecas.html","text":"Bibliotecas \u00b6 Este cap\u00edtulo mostrar\u00e1 como tornar sua biblioteca instal\u00e1vel atrav\u00e9s do Composer. Todo Projeto \u00c9 um Pacote \u00b6 Assim que voc\u00ea tiver um composer.json em um diret\u00f3rio, esse diret\u00f3rio ser\u00e1 um pacote. Ao adicionar um require a um projeto, voc\u00ea est\u00e1 criando um pacote que depende de outros pacotes. A \u00fanica diferen\u00e7a entre seu projeto e uma biblioteca \u00e9 que seu projeto \u00e9 um pacote sem nome. Para tornar esse pacote instal\u00e1vel, voc\u00ea precisa dar um nome a ele. Voc\u00ea faz isso adicionando a propriedade name ao composer.json : { \"name\": \"acme/ola-mundo\", \"require\": { \"monolog/monolog\": \"1.0.*\" } } Nesse caso, o nome do projeto \u00e9 acme/ola-mundo , onde acme \u00e9 o nome do vendor. \u00c9 obrigat\u00f3rio fornecer o nome do vendor. Nota: Se voc\u00ea n\u00e3o sabe o que usar como nome do vendor, seu nome de usu\u00e1rio do GitHub geralmente \u00e9 uma boa aposta. Embora os nomes de pacotes n\u00e3o fa\u00e7am distin\u00e7\u00e3o entre mai\u00fasculas e min\u00fasculas, a conven\u00e7\u00e3o \u00e9 usar apenas min\u00fasculas e h\u00edfen para separar as palavras. Versionamento de Biblioteca \u00b6 Na grande maioria dos casos, voc\u00ea manter\u00e1 sua biblioteca usando algum tipo de sistema de controle de vers\u00e3o como git, svn, hg ou fossil. Nesses casos, o Composer deduz as vers\u00f5es a partir do seu VCS e voc\u00ea n\u00e3o deve especificar uma vers\u00e3o no arquivo composer.json . (Consulte o artigo sobre vers\u00f5es para aprender sobre como o Composer usa branches e tags do VCS para resolver restri\u00e7\u00f5es de vers\u00e3o.) Se voc\u00ea estiver mantendo pacotes manualmente (ou seja, sem um VCS), precisar\u00e1 especificar a vers\u00e3o explicitamente, adicionando uma propriedade version no arquivo composer.json : { \"version\": \"1.0.0\" } Nota: Quando voc\u00ea adiciona uma vers\u00e3o fixa no c\u00f3digo ao VCS, a vers\u00e3o entra em conflito com os nomes das tags. O Composer n\u00e3o poder\u00e1 determinar o n\u00famero da vers\u00e3o. Versionamento do VCS \u00b6 O Composer usa os recursos de branch e tag do VCS para resolver as restri\u00e7\u00f5es de vers\u00e3o que voc\u00ea especifica no campo require para conjuntos espec\u00edficos de arquivos. Ao determinar as vers\u00f5es dispon\u00edveis v\u00e1lidas, o Composer examina todas as suas tags e branches e converte seus nomes em uma lista interna de op\u00e7\u00f5es que, em seguida, faz a correspond\u00eancia com a restri\u00e7\u00e3o de vers\u00e3o que voc\u00ea forneceu. Para saber mais sobre como o Composer trata tags e branches e como resolve restri\u00e7\u00f5es de vers\u00e3o de pacote, leia o artigo sobre vers\u00f5es . Arquivo Lock \u00b6 Para sua biblioteca, voc\u00ea pode fazer o commit do arquivo composer.lock , se desejar. Isso pode ajudar seu time a testar sempre as mesmas vers\u00f5es das depend\u00eancias. No entanto, esse arquivo lock n\u00e3o ter\u00e1 efeito em outros projetos que dependem dele. Ele s\u00f3 afeta o projeto principal. Se voc\u00ea n\u00e3o deseja fazer o commit do arquivo lock e estiver usando o git, adicione-o ao .gitignore . Publicando em um VCS \u00b6 Depois de ter um reposit\u00f3rio VCS (sistema de controle de vers\u00e3o, por exemplo, git) contendo um arquivo composer.json , sua biblioteca j\u00e1 pode ser instalada pelo Composer. Neste exemplo, publicaremos a biblioteca acme/ola-mundo no GitHub em github.com/<usuario>/ola-mundo . Agora, para testar a instala\u00e7\u00e3o do pacote acme/ola-mundo , criamos um novo projeto localmente. Iremos cham\u00e1-lo acme/blog . Este blog depender\u00e1 do acme/ola-mundo , que por sua vez depende do monolog/monolog . Podemos fazer isso criando um novo diret\u00f3rio blog em algum lugar, contendo um composer.json : { \"name\": \"acme/blog\", \"require\": { \"acme/ola-mundo\": \"dev-master\" } } O nome n\u00e3o \u00e9 necess\u00e1rio neste caso, pois n\u00e3o queremos publicar o blog como uma biblioteca. Ele \u00e9 adicionado aqui para esclarecer qual composer.json est\u00e1 sendo descrito. Agora precisamos informar \u00e0 aplica\u00e7\u00e3o do blog onde encontrar a depend\u00eancia ola-mundo . Fazemos isso adicionando uma especifica\u00e7\u00e3o de reposit\u00f3rio de pacotes ao composer.json do blog: { \"name\": \"acme/blog\", \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://github.com/<usuario>/ola-mundo\" } ], \"require\": { \"acme/ola-mundo\": \"dev-master\" } } Para obter mais detalhes sobre como os reposit\u00f3rios de pacotes funcionam e quais outros tipos est\u00e3o dispon\u00edveis, consulte Reposit\u00f3rios . Isso \u00e9 tudo. Agora voc\u00ea pode instalar as depend\u00eancias executando o comando install do Composer! Recapitulando: Qualquer reposit\u00f3rio git/svn/hg/fossil que contenha um composer.json pode ser adicionado ao seu projeto especificando o reposit\u00f3rio do pacote e declarando a depend\u00eancia no campo require . Publicando no Packagist \u00b6 Tudo bem, ent\u00e3o agora voc\u00ea pode publicar pacotes. Mas especificar o reposit\u00f3rio VCS o tempo todo \u00e9 complicado. Voc\u00ea n\u00e3o deseja for\u00e7ar todos os seus usu\u00e1rios a fazer isso. A outra coisa que voc\u00ea deve ter notado \u00e9 que n\u00e3o especificamos um reposit\u00f3rio de pacotes para o monolog/monolog . Como isso funcionou? A resposta \u00e9 Packagist. O Packagist \u00e9 o principal reposit\u00f3rio de pacotes do Composer e est\u00e1 habilitado por padr\u00e3o. Tudo o que \u00e9 publicado no Packagist est\u00e1 dispon\u00edvel automaticamente atrav\u00e9s do Composer. Como o Monolog est\u00e1 no Packagist , podemos depender dele sem precisar especificar reposit\u00f3rios adicionais. Se quis\u00e9ssemos compartilhar o ola-mundo com o mundo, tamb\u00e9m ir\u00edamos public\u00e1-lo no Packagist. Fazer isso \u00e9 realmente f\u00e1cil. Voc\u00ea simplesmente acessa o Packagist e clica no bot\u00e3o \"Submit\". Isso solicitar\u00e1 que voc\u00ea se inscreva se ainda n\u00e3o o fez e, em seguida, permitir\u00e1 que voc\u00ea envie a URL ao seu reposit\u00f3rio VCS; neste momento o Packagist come\u00e7ar\u00e1 a pesquis\u00e1-lo. Uma vez feito isso, seu pacote estar\u00e1 dispon\u00edvel para qualquer pessoa!","title":"Bibliotecas"},{"location":"bibliotecas.html#bibliotecas","text":"Este cap\u00edtulo mostrar\u00e1 como tornar sua biblioteca instal\u00e1vel atrav\u00e9s do Composer.","title":"Bibliotecas"},{"location":"bibliotecas.html#todo-projeto-e-um-pacote","text":"Assim que voc\u00ea tiver um composer.json em um diret\u00f3rio, esse diret\u00f3rio ser\u00e1 um pacote. Ao adicionar um require a um projeto, voc\u00ea est\u00e1 criando um pacote que depende de outros pacotes. A \u00fanica diferen\u00e7a entre seu projeto e uma biblioteca \u00e9 que seu projeto \u00e9 um pacote sem nome. Para tornar esse pacote instal\u00e1vel, voc\u00ea precisa dar um nome a ele. Voc\u00ea faz isso adicionando a propriedade name ao composer.json : { \"name\": \"acme/ola-mundo\", \"require\": { \"monolog/monolog\": \"1.0.*\" } } Nesse caso, o nome do projeto \u00e9 acme/ola-mundo , onde acme \u00e9 o nome do vendor. \u00c9 obrigat\u00f3rio fornecer o nome do vendor. Nota: Se voc\u00ea n\u00e3o sabe o que usar como nome do vendor, seu nome de usu\u00e1rio do GitHub geralmente \u00e9 uma boa aposta. Embora os nomes de pacotes n\u00e3o fa\u00e7am distin\u00e7\u00e3o entre mai\u00fasculas e min\u00fasculas, a conven\u00e7\u00e3o \u00e9 usar apenas min\u00fasculas e h\u00edfen para separar as palavras.","title":"Todo Projeto \u00c9 um Pacote"},{"location":"bibliotecas.html#versionamento-de-biblioteca","text":"Na grande maioria dos casos, voc\u00ea manter\u00e1 sua biblioteca usando algum tipo de sistema de controle de vers\u00e3o como git, svn, hg ou fossil. Nesses casos, o Composer deduz as vers\u00f5es a partir do seu VCS e voc\u00ea n\u00e3o deve especificar uma vers\u00e3o no arquivo composer.json . (Consulte o artigo sobre vers\u00f5es para aprender sobre como o Composer usa branches e tags do VCS para resolver restri\u00e7\u00f5es de vers\u00e3o.) Se voc\u00ea estiver mantendo pacotes manualmente (ou seja, sem um VCS), precisar\u00e1 especificar a vers\u00e3o explicitamente, adicionando uma propriedade version no arquivo composer.json : { \"version\": \"1.0.0\" } Nota: Quando voc\u00ea adiciona uma vers\u00e3o fixa no c\u00f3digo ao VCS, a vers\u00e3o entra em conflito com os nomes das tags. O Composer n\u00e3o poder\u00e1 determinar o n\u00famero da vers\u00e3o.","title":"Versionamento de Biblioteca"},{"location":"bibliotecas.html#versionamento-do-vcs","text":"O Composer usa os recursos de branch e tag do VCS para resolver as restri\u00e7\u00f5es de vers\u00e3o que voc\u00ea especifica no campo require para conjuntos espec\u00edficos de arquivos. Ao determinar as vers\u00f5es dispon\u00edveis v\u00e1lidas, o Composer examina todas as suas tags e branches e converte seus nomes em uma lista interna de op\u00e7\u00f5es que, em seguida, faz a correspond\u00eancia com a restri\u00e7\u00e3o de vers\u00e3o que voc\u00ea forneceu. Para saber mais sobre como o Composer trata tags e branches e como resolve restri\u00e7\u00f5es de vers\u00e3o de pacote, leia o artigo sobre vers\u00f5es .","title":"Versionamento do VCS"},{"location":"bibliotecas.html#arquivo-lock","text":"Para sua biblioteca, voc\u00ea pode fazer o commit do arquivo composer.lock , se desejar. Isso pode ajudar seu time a testar sempre as mesmas vers\u00f5es das depend\u00eancias. No entanto, esse arquivo lock n\u00e3o ter\u00e1 efeito em outros projetos que dependem dele. Ele s\u00f3 afeta o projeto principal. Se voc\u00ea n\u00e3o deseja fazer o commit do arquivo lock e estiver usando o git, adicione-o ao .gitignore .","title":"Arquivo Lock"},{"location":"bibliotecas.html#publicando-em-um-vcs","text":"Depois de ter um reposit\u00f3rio VCS (sistema de controle de vers\u00e3o, por exemplo, git) contendo um arquivo composer.json , sua biblioteca j\u00e1 pode ser instalada pelo Composer. Neste exemplo, publicaremos a biblioteca acme/ola-mundo no GitHub em github.com/<usuario>/ola-mundo . Agora, para testar a instala\u00e7\u00e3o do pacote acme/ola-mundo , criamos um novo projeto localmente. Iremos cham\u00e1-lo acme/blog . Este blog depender\u00e1 do acme/ola-mundo , que por sua vez depende do monolog/monolog . Podemos fazer isso criando um novo diret\u00f3rio blog em algum lugar, contendo um composer.json : { \"name\": \"acme/blog\", \"require\": { \"acme/ola-mundo\": \"dev-master\" } } O nome n\u00e3o \u00e9 necess\u00e1rio neste caso, pois n\u00e3o queremos publicar o blog como uma biblioteca. Ele \u00e9 adicionado aqui para esclarecer qual composer.json est\u00e1 sendo descrito. Agora precisamos informar \u00e0 aplica\u00e7\u00e3o do blog onde encontrar a depend\u00eancia ola-mundo . Fazemos isso adicionando uma especifica\u00e7\u00e3o de reposit\u00f3rio de pacotes ao composer.json do blog: { \"name\": \"acme/blog\", \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://github.com/<usuario>/ola-mundo\" } ], \"require\": { \"acme/ola-mundo\": \"dev-master\" } } Para obter mais detalhes sobre como os reposit\u00f3rios de pacotes funcionam e quais outros tipos est\u00e3o dispon\u00edveis, consulte Reposit\u00f3rios . Isso \u00e9 tudo. Agora voc\u00ea pode instalar as depend\u00eancias executando o comando install do Composer! Recapitulando: Qualquer reposit\u00f3rio git/svn/hg/fossil que contenha um composer.json pode ser adicionado ao seu projeto especificando o reposit\u00f3rio do pacote e declarando a depend\u00eancia no campo require .","title":"Publicando em um VCS"},{"location":"bibliotecas.html#publicando-no-packagist","text":"Tudo bem, ent\u00e3o agora voc\u00ea pode publicar pacotes. Mas especificar o reposit\u00f3rio VCS o tempo todo \u00e9 complicado. Voc\u00ea n\u00e3o deseja for\u00e7ar todos os seus usu\u00e1rios a fazer isso. A outra coisa que voc\u00ea deve ter notado \u00e9 que n\u00e3o especificamos um reposit\u00f3rio de pacotes para o monolog/monolog . Como isso funcionou? A resposta \u00e9 Packagist. O Packagist \u00e9 o principal reposit\u00f3rio de pacotes do Composer e est\u00e1 habilitado por padr\u00e3o. Tudo o que \u00e9 publicado no Packagist est\u00e1 dispon\u00edvel automaticamente atrav\u00e9s do Composer. Como o Monolog est\u00e1 no Packagist , podemos depender dele sem precisar especificar reposit\u00f3rios adicionais. Se quis\u00e9ssemos compartilhar o ola-mundo com o mundo, tamb\u00e9m ir\u00edamos public\u00e1-lo no Packagist. Fazer isso \u00e9 realmente f\u00e1cil. Voc\u00ea simplesmente acessa o Packagist e clica no bot\u00e3o \"Submit\". Isso solicitar\u00e1 que voc\u00ea se inscreva se ainda n\u00e3o o fez e, em seguida, permitir\u00e1 que voc\u00ea envie a URL ao seu reposit\u00f3rio VCS; neste momento o Packagist come\u00e7ar\u00e1 a pesquis\u00e1-lo. Uma vez feito isso, seu pacote estar\u00e1 dispon\u00edvel para qualquer pessoa!","title":"Publicando no Packagist"},{"location":"cli.html","text":"Interface de Linha de Comando / Comandos \u00b6 Voc\u00ea j\u00e1 aprendeu como usar a interface de linha de comando para fazer algumas coisas. Este cap\u00edtulo documenta todos os comandos dispon\u00edveis. Para obter ajuda na linha de comando, basta chamar composer ou composer list para ver a lista completa de comandos e, em seguida, --help combinado com qualquer um deles para fornecer mais informa\u00e7\u00f5es. Como o Composer usa o symfony/console , voc\u00ea pode chamar os comandos pelo nomes abreviados, se n\u00e3o forem amb\u00edguos. composer dump chama composer dump-autoload . Op\u00e7\u00f5es Globais \u00b6 As seguintes op\u00e7\u00f5es est\u00e3o dispon\u00edveis em todos os comandos: --verbose (-v): Aumenta a verbosidade das mensagens. --help (-h): Exibe informa\u00e7\u00f5es de ajuda. --quiet (-q): N\u00e3o gera nenhuma mensagem. --no-interaction (-n): N\u00e3o faz nenhuma pergunta interativa. --no-plugins: Desabilita os plugins. --no-cache: Desabilita o uso do diret\u00f3rio de cache. O mesmo que definir a vari\u00e1vel de ambiente COMPOSER_CACHE_DIR como /dev/null (ou NUL no Windows). --working-dir (-d): Se especificado, usa o diret\u00f3rio fornecido como diret\u00f3rio de trabalho. --profile: Exibe informa\u00e7\u00f5es de tempo e uso da mem\u00f3ria. --ansi: For\u00e7a a sa\u00edda ANSI. --no-ansi: Desabilita a sa\u00edda ANSI. --version (-V): Exibe esta vers\u00e3o da aplica\u00e7\u00e3o. C\u00f3digos de Sa\u00edda do Processo \u00b6 0: OK 1: C\u00f3digo de erro gen\u00e9rico/desconhecido 2: C\u00f3digo de erro de resolu\u00e7\u00e3o de depend\u00eancias init \u00b6 No cap\u00edtulo Bibliotecas , vimos como criar um composer.json manualmente. H\u00e1 tamb\u00e9m um comando init dispon\u00edvel que facilita um pouco isso. Quando voc\u00ea executa o comando, ele solicita interativamente que voc\u00ea preencha os campos, enquanto usa alguns padr\u00f5es inteligentes. php composer.phar init Op\u00e7\u00f5es \u00b6 --name: Nome do pacote. --description: Descri\u00e7\u00e3o do pacote. --author: Nome da pessoa que criou o pacote. --type: Tipo de pacote. --homepage: P\u00e1gina do pacote. --require: Pacote para exigir com uma restri\u00e7\u00e3o de vers\u00e3o. Deve estar no formato foo/bar:1.0.0 . --require-dev: Requisitos de desenvolvimento, consulte --require . --stability (-s): Valor para o campo minimum-stability . --license (-l): Licen\u00e7a do pacote. --repository: Fornece um (ou mais) reposit\u00f3rios personalizados. Eles ser\u00e3o armazenados no composer.json gerado e usados para o preenchimento autom\u00e1tico ao solicitar a lista de requisitos. Cada reposit\u00f3rio pode ser uma URL HTTP apontando para um reposit\u00f3rio do composer ou uma string JSON semelhante \u00e0 string aceita pela chave repositories . install / i \u00b6 O comando install l\u00ea o arquivo composer.json presente no diret\u00f3rio atual, resolve as depend\u00eancias e as instala em vendor . php composer.phar install Se houver um arquivo composer.lock no diret\u00f3rio atual, ele usar\u00e1 as vers\u00f5es exatas desse arquivo em vez de resolv\u00ea-las. Isso garante que todas as pessoas usando a biblioteca obtenham as mesmas vers\u00f5es das depend\u00eancias. Se n\u00e3o houver um arquivo composer.lock , o Composer criar\u00e1 um ap\u00f3s a resolu\u00e7\u00e3o das depend\u00eancias. Op\u00e7\u00f5es \u00b6 --prefer-source: Existem duas maneiras de baixar um pacote: source e dist . Para vers\u00f5es est\u00e1veis, o Composer usar\u00e1 dist por padr\u00e3o. source \u00e9 um reposit\u00f3rio de controle de vers\u00e3o. Se --prefer-source estiver habilitado, o Composer instalar\u00e1 a partir de source , se poss\u00edvel. Isso \u00e9 \u00fatil se voc\u00ea deseja corrigir um bug em um projeto e obter um clone git local da depend\u00eancia diretamente. --prefer-dist: O oposto de --prefer-source , o Composer instalar\u00e1 a partir de dist , se poss\u00edvel. Isso pode acelerar substancialmente as instala\u00e7\u00f5es em servidores de compila\u00e7\u00e3o e outros casos de uso em que voc\u00ea normalmente n\u00e3o executa atualiza\u00e7\u00f5es dos vendors. Tamb\u00e9m \u00e9 uma maneira de contornar problemas com o git se voc\u00ea n\u00e3o tiver uma configura\u00e7\u00e3o adequada. --dry-run: Se voc\u00ea deseja passar por uma instala\u00e7\u00e3o sem realmente instalar um pacote, pode usar --dry-run . Isso simular\u00e1 a instala\u00e7\u00e3o e mostrar\u00e1 o que aconteceria. --dev: Instala os pacotes listados em require-dev (esse \u00e9 o comportamento padr\u00e3o). --no-dev: Ignora a instala\u00e7\u00e3o dos pacotes listados em require-dev . A gera\u00e7\u00e3o do autoloader ignora as regras em autoload-dev . --no-autoloader: Ignora a gera\u00e7\u00e3o do autoloader. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-suggest: Ignora pacotes sugeridos na sa\u00edda. --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . update / u \u00b6 Para obter as vers\u00f5es mais recentes das depend\u00eancias e atualizar o arquivo composer.lock , voc\u00ea deve usar o comando update . Esse comando tamb\u00e9m tem um alias upgrade , j\u00e1 que ele faz o mesmo que upgrade faz, se voc\u00ea estiver pensando no apt-get ou em gerenciadores de pacotes similares. php composer.phar update Isso resolver\u00e1 todas as depend\u00eancias do projeto e gravar\u00e1 as vers\u00f5es exatas no composer.lock . Se voc\u00ea deseja atualizar apenas alguns pacotes e n\u00e3o todos, \u00e9 poss\u00edvel list\u00e1-los da seguinte forma: php composer.phar update vendor/pacote vendor/pacote2 Voc\u00ea tamb\u00e9m pode usar curingas para atualizar v\u00e1rios pacotes de uma vez: php composer.phar update \"vendor/*\" Op\u00e7\u00f5es \u00b6 --prefer-source: Instala os pacotes de source , quando dispon\u00edveis. --prefer-dist: Instala os pacotes de dist , quando dispon\u00edveis. --dry-run: Simula o comando sem realmente fazer nada. --dev: Instala os pacotes listados em require-dev (esse \u00e9 o comportamento padr\u00e3o). --no-dev: Ignora a instala\u00e7\u00e3o dos pacotes listados em require-dev . A gera\u00e7\u00e3o do autoloader ignora as regras em autoload-dev . --lock: Atualiza apenas o hash do arquivo lock para suprimir o aviso de que o arquivo lock est\u00e1 desatualizado. --no-autoloader: Ignora a gera\u00e7\u00e3o do autoloader. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-suggest: Ignora pacotes sugeridos na sa\u00edda. --with-dependencies: Adiciona tamb\u00e9m depend\u00eancias dos pacotes da lista de pacotes permitidos \u00e0 lista de pacotes permitidos, exceto aquelas que s\u00e3o requisitos de primeiro grau. --with-all-dependencies: Adiciona tamb\u00e9m todas as depend\u00eancias dos pacotes da lista de pacotes permitidos \u00e0 lista de pacotes permitidos, incluindo aquelas que s\u00e3o requisitos de primeiro grau. --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . --prefer-stable: Prefere vers\u00f5es est\u00e1veis das depend\u00eancias. --prefer-lowest: Prefere as vers\u00f5es mais antigas das depend\u00eancias. \u00datil para testar vers\u00f5es m\u00ednimas de requisitos, geralmente usada com --prefer-stable . --interactive: Interface interativa com preenchimento autom\u00e1tico para selecionar os pacotes a serem atualizados. --root-reqs: Restringe a atualiza\u00e7\u00e3o \u00e0s depend\u00eancias de primeiro grau. require \u00b6 O comando require adiciona novos pacotes ao arquivo composer.json presente no diret\u00f3rio atual. Se nenhum arquivo existir, um arquivo ser\u00e1 criado durante a execu\u00e7\u00e3o do comando. php composer.phar require Ap\u00f3s adicionar/alterar os requisitos, os requisitos modificados ser\u00e3o instalados ou atualizados. Se voc\u00ea n\u00e3o deseja escolher os requisitos interativamente, poder\u00e1 pass\u00e1-los para o comando. php composer.phar require vendor/pacote:2.* vendor/pacote2:dev-master Se voc\u00ea n\u00e3o especificar um pacote, o Composer solicitar\u00e1 que voc\u00ea procure um pacote e, caso haja resultados, que forne\u00e7a uma lista de correspond\u00eancias a serem requeridas. Op\u00e7\u00f5es \u00b6 --dev: Adiciona pacotes a require-dev . --prefer-source: Instala os pacotes de source , quando dispon\u00edveis. --prefer-dist: Instala os pacotes de dist , quando dispon\u00edveis. --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-suggest: Ignora pacotes sugeridos na sa\u00edda. --no-update: Desabilita a atualiza\u00e7\u00e3o autom\u00e1tica das depend\u00eancias. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --update-no-dev: Executa a atualiza\u00e7\u00e3o de depend\u00eancias com a op\u00e7\u00e3o --no-dev . --update-with-dependencies: Atualiza tamb\u00e9m as depend\u00eancias dos novos pacotes requeridos, exceto aquelas que s\u00e3o requisitos de primeiro grau. --update-with-all-dependencies: Atualiza tamb\u00e9m as depend\u00eancias dos novos pacotes requeridos, incluindo aquelas que s\u00e3o requisitos de primeiro grau. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . --prefer-stable: Prefere vers\u00f5es est\u00e1veis das depend\u00eancias. --prefer-lowest: Prefere as vers\u00f5es mais antigas das depend\u00eancias. \u00datil para testar vers\u00f5es m\u00ednimas de requisitos, geralmente usada com --prefer-stable . --sort-packages: Mant\u00e9m os pacotes ordenados no composer.json . --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. remove \u00b6 O comando remove remove pacotes do arquivo composer.json presente no diret\u00f3rio atual. php composer.phar remove vendor/pacote vendor/pacote2 Ap\u00f3s remover os requisitos, os requisitos modificados ser\u00e3o desinstalados. Op\u00e7\u00f5es \u00b6 --dev: Remove pacotes de require-dev . --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-update: Desabilita a atualiza\u00e7\u00e3o autom\u00e1tica das depend\u00eancias. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --update-no-dev: Executa a atualiza\u00e7\u00e3o de depend\u00eancias com a op\u00e7\u00e3o --no-dev . --update-with-dependencies: Atualiza tamb\u00e9m as depend\u00eancias dos pacotes removidos. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. check-platform-reqs \u00b6 O comando check-platform-reqs verifica se as vers\u00f5es do PHP e das extens\u00f5es correspondem aos requisitos de plataforma dos pacotes instalados. Isso pode ser usado para verificar se um servidor de produ\u00e7\u00e3o possui todas as extens\u00f5es necess\u00e1rias para executar um projeto ap\u00f3s a instala\u00e7\u00e3o, por exemplo. Diferente de update / install , esse comando ignorar\u00e1 as configura\u00e7\u00f5es em config.platform e verificar\u00e1 os pacotes reais da plataforma para garantir que voc\u00ea tenha as depend\u00eancias de plataforma necess\u00e1rias. global \u00b6 O comando global permite executar outros comandos, como install , remove , require ou update , como se voc\u00ea os estivesse executando a partir do diret\u00f3rio COMPOSER_HOME . Isso \u00e9 apenas um auxiliar para gerenciar um projeto armazenado em um local central que pode conter ferramentas da CLI ou plugins do Composer que voc\u00ea deseja disponibilizar em qualquer lugar. Isso pode ser usado para instalar utilit\u00e1rios da CLI globalmente. Aqui est\u00e1 um exemplo: php composer.phar global require friendsofphp/php-cs-fixer Agora, o bin\u00e1rio php-cs-fixer est\u00e1 dispon\u00edvel globalmente. Certifique-se de que o diret\u00f3rio global dos bin\u00e1rios dos vendors esteja em sua vari\u00e1vel de ambiente PATH , voc\u00ea pode obter sua localiza\u00e7\u00e3o com o seguinte comando: php composer.phar global config bin-dir --absolute Se voc\u00ea desejar atualizar o bin\u00e1rio posteriormente, pode executar uma atualiza\u00e7\u00e3o global: php composer.phar global update search \u00b6 O comando search permite pesquisar nos reposit\u00f3rios de pacotes do projeto atual. Geralmente ser\u00e1 o Packagist. Voc\u00ea simplesmente passa os termos que deseja pesquisar. php composer.phar search monolog Voc\u00ea tamb\u00e9m pode pesquisar mais de um termo passando v\u00e1rios argumentos. Op\u00e7\u00f5es \u00b6 --only-name (-N): Pesquisa apenas pelo nome. --type (-t): Pesquisa por um tipo de pacote espec\u00edfico. show \u00b6 Para listar todos os pacotes dispon\u00edveis, voc\u00ea pode usar o comando show . php composer.phar show Para filtrar a lista, voc\u00ea pode passar uma m\u00e1scara de pacote usando curingas. php composer.phar show monolog/* monolog/monolog 1.19.0 Sends your logs to files, sockets, inboxes, databases and various web services Se voc\u00ea deseja ver os detalhes de um determinado pacote, pode passar o nome do pacote. php composer.phar show monolog/monolog name : monolog/monolog versions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1 type : library names : monolog/monolog source : [git] https://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978da dist : [zip] https://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978da license : MIT autoload psr-0 Monolog : src/ requires php >=5.3.0 Voc\u00ea pode at\u00e9 passar a vers\u00e3o do pacote, o que informar\u00e1 os detalhes dessa vers\u00e3o espec\u00edfica. php composer.phar show monolog/monolog 1.0.2 Op\u00e7\u00f5es \u00b6 --all : Lista todos os pacotes dispon\u00edveis em todos os reposit\u00f3rios. --installed (-i): Lista os pacotes que est\u00e3o instalados (isso est\u00e1 habilitado por padr\u00e3o e a op\u00e7\u00e3o est\u00e1 obsoleta). --platform (-p): Lista apenas pacotes de plataforma (PHP e extens\u00f5es). --available (-a): Lista apenas os pacotes dispon\u00edveis. --self (-s): Lista as informa\u00e7\u00f5es do pacote raiz. --name-only (-N): Lista apenas os nomes dos pacotes. --path (-P): Lista os caminhos dos pacotes. --tree (-t): Lista as depend\u00eancias como uma \u00e1rvore. Se voc\u00ea passar um nome de pacote, isso exibir\u00e1 a \u00e1rvore de depend\u00eancias para esse pacote. --latest (-l): Lista todos os pacotes instalados, incluindo a vers\u00e3o mais recente. --outdated (-o): Implica --latest , mas lista apenas pacotes que t\u00eam uma vers\u00e3o mais recente dispon\u00edvel. --minor-only (-m): Use com --latest . Exibe apenas pacotes que possuem atualiza\u00e7\u00f5es menores compat\u00edveis com o SemVer. --direct (-D): Restringe a lista de pacotes \u00e0s depend\u00eancias diretas. --strict: Retorna um c\u00f3digo de sa\u00edda diferente de zero quando h\u00e1 pacotes desatualizados. --format (-f): Permite escolher entre o formato de sa\u00edda de texto (padr\u00e3o) ou json. outdated \u00b6 O comando outdated exibe uma lista de pacotes instalados que possuem atualiza\u00e7\u00f5es dispon\u00edveis, incluindo suas vers\u00f5es atuais e mais recentes. Isso \u00e9 basicamente um alias para composer show -lo . O c\u00f3digo de cores \u00e9 o seguinte: verde (=) : A depend\u00eancia est\u00e1 na vers\u00e3o mais recente e atualizada. amarelo (~) : A depend\u00eancia possui uma nova vers\u00e3o dispon\u00edvel, que inclui quebra de compatibilidade com vers\u00f5es anteriores de acordo com o SemVer; portanto, atualize quando puder, mas isso pode envolver algum trabalho. vermelho (!) : A depend\u00eancia possui uma nova vers\u00e3o que \u00e9 compat\u00edvel com o SemVer e voc\u00ea deve atualiz\u00e1-la. Op\u00e7\u00f5es \u00b6 --all (-a): Exibe todos os pacotes, n\u00e3o apenas os desatualizados (alias para composer show -l ). --direct (-D): Restringe a lista de pacotes \u00e0s depend\u00eancias diretas. --strict: Retorna um c\u00f3digo de sa\u00edda diferente de zero quando h\u00e1 pacotes desatualizados. --minor-only (-m): Exibe apenas pacotes que possuem atualiza\u00e7\u00f5es menores compat\u00edveis com o SemVer. --format (-f): Permite escolher entre o formato de sa\u00edda de texto (padr\u00e3o) ou json. browse / home \u00b6 O comando browse (ou o alias home ) abre a URL do reposit\u00f3rio ou a p\u00e1gina do pacote no navegador. Op\u00e7\u00f5es \u00b6 --homepage (-H): Abre a p\u00e1gina do pacote em vez da URL do reposit\u00f3rio. --show (-s): Apenas exibe a p\u00e1gina ou a URL do reposit\u00f3rio. suggests \u00b6 Lista todos os pacotes sugeridos pelo conjunto de pacotes atualmente instalado. Opcionalmente, voc\u00ea pode passar um ou mais nomes de pacotes no formato vendor/package para limitar a sa\u00edda apenas \u00e0s sugest\u00f5es feitas por esses pacotes. Use as flags --by-package ou --by-suggestion para agrupar a sa\u00edda pelo pacote que faz as sugest\u00f5es ou pelos pacotes sugeridos, respectivamente. Use a flag --verbose (-v) para exibir o pacote que faz a sugest\u00e3o e o motivo da sugest\u00e3o. Isso implica --by-package --by-suggestion , mostrando as duas listas. Op\u00e7\u00f5es \u00b6 --by-package: Agrupa a sa\u00edda pelo pacote que faz a sugest\u00e3o. --by-suggestion: Agrupa a sa\u00edda pelo pacote sugerido. --no-dev: Exclui sugest\u00f5es dos pacotes de require-dev . depends (why) \u00b6 O comando depends informa quais outros pacotes dependem de um determinado pacote. Assim como na instala\u00e7\u00e3o, os relacionamentos em require-dev s\u00e3o considerados apenas para o pacote raiz. php composer.phar depends doctrine/lexer doctrine/annotations v1.2.7 requires doctrine/lexer (1.*) doctrine/common v2.6.1 requires doctrine/lexer (1.*) Opcionalmente, voc\u00ea pode especificar uma restri\u00e7\u00e3o de vers\u00e3o ap\u00f3s o pacote para limitar a pesquisa. Adicione a flag --tree ou -t para mostrar uma \u00e1rvore recursiva do motivo da depend\u00eancia do pacote, por exemplo: php composer.phar depends psr/log -t psr/log 1.0.0 Common interface for logging libraries |- aboutyou/app-sdk 2.6.11 (requires psr/log 1.0.*) | `- __root__ (requires aboutyou/app-sdk ^2.6) |- monolog/monolog 1.17.2 (requires psr/log ~1.0) | `- laravel/framework v5.2.16 (requires monolog/monolog ~1.11) | `- __root__ (requires laravel/framework ^5.2) `- symfony/symfony v3.0.2 (requires psr/log ~1.0) `- __root__ (requires symfony/symfony ^3.0) Op\u00e7\u00f5es \u00b6 --recursive (-r): Resolve recursivamente at\u00e9 o pacote raiz. --tree (-t): Exibe os resultados como uma \u00e1rvore aninhada, implica -r . prohibits (why-not) \u00b6 O comando prohibits informa quais pacotes est\u00e3o impedindo a instala\u00e7\u00e3o de um determinado pacote. Especifique uma restri\u00e7\u00e3o de vers\u00e3o para verificar se as atualiza\u00e7\u00f5es podem ser executadas no seu projeto e, se n\u00e3o, por que n\u00e3o. Veja o seguinte exemplo: php composer.phar prohibits symfony/symfony 3.1 laravel/framework v5.2.16 requires symfony/var-dumper (2.8.*|3.0.*) Observe que voc\u00ea tamb\u00e9m pode especificar os requisitos de plataforma, por exemplo, para verificar se voc\u00ea pode atualizar seu servidor para o PHP 8.0: php composer.phar prohibits php:8 doctrine/cache v1.6.0 requires php (~5.5|~7.0) doctrine/common v2.6.1 requires php (~5.5|~7.0) doctrine/instantiator 1.0.5 requires php (>=5.3,<8.0-DEV) Assim como depends , voc\u00ea pode solicitar uma pesquisa recursiva, que listar\u00e1 todos os pacotes que dependem dos pacotes que causam o conflito. Op\u00e7\u00f5es \u00b6 --recursive (-r): Resolve recursivamente at\u00e9 o pacote raiz. --tree (-t): Exibe os resultados como uma \u00e1rvore aninhada, implica -r . validate \u00b6 Voc\u00ea sempre deve executar o comando validate antes de fazer o commit do arquivo composer.json e antes de criar a tag de uma vers\u00e3o. Ele verificar\u00e1 se o composer.json \u00e9 v\u00e1lido. php composer.phar validate Op\u00e7\u00f5es \u00b6 --no-check-all: N\u00e3o emite um aviso se os requisitos do composer.json usarem restri\u00e7\u00f5es de vers\u00e3o n\u00e3o acopladas ou excessivamente r\u00edgidas. --no-check-lock: N\u00e3o emite um erro se o composer.lock existir e n\u00e3o estiver atualizado. --no-check-publish: N\u00e3o emite um erro se o composer.json for inadequado para publica\u00e7\u00e3o como um pacote no Packagist, mas for v\u00e1lido. --with-dependencies: Tamb\u00e9m valida o composer.json de todas as depend\u00eancias instaladas. --strict: Retorna um c\u00f3digo de sa\u00edda diferente de zero para avisos e erros. status \u00b6 Se voc\u00ea precisar modificar frequentemente o c\u00f3digo de suas depend\u00eancias e elas s\u00e3o instaladas a partir de source , o comando status permitir\u00e1 verificar se h\u00e1 altera\u00e7\u00f5es locais em alguma delas. php composer.phar status Com a op\u00e7\u00e3o --verbose , voc\u00ea obt\u00e9m mais informa\u00e7\u00f5es sobre o que foi alterado: php composer.phar status -v You have changes in the following dependencies: vendor/seld/jsonlint: M README.mdown self-update (selfupdate) \u00b6 Para atualizar o pr\u00f3prio Composer para a vers\u00e3o mais recente, execute o comando self-update . Ele substituir\u00e1 seu composer.phar pela vers\u00e3o mais recente. php composer.phar self-update Se voc\u00ea deseja atualizar para uma vers\u00e3o espec\u00edfica, basta especificar: php composer.phar self-update 1.0.0-alpha7 Se voc\u00ea instalou o Composer para todo o sistema (consulte a instala\u00e7\u00e3o global ), pode ser necess\u00e1rio executar o comando com privil\u00e9gios de root . sudo -H composer self-update Op\u00e7\u00f5es \u00b6 --rollback (-r): Reverte para a \u00faltima vers\u00e3o que voc\u00ea instalou. --clean-backups: Exclui os backups antigos durante uma atualiza\u00e7\u00e3o. Isso torna a vers\u00e3o atual do Composer o \u00fanico backup dispon\u00edvel ap\u00f3s a atualiza\u00e7\u00e3o. --no-progress: Remove a exibi\u00e7\u00e3o de progresso do download. --update-keys: Solicita uma atualiza\u00e7\u00e3o de chave. --stable: For\u00e7a uma atualiza\u00e7\u00e3o para o canal est\u00e1vel. --preview: For\u00e7a uma atualiza\u00e7\u00e3o para o canal preview. --snapshot: For\u00e7a uma atualiza\u00e7\u00e3o para o canal snapshot. config \u00b6 O comando config permite editar configura\u00e7\u00f5es e reposit\u00f3rios do Composer tanto no arquivo local composer.json quanto no arquivo global config.json . Al\u00e9m disso, permite editar a maioria das propriedades no composer.json local. php composer.phar config --list Uso \u00b6 config [opcoes] [nome-configuracao] [valor-configuracao1] ... [valor-configuracaoN] nome-configuracao \u00e9 um nome de op\u00e7\u00e3o de configura\u00e7\u00e3o e valor-configuracao1 \u00e9 um valor de configura\u00e7\u00e3o. Para configura\u00e7\u00f5es que podem receber uma lista de valores (como github-protocols ), mais de um argumento valor-configuracao \u00e9 permitido. Voc\u00ea tamb\u00e9m pode editar os valores das seguintes propriedades: description , homepage , keywords , license , minimum-stability , name , prefer-stable , type e version . Veja o cap\u00edtulo Config para conhecer as op\u00e7\u00f5es de configura\u00e7\u00e3o v\u00e1lidas. Op\u00e7\u00f5es \u00b6 --global (-g): Opera no arquivo de configura\u00e7\u00e3o global localizado em $COMPOSER_HOME/config.json por padr\u00e3o. Sem essa op\u00e7\u00e3o, esse comando afeta o arquivo composer.json local ou um arquivo especificado por --file . --editor (-e): Abre o arquivo composer.json local usando um editor de texto conforme definido pela vari\u00e1vel de ambiente EDITOR . Com a op\u00e7\u00e3o --global , abre o arquivo de configura\u00e7\u00e3o global. --auth (-a): Afeta o arquivo de configura\u00e7\u00e3o de autentica\u00e7\u00e3o (usada apenas para --editor ). --unset: Remove o elemento de configura\u00e7\u00e3o nomeado por nome-configuracao . --list (-l): Exibe a lista de vari\u00e1veis de configura\u00e7\u00e3o atuais. Com a op\u00e7\u00e3o --global , lista apenas as configura\u00e7\u00f5es globais. --file=\"...\" (-f): Opera em um arquivo espec\u00edfico em vez do composer.json . Note que isso n\u00e3o pode ser usado em conjunto com a op\u00e7\u00e3o --global . --absolute: Retorna caminhos absolutos em vez de caminhos relativos ao buscar valores de configura\u00e7\u00e3o *-dir . Modificando Reposit\u00f3rios \u00b6 Al\u00e9m de modificar a se\u00e7\u00e3o config , o comando config tamb\u00e9m suporta altera\u00e7\u00f5es na se\u00e7\u00e3o repositories , usando-o da seguinte maneira: php composer.phar config repositories.foo vcs https://github.com/foo/bar Se o seu reposit\u00f3rio exigir mais op\u00e7\u00f5es de configura\u00e7\u00e3o, voc\u00ea poder\u00e1 passar sua representa\u00e7\u00e3o JSON: php composer.phar config repositories.foo '{\"type\": \"vcs\", \"url\": \"http://svn.exemplo.org.br/meu-projeto/\", \"trunk-path\": \"master\"}' Modificando Valores Extras \u00b6 Al\u00e9m de modificar a se\u00e7\u00e3o config , o comando config tamb\u00e9m suporta altera\u00e7\u00f5es na se\u00e7\u00e3o extra , usando-o da seguinte maneira: php composer.phar config extra.foo.bar valor Os pontos indicam aninhamento de arrays, embora seja permitida uma profundidade m\u00e1xima de 3 n\u00edveis. O comando acima definiria \"extra\": { \"foo\": { \"bar\": \"valor\" } } . create-project \u00b6 Voc\u00ea pode usar o Composer para criar novos projetos a partir de um pacote existente. Isso \u00e9 o equivalente a fazer um git clone ou um svn checkout seguido por um composer install dos vendors. Existem v\u00e1rias aplica\u00e7\u00f5es para isso: Voc\u00ea pode implantar pacotes de aplica\u00e7\u00f5es. Voc\u00ea pode baixar qualquer pacote e come\u00e7ar a desenvolver patches, por exemplo. Projetos com v\u00e1rios desenvolvedores podem usar esse recurso para inicializar a aplica\u00e7\u00e3o inicial para desenvolvimento. Para criar um novo projeto usando o Composer, voc\u00ea pode usar o comando create-project . Passe o nome de um pacote e o diret\u00f3rio para criar o projeto. Voc\u00ea tamb\u00e9m pode fornecer uma vers\u00e3o como terceiro argumento, caso contr\u00e1rio, a vers\u00e3o mais recente ser\u00e1 usada. Se o diret\u00f3rio n\u00e3o existir, ser\u00e1 criado durante a instala\u00e7\u00e3o. php composer.phar create-project doctrine/orm caminho 2.2.* Tamb\u00e9m \u00e9 poss\u00edvel executar o comando sem par\u00e2metros em um diret\u00f3rio com um arquivo composer.json existente para inicializar um projeto. Por padr\u00e3o, o comando procura por pacotes no Packagist . Op\u00e7\u00f5es \u00b6 --stability (-s): Estabilidade m\u00ednima do pacote. O padr\u00e3o \u00e9 stable . --prefer-source: Instala os pacotes de source , quando dispon\u00edveis. --prefer-dist: Instala os pacotes de dist , quando dispon\u00edveis. --repository: Fornece um reposit\u00f3rio personalizado para pesquisar o pacote, que ser\u00e1 usado no lugar do Packagist. Pode ser uma URL HTTP apontando para um reposit\u00f3rio do composer , um caminho para um arquivo packages.json local ou uma string JSON semelhante \u00e0 string aceita pela chave repositories . --dev: Instala os pacotes listados em require-dev (esse \u00e9 o comportamento padr\u00e3o). --no-dev: Ignora a instala\u00e7\u00e3o dos pacotes listados em require-dev . A gera\u00e7\u00e3o do autoloader ignora as regras em autoload-dev . --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no pacote raiz. --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-secure-http: Desabilita a op\u00e7\u00e3o de configura\u00e7\u00e3o secure-http temporariamente ao instalar o pacote raiz. Use por sua conta e risco. Usar essa flag \u00e9 uma m\u00e1 ideia. --keep-vcs: Ignora a exclus\u00e3o dos metadados do VCS para o projeto criado. Isso \u00e9 \u00fatil principalmente se voc\u00ea executar o comando em modo n\u00e3o interativo. --remove-vcs: For\u00e7a a remo\u00e7\u00e3o dos metadados do VCS sem pedir confirma\u00e7\u00e3o. --no-install: Desabilita a instala\u00e7\u00e3o dos vendors. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . dump-autoload (dumpautoload) \u00b6 Se voc\u00ea precisar atualizar o autoloader por causa de novas classes em um pacote de mapa de classes, por exemplo, poder\u00e1 usar dump-autoload para fazer isso sem precisar passar por uma instala\u00e7\u00e3o ou atualiza\u00e7\u00e3o. Al\u00e9m disso, ele pode fazer o dump de um autoloader otimizado que converte pacotes PSR-0/4 em pacotes de mapa de classes por motivos de desempenho. Em aplica\u00e7\u00f5es grandes com muitas classes, o autoloader pode ocupar uma por\u00e7\u00e3o substancial do tempo de cada requisi\u00e7\u00e3o. O uso de mapas de classes para tudo \u00e9 menos conveniente durante o desenvolvimento, mas, usando essa op\u00e7\u00e3o, voc\u00ea ainda pode usar PSR-0/4 por conveni\u00eancia e mapas de classes por desempenho. Op\u00e7\u00f5es \u00b6 --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --optimize (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize . --apcu: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. --no-dev: Desabilita as regras em autoload-dev . clear-cache (clearcache) \u00b6 Exclui todo o conte\u00fado dos diret\u00f3rios de cache do Composer. licenses \u00b6 Lista o nome, vers\u00e3o e licen\u00e7a de cada pacote instalado. Use --format=json para obter uma sa\u00edda leg\u00edvel para m\u00e1quinas. Op\u00e7\u00f5es \u00b6 --format: Formato da sa\u00edda: text ou json (padr\u00e3o: text ). --no-dev: Remove as depend\u00eancias de desenvolvimento da sa\u00edda. run-script \u00b6 Op\u00e7\u00f5es \u00b6 --timeout: Define o tempo limite do script em segundos ou 0 para desabilitar o tempo limite. --dev: Habilita o modo de desenvolvimento. --no-dev: Desabilita o modo de desenvolvimento. --list (-l): Lista os scripts definidos por quem que est\u00e1 desenvolvendo. Para executar scripts manualmente, voc\u00ea pode usar esse comando, passando o nome do script e, opcionalmente, quaisquer argumentos necess\u00e1rios. exec \u00b6 Executa um bin\u00e1rio ou script de um vendor. Voc\u00ea pode executar qualquer comando e isso garantir\u00e1 que o diret\u00f3rio bin-dir do Composer seja adicionado \u00e0 vari\u00e1vel PATH antes do comando ser executado. Op\u00e7\u00f5es \u00b6 --list (-l): Lista os bin\u00e1rios dispon\u00edveis no Composer. diagnose \u00b6 Se voc\u00ea acha que encontrou um erro ou se algo est\u00e1 se comportando de maneira estranha, conv\u00e9m executar o comando diagnose para realizar verifica\u00e7\u00f5es automatizadas de muitos problemas comuns. php composer.phar diagnose archive \u00b6 Esse comando \u00e9 usado para gerar um arquivo compactado zip/tar para um determinado pacote em uma determinada vers\u00e3o. Tamb\u00e9m pode ser usado para arquivar seu projeto inteiro sem os arquivos exclu\u00eddos/ignorados. php composer.phar archive vendor/pacote 2.0.21 --format=zip Op\u00e7\u00f5es \u00b6 --format (-f): Formato do arquivo compactado resultante: tar ou zip (padr\u00e3o: tar ). --dir: Salva o arquivo compactado neste diret\u00f3rio (padr\u00e3o: . ). --file: Salva o arquivo compactado com o nome de arquivo especificado. help \u00b6 Para obter mais informa\u00e7\u00f5es sobre um determinado comando, voc\u00ea pode usar help . php composer.phar help install Preenchimento Autom\u00e1tico na Linha de Comando \u00b6 O preenchimento autom\u00e1tico na linha de comando pode ser habilitado seguindo as instru\u00e7\u00f5es nesta p\u00e1gina . Vari\u00e1veis de Ambiente \u00b6 Voc\u00ea pode definir algumas vari\u00e1veis de ambiente que substituem determinadas configura\u00e7\u00f5es. Sempre que poss\u00edvel, \u00e9 recomend\u00e1vel especificar essas configura\u00e7\u00f5es na se\u00e7\u00e3o config do composer.json . Vale ressaltar que as vari\u00e1veis de ambiente sempre ter\u00e3o preced\u00eancia sobre os valores especificados no composer.json . COMPOSER \u00b6 Ao definir a vari\u00e1vel de ambiente COMPOSER , \u00e9 poss\u00edvel definir o nome do arquivo composer.json como algum outro. Por exemplo: COMPOSER=outro-composer.json php composer.phar install O arquivo lock gerado usar\u00e1 o mesmo nome: outro-composer.lock nesse exemplo. COMPOSER_ALLOW_SUPERUSER \u00b6 Se definida como 1 , esta vari\u00e1vel de ambiente desabilita o aviso sobre a execu\u00e7\u00e3o de comandos como root/superusu\u00e1rio. Ela tamb\u00e9m desabilita a limpeza autom\u00e1tica de sess\u00f5es sudo; portanto, voc\u00ea realmente deve defini-la apenas se usar o Composer como superusu\u00e1rio o tempo todo, como em containers do Docker. COMPOSER_AUTH \u00b6 A vari\u00e1vel COMPOSER_AUTH permite configurar a autentica\u00e7\u00e3o como uma vari\u00e1vel de ambiente. O conte\u00fado da vari\u00e1vel deve ser um objeto JSON contendo objetos http-basic , github-oauth , bitbucket-oauth , ..., conforme necess\u00e1rio e seguindo as especifica\u00e7\u00f5es da configura\u00e7\u00e3o . COMPOSER_BIN_DIR \u00b6 Ao definir esta op\u00e7\u00e3o, voc\u00ea pode alterar o diret\u00f3rio bin ( Bin\u00e1rios dos Vendors ) para algo diferente de vendor/bin . COMPOSER_CACHE_DIR \u00b6 A vari\u00e1vel COMPOSER_CACHE_DIR permite alterar o diret\u00f3rio de cache do Composer, que tamb\u00e9m \u00e9 configur\u00e1vel atrav\u00e9s da op\u00e7\u00e3o cache-dir . Por padr\u00e3o, ela aponta para $COMPOSER_HOME/cache no *nix e macOS e C:\\Users\\<user>\\AppData\\Local\\Composer (ou %LOCALAPPDATA%\\Composer ) no Windows. COMPOSER_CAFILE \u00b6 Ao definir esta vari\u00e1vel de ambiente, \u00e9 poss\u00edvel definir um caminho para um arquivo de pacote de certificado que ser\u00e1 usado durante a verifica\u00e7\u00e3o por par SSL/TLS. COMPOSER_DISCARD_CHANGES \u00b6 Esta vari\u00e1vel controla a op\u00e7\u00e3o de configura\u00e7\u00e3o discard-changes . COMPOSER_HOME \u00b6 A vari\u00e1vel COMPOSER_HOME permite alterar o diret\u00f3rio inicial do Composer. Este \u00e9 um diret\u00f3rio oculto global (por usu\u00e1rio na m\u00e1quina) compartilhado entre todos os projetos. Por padr\u00e3o, ela aponta para C:\\Users\\<usuario>\\AppData\\Roaming\\Composer no Windows e /Users/<usuario>/.composer no macOS. Em sistemas *nix que seguem as Especifica\u00e7\u00f5es de Diret\u00f3rio Base do XDG , ela aponta para $XDG_CONFIG_HOME/composer . Em outros sistemas *nix, ela aponta para /home/<usuario>/.composer . COMPOSER_HOME/config.json \u00b6 Voc\u00ea pode colocar um arquivo config.json no local para o qual COMPOSER_HOME aponta. O Composer combinar\u00e1 esta configura\u00e7\u00e3o com o composer.json do seu projeto quando voc\u00ea executar os comandos install e update . Esse arquivo permite definir reposit\u00f3rios e configura\u00e7\u00f5es para os seus projetos. Caso a configura\u00e7\u00e3o global corresponda \u00e0 configura\u00e7\u00e3o local , a configura\u00e7\u00e3o local no composer.json do projeto sempre vence. COMPOSER_HTACCESS_PROTECT \u00b6 O padr\u00e3o \u00e9 1 . Se definida como 0 , o Composer n\u00e3o criar\u00e1 arquivos .htaccess nos diret\u00f3rios home, cache e data do Composer. COMPOSER_MEMORY_LIMIT \u00b6 Se definida, o valor \u00e9 usado como memory_limit do PHP. COMPOSER_MIRROR_PATH_REPOS \u00b6 Se definida como 1 , esta vari\u00e1vel de ambiente altera a estrat\u00e9gia padr\u00e3o do reposit\u00f3rio de caminhos para mirror em vez de symlink . Como \u00e9 a estrat\u00e9gia padr\u00e3o definida, ela ainda pode ser substitu\u00edda pelas op\u00e7\u00f5es do reposit\u00f3rio. COMPOSER_NO_INTERACTION \u00b6 Se definida como 1 , esta vari\u00e1vel de ambiente far\u00e1 o Composer se comportar como se voc\u00ea passasse a flag --no-interaction para todos os comandos. Ela pode ser definida em servidores de build/CI. COMPOSER_PROCESS_TIMEOUT \u00b6 Esta vari\u00e1vel de ambiente controla o tempo que o Composer espera por comandos (como comandos do git) antes de finalizar a execu\u00e7\u00e3o. O valor padr\u00e3o \u00e9 300 segundos (5 minutos). COMPOSER_ROOT_VERSION \u00b6 Ao definir esta vari\u00e1vel, voc\u00ea pode especificar a vers\u00e3o do pacote raiz, se ela n\u00e3o puder ser deduzida a partir das informa\u00e7\u00f5es do VCS e n\u00e3o estiver presente no composer.json . COMPOSER_VENDOR_DIR \u00b6 Ao definir esta vari\u00e1vel, voc\u00ea pode fazer com que o Composer instale as depend\u00eancias em um diret\u00f3rio que n\u00e3o seja o vendor . http_proxy ou HTTP_PROXY \u00b6 Se voc\u00ea estiver usando o Composer por tr\u00e1s de um proxy HTTP, poder\u00e1 usar a vari\u00e1vel de ambiente padr\u00e3o http_proxy ou HTTP_PROXY . Basta configur\u00e1-la como a URL do seu proxy. Muitos sistemas operacionais j\u00e1 definem esta vari\u00e1vel para voc\u00ea. Usar http_proxy (letras min\u00fasculas) ou mesmo definir as duas pode ser prefer\u00edvel, pois algumas ferramentas como git ou curl usar\u00e3o apenas a vers\u00e3o http_proxy com letras min\u00fasculas. Como alternativa, voc\u00ea tamb\u00e9m pode definir o proxy do git usando git config --global http.proxy <url-do-proxy> . Se voc\u00ea estiver usando o Composer em um contexto que n\u00e3o seja a CLI (ou seja, integra\u00e7\u00e3o em um CMS ou caso de uso semelhante) e precisar oferecer suporte a proxies, forne\u00e7a a vari\u00e1vel de ambiente CGI_HTTP_PROXY . Consulte httpoxy .org para mais detalhes. HTTP_PROXY_REQUEST_FULLURI \u00b6 Se voc\u00ea usar um proxy, mas ele n\u00e3o suportar a flag request_fulluri , ent\u00e3o voc\u00ea deve definir esta vari\u00e1vel como false ou 0 para impedir que o Composer defina a op\u00e7\u00e3o request_fulluri . HTTPS_PROXY_REQUEST_FULLURI \u00b6 Se voc\u00ea usar um proxy, mas ele n\u00e3o suportar a flag request_fulluri para requisi\u00e7\u00f5es HTTPS, ent\u00e3o voc\u00ea deve definir esta vari\u00e1vel como false ou 0 para impedir que o Composer defina a op\u00e7\u00e3o request_fulluri . COMPOSER_SELF_UPDATE_TARGET \u00b6 Se definida, faz com que o comando self-update salve o novo arquivo phar do Composer neste caminho em vez de sobrescrever-se. \u00datil para atualizar o Composer em sistemas de arquivos somente leitura. no_proxy ou NO_PROXY \u00b6 Se voc\u00ea estiver atr\u00e1s de um proxy e deseja desabilit\u00e1-lo para determinados dom\u00ednios, pode usar a vari\u00e1vel de ambiente no_proxy ou NO_PROXY . Simplesmente defina-a como uma lista de dom\u00ednios separados por v\u00edrgula para os quais o proxy n\u00e3o deve ser usado. A vari\u00e1vel de ambiente aceita dom\u00ednios, endere\u00e7os de IP e blocos de endere\u00e7os de IP em nota\u00e7\u00e3o CIDR. Voc\u00ea pode restringir o filtro a uma porta espec\u00edfica (por exemplo, :80 ). Voc\u00ea tamb\u00e9m pode configur\u00e1-la como * para ignorar o proxy para todas as requisi\u00e7\u00f5es HTTP.","title":"CLI / Comandos"},{"location":"cli.html#interface-de-linha-de-comando-comandos","text":"Voc\u00ea j\u00e1 aprendeu como usar a interface de linha de comando para fazer algumas coisas. Este cap\u00edtulo documenta todos os comandos dispon\u00edveis. Para obter ajuda na linha de comando, basta chamar composer ou composer list para ver a lista completa de comandos e, em seguida, --help combinado com qualquer um deles para fornecer mais informa\u00e7\u00f5es. Como o Composer usa o symfony/console , voc\u00ea pode chamar os comandos pelo nomes abreviados, se n\u00e3o forem amb\u00edguos. composer dump chama composer dump-autoload .","title":"Interface de Linha de Comando / Comandos"},{"location":"cli.html#opcoes-globais","text":"As seguintes op\u00e7\u00f5es est\u00e3o dispon\u00edveis em todos os comandos: --verbose (-v): Aumenta a verbosidade das mensagens. --help (-h): Exibe informa\u00e7\u00f5es de ajuda. --quiet (-q): N\u00e3o gera nenhuma mensagem. --no-interaction (-n): N\u00e3o faz nenhuma pergunta interativa. --no-plugins: Desabilita os plugins. --no-cache: Desabilita o uso do diret\u00f3rio de cache. O mesmo que definir a vari\u00e1vel de ambiente COMPOSER_CACHE_DIR como /dev/null (ou NUL no Windows). --working-dir (-d): Se especificado, usa o diret\u00f3rio fornecido como diret\u00f3rio de trabalho. --profile: Exibe informa\u00e7\u00f5es de tempo e uso da mem\u00f3ria. --ansi: For\u00e7a a sa\u00edda ANSI. --no-ansi: Desabilita a sa\u00edda ANSI. --version (-V): Exibe esta vers\u00e3o da aplica\u00e7\u00e3o.","title":"Op\u00e7\u00f5es Globais"},{"location":"cli.html#codigos-de-saida-do-processo","text":"0: OK 1: C\u00f3digo de erro gen\u00e9rico/desconhecido 2: C\u00f3digo de erro de resolu\u00e7\u00e3o de depend\u00eancias","title":"C\u00f3digos de Sa\u00edda do Processo"},{"location":"cli.html#init","text":"No cap\u00edtulo Bibliotecas , vimos como criar um composer.json manualmente. H\u00e1 tamb\u00e9m um comando init dispon\u00edvel que facilita um pouco isso. Quando voc\u00ea executa o comando, ele solicita interativamente que voc\u00ea preencha os campos, enquanto usa alguns padr\u00f5es inteligentes. php composer.phar init","title":"init"},{"location":"cli.html#opcoes-init","text":"--name: Nome do pacote. --description: Descri\u00e7\u00e3o do pacote. --author: Nome da pessoa que criou o pacote. --type: Tipo de pacote. --homepage: P\u00e1gina do pacote. --require: Pacote para exigir com uma restri\u00e7\u00e3o de vers\u00e3o. Deve estar no formato foo/bar:1.0.0 . --require-dev: Requisitos de desenvolvimento, consulte --require . --stability (-s): Valor para o campo minimum-stability . --license (-l): Licen\u00e7a do pacote. --repository: Fornece um (ou mais) reposit\u00f3rios personalizados. Eles ser\u00e3o armazenados no composer.json gerado e usados para o preenchimento autom\u00e1tico ao solicitar a lista de requisitos. Cada reposit\u00f3rio pode ser uma URL HTTP apontando para um reposit\u00f3rio do composer ou uma string JSON semelhante \u00e0 string aceita pela chave repositories .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#install-i","text":"O comando install l\u00ea o arquivo composer.json presente no diret\u00f3rio atual, resolve as depend\u00eancias e as instala em vendor . php composer.phar install Se houver um arquivo composer.lock no diret\u00f3rio atual, ele usar\u00e1 as vers\u00f5es exatas desse arquivo em vez de resolv\u00ea-las. Isso garante que todas as pessoas usando a biblioteca obtenham as mesmas vers\u00f5es das depend\u00eancias. Se n\u00e3o houver um arquivo composer.lock , o Composer criar\u00e1 um ap\u00f3s a resolu\u00e7\u00e3o das depend\u00eancias.","title":"install / i"},{"location":"cli.html#opcoes-install","text":"--prefer-source: Existem duas maneiras de baixar um pacote: source e dist . Para vers\u00f5es est\u00e1veis, o Composer usar\u00e1 dist por padr\u00e3o. source \u00e9 um reposit\u00f3rio de controle de vers\u00e3o. Se --prefer-source estiver habilitado, o Composer instalar\u00e1 a partir de source , se poss\u00edvel. Isso \u00e9 \u00fatil se voc\u00ea deseja corrigir um bug em um projeto e obter um clone git local da depend\u00eancia diretamente. --prefer-dist: O oposto de --prefer-source , o Composer instalar\u00e1 a partir de dist , se poss\u00edvel. Isso pode acelerar substancialmente as instala\u00e7\u00f5es em servidores de compila\u00e7\u00e3o e outros casos de uso em que voc\u00ea normalmente n\u00e3o executa atualiza\u00e7\u00f5es dos vendors. Tamb\u00e9m \u00e9 uma maneira de contornar problemas com o git se voc\u00ea n\u00e3o tiver uma configura\u00e7\u00e3o adequada. --dry-run: Se voc\u00ea deseja passar por uma instala\u00e7\u00e3o sem realmente instalar um pacote, pode usar --dry-run . Isso simular\u00e1 a instala\u00e7\u00e3o e mostrar\u00e1 o que aconteceria. --dev: Instala os pacotes listados em require-dev (esse \u00e9 o comportamento padr\u00e3o). --no-dev: Ignora a instala\u00e7\u00e3o dos pacotes listados em require-dev . A gera\u00e7\u00e3o do autoloader ignora as regras em autoload-dev . --no-autoloader: Ignora a gera\u00e7\u00e3o do autoloader. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-suggest: Ignora pacotes sugeridos na sa\u00edda. --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#update-u","text":"Para obter as vers\u00f5es mais recentes das depend\u00eancias e atualizar o arquivo composer.lock , voc\u00ea deve usar o comando update . Esse comando tamb\u00e9m tem um alias upgrade , j\u00e1 que ele faz o mesmo que upgrade faz, se voc\u00ea estiver pensando no apt-get ou em gerenciadores de pacotes similares. php composer.phar update Isso resolver\u00e1 todas as depend\u00eancias do projeto e gravar\u00e1 as vers\u00f5es exatas no composer.lock . Se voc\u00ea deseja atualizar apenas alguns pacotes e n\u00e3o todos, \u00e9 poss\u00edvel list\u00e1-los da seguinte forma: php composer.phar update vendor/pacote vendor/pacote2 Voc\u00ea tamb\u00e9m pode usar curingas para atualizar v\u00e1rios pacotes de uma vez: php composer.phar update \"vendor/*\"","title":"update / u"},{"location":"cli.html#opcoes-update","text":"--prefer-source: Instala os pacotes de source , quando dispon\u00edveis. --prefer-dist: Instala os pacotes de dist , quando dispon\u00edveis. --dry-run: Simula o comando sem realmente fazer nada. --dev: Instala os pacotes listados em require-dev (esse \u00e9 o comportamento padr\u00e3o). --no-dev: Ignora a instala\u00e7\u00e3o dos pacotes listados em require-dev . A gera\u00e7\u00e3o do autoloader ignora as regras em autoload-dev . --lock: Atualiza apenas o hash do arquivo lock para suprimir o aviso de que o arquivo lock est\u00e1 desatualizado. --no-autoloader: Ignora a gera\u00e7\u00e3o do autoloader. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-suggest: Ignora pacotes sugeridos na sa\u00edda. --with-dependencies: Adiciona tamb\u00e9m depend\u00eancias dos pacotes da lista de pacotes permitidos \u00e0 lista de pacotes permitidos, exceto aquelas que s\u00e3o requisitos de primeiro grau. --with-all-dependencies: Adiciona tamb\u00e9m todas as depend\u00eancias dos pacotes da lista de pacotes permitidos \u00e0 lista de pacotes permitidos, incluindo aquelas que s\u00e3o requisitos de primeiro grau. --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . --prefer-stable: Prefere vers\u00f5es est\u00e1veis das depend\u00eancias. --prefer-lowest: Prefere as vers\u00f5es mais antigas das depend\u00eancias. \u00datil para testar vers\u00f5es m\u00ednimas de requisitos, geralmente usada com --prefer-stable . --interactive: Interface interativa com preenchimento autom\u00e1tico para selecionar os pacotes a serem atualizados. --root-reqs: Restringe a atualiza\u00e7\u00e3o \u00e0s depend\u00eancias de primeiro grau.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#require","text":"O comando require adiciona novos pacotes ao arquivo composer.json presente no diret\u00f3rio atual. Se nenhum arquivo existir, um arquivo ser\u00e1 criado durante a execu\u00e7\u00e3o do comando. php composer.phar require Ap\u00f3s adicionar/alterar os requisitos, os requisitos modificados ser\u00e3o instalados ou atualizados. Se voc\u00ea n\u00e3o deseja escolher os requisitos interativamente, poder\u00e1 pass\u00e1-los para o comando. php composer.phar require vendor/pacote:2.* vendor/pacote2:dev-master Se voc\u00ea n\u00e3o especificar um pacote, o Composer solicitar\u00e1 que voc\u00ea procure um pacote e, caso haja resultados, que forne\u00e7a uma lista de correspond\u00eancias a serem requeridas.","title":"require"},{"location":"cli.html#opcoes-require","text":"--dev: Adiciona pacotes a require-dev . --prefer-source: Instala os pacotes de source , quando dispon\u00edveis. --prefer-dist: Instala os pacotes de dist , quando dispon\u00edveis. --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-suggest: Ignora pacotes sugeridos na sa\u00edda. --no-update: Desabilita a atualiza\u00e7\u00e3o autom\u00e1tica das depend\u00eancias. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --update-no-dev: Executa a atualiza\u00e7\u00e3o de depend\u00eancias com a op\u00e7\u00e3o --no-dev . --update-with-dependencies: Atualiza tamb\u00e9m as depend\u00eancias dos novos pacotes requeridos, exceto aquelas que s\u00e3o requisitos de primeiro grau. --update-with-all-dependencies: Atualiza tamb\u00e9m as depend\u00eancias dos novos pacotes requeridos, incluindo aquelas que s\u00e3o requisitos de primeiro grau. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . --prefer-stable: Prefere vers\u00f5es est\u00e1veis das depend\u00eancias. --prefer-lowest: Prefere as vers\u00f5es mais antigas das depend\u00eancias. \u00datil para testar vers\u00f5es m\u00ednimas de requisitos, geralmente usada com --prefer-stable . --sort-packages: Mant\u00e9m os pacotes ordenados no composer.json . --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#remove","text":"O comando remove remove pacotes do arquivo composer.json presente no diret\u00f3rio atual. php composer.phar remove vendor/pacote vendor/pacote2 Ap\u00f3s remover os requisitos, os requisitos modificados ser\u00e3o desinstalados.","title":"remove"},{"location":"cli.html#opcoes-remove","text":"--dev: Remove pacotes de require-dev . --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-update: Desabilita a atualiza\u00e7\u00e3o autom\u00e1tica das depend\u00eancias. --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --update-no-dev: Executa a atualiza\u00e7\u00e3o de depend\u00eancias com a op\u00e7\u00e3o --no-dev . --update-with-dependencies: Atualiza tamb\u00e9m as depend\u00eancias dos pacotes removidos. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform . --optimize-autoloader (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize-autoloader . --apcu-autoloader: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#check-platform-reqs","text":"O comando check-platform-reqs verifica se as vers\u00f5es do PHP e das extens\u00f5es correspondem aos requisitos de plataforma dos pacotes instalados. Isso pode ser usado para verificar se um servidor de produ\u00e7\u00e3o possui todas as extens\u00f5es necess\u00e1rias para executar um projeto ap\u00f3s a instala\u00e7\u00e3o, por exemplo. Diferente de update / install , esse comando ignorar\u00e1 as configura\u00e7\u00f5es em config.platform e verificar\u00e1 os pacotes reais da plataforma para garantir que voc\u00ea tenha as depend\u00eancias de plataforma necess\u00e1rias.","title":"check-platform-reqs"},{"location":"cli.html#global","text":"O comando global permite executar outros comandos, como install , remove , require ou update , como se voc\u00ea os estivesse executando a partir do diret\u00f3rio COMPOSER_HOME . Isso \u00e9 apenas um auxiliar para gerenciar um projeto armazenado em um local central que pode conter ferramentas da CLI ou plugins do Composer que voc\u00ea deseja disponibilizar em qualquer lugar. Isso pode ser usado para instalar utilit\u00e1rios da CLI globalmente. Aqui est\u00e1 um exemplo: php composer.phar global require friendsofphp/php-cs-fixer Agora, o bin\u00e1rio php-cs-fixer est\u00e1 dispon\u00edvel globalmente. Certifique-se de que o diret\u00f3rio global dos bin\u00e1rios dos vendors esteja em sua vari\u00e1vel de ambiente PATH , voc\u00ea pode obter sua localiza\u00e7\u00e3o com o seguinte comando: php composer.phar global config bin-dir --absolute Se voc\u00ea desejar atualizar o bin\u00e1rio posteriormente, pode executar uma atualiza\u00e7\u00e3o global: php composer.phar global update","title":"global"},{"location":"cli.html#search","text":"O comando search permite pesquisar nos reposit\u00f3rios de pacotes do projeto atual. Geralmente ser\u00e1 o Packagist. Voc\u00ea simplesmente passa os termos que deseja pesquisar. php composer.phar search monolog Voc\u00ea tamb\u00e9m pode pesquisar mais de um termo passando v\u00e1rios argumentos.","title":"search"},{"location":"cli.html#opcoes-search","text":"--only-name (-N): Pesquisa apenas pelo nome. --type (-t): Pesquisa por um tipo de pacote espec\u00edfico.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#show","text":"Para listar todos os pacotes dispon\u00edveis, voc\u00ea pode usar o comando show . php composer.phar show Para filtrar a lista, voc\u00ea pode passar uma m\u00e1scara de pacote usando curingas. php composer.phar show monolog/* monolog/monolog 1.19.0 Sends your logs to files, sockets, inboxes, databases and various web services Se voc\u00ea deseja ver os detalhes de um determinado pacote, pode passar o nome do pacote. php composer.phar show monolog/monolog name : monolog/monolog versions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1 type : library names : monolog/monolog source : [git] https://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978da dist : [zip] https://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978da license : MIT autoload psr-0 Monolog : src/ requires php >=5.3.0 Voc\u00ea pode at\u00e9 passar a vers\u00e3o do pacote, o que informar\u00e1 os detalhes dessa vers\u00e3o espec\u00edfica. php composer.phar show monolog/monolog 1.0.2","title":"show"},{"location":"cli.html#opcoes-show","text":"--all : Lista todos os pacotes dispon\u00edveis em todos os reposit\u00f3rios. --installed (-i): Lista os pacotes que est\u00e3o instalados (isso est\u00e1 habilitado por padr\u00e3o e a op\u00e7\u00e3o est\u00e1 obsoleta). --platform (-p): Lista apenas pacotes de plataforma (PHP e extens\u00f5es). --available (-a): Lista apenas os pacotes dispon\u00edveis. --self (-s): Lista as informa\u00e7\u00f5es do pacote raiz. --name-only (-N): Lista apenas os nomes dos pacotes. --path (-P): Lista os caminhos dos pacotes. --tree (-t): Lista as depend\u00eancias como uma \u00e1rvore. Se voc\u00ea passar um nome de pacote, isso exibir\u00e1 a \u00e1rvore de depend\u00eancias para esse pacote. --latest (-l): Lista todos os pacotes instalados, incluindo a vers\u00e3o mais recente. --outdated (-o): Implica --latest , mas lista apenas pacotes que t\u00eam uma vers\u00e3o mais recente dispon\u00edvel. --minor-only (-m): Use com --latest . Exibe apenas pacotes que possuem atualiza\u00e7\u00f5es menores compat\u00edveis com o SemVer. --direct (-D): Restringe a lista de pacotes \u00e0s depend\u00eancias diretas. --strict: Retorna um c\u00f3digo de sa\u00edda diferente de zero quando h\u00e1 pacotes desatualizados. --format (-f): Permite escolher entre o formato de sa\u00edda de texto (padr\u00e3o) ou json.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#outdated","text":"O comando outdated exibe uma lista de pacotes instalados que possuem atualiza\u00e7\u00f5es dispon\u00edveis, incluindo suas vers\u00f5es atuais e mais recentes. Isso \u00e9 basicamente um alias para composer show -lo . O c\u00f3digo de cores \u00e9 o seguinte: verde (=) : A depend\u00eancia est\u00e1 na vers\u00e3o mais recente e atualizada. amarelo (~) : A depend\u00eancia possui uma nova vers\u00e3o dispon\u00edvel, que inclui quebra de compatibilidade com vers\u00f5es anteriores de acordo com o SemVer; portanto, atualize quando puder, mas isso pode envolver algum trabalho. vermelho (!) : A depend\u00eancia possui uma nova vers\u00e3o que \u00e9 compat\u00edvel com o SemVer e voc\u00ea deve atualiz\u00e1-la.","title":"outdated"},{"location":"cli.html#opcoes-outdated","text":"--all (-a): Exibe todos os pacotes, n\u00e3o apenas os desatualizados (alias para composer show -l ). --direct (-D): Restringe a lista de pacotes \u00e0s depend\u00eancias diretas. --strict: Retorna um c\u00f3digo de sa\u00edda diferente de zero quando h\u00e1 pacotes desatualizados. --minor-only (-m): Exibe apenas pacotes que possuem atualiza\u00e7\u00f5es menores compat\u00edveis com o SemVer. --format (-f): Permite escolher entre o formato de sa\u00edda de texto (padr\u00e3o) ou json.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#browse-home","text":"O comando browse (ou o alias home ) abre a URL do reposit\u00f3rio ou a p\u00e1gina do pacote no navegador.","title":"browse / home"},{"location":"cli.html#opcoes-browse","text":"--homepage (-H): Abre a p\u00e1gina do pacote em vez da URL do reposit\u00f3rio. --show (-s): Apenas exibe a p\u00e1gina ou a URL do reposit\u00f3rio.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#suggests","text":"Lista todos os pacotes sugeridos pelo conjunto de pacotes atualmente instalado. Opcionalmente, voc\u00ea pode passar um ou mais nomes de pacotes no formato vendor/package para limitar a sa\u00edda apenas \u00e0s sugest\u00f5es feitas por esses pacotes. Use as flags --by-package ou --by-suggestion para agrupar a sa\u00edda pelo pacote que faz as sugest\u00f5es ou pelos pacotes sugeridos, respectivamente. Use a flag --verbose (-v) para exibir o pacote que faz a sugest\u00e3o e o motivo da sugest\u00e3o. Isso implica --by-package --by-suggestion , mostrando as duas listas.","title":"suggests"},{"location":"cli.html#opcoes-suggests","text":"--by-package: Agrupa a sa\u00edda pelo pacote que faz a sugest\u00e3o. --by-suggestion: Agrupa a sa\u00edda pelo pacote sugerido. --no-dev: Exclui sugest\u00f5es dos pacotes de require-dev .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#depends-why","text":"O comando depends informa quais outros pacotes dependem de um determinado pacote. Assim como na instala\u00e7\u00e3o, os relacionamentos em require-dev s\u00e3o considerados apenas para o pacote raiz. php composer.phar depends doctrine/lexer doctrine/annotations v1.2.7 requires doctrine/lexer (1.*) doctrine/common v2.6.1 requires doctrine/lexer (1.*) Opcionalmente, voc\u00ea pode especificar uma restri\u00e7\u00e3o de vers\u00e3o ap\u00f3s o pacote para limitar a pesquisa. Adicione a flag --tree ou -t para mostrar uma \u00e1rvore recursiva do motivo da depend\u00eancia do pacote, por exemplo: php composer.phar depends psr/log -t psr/log 1.0.0 Common interface for logging libraries |- aboutyou/app-sdk 2.6.11 (requires psr/log 1.0.*) | `- __root__ (requires aboutyou/app-sdk ^2.6) |- monolog/monolog 1.17.2 (requires psr/log ~1.0) | `- laravel/framework v5.2.16 (requires monolog/monolog ~1.11) | `- __root__ (requires laravel/framework ^5.2) `- symfony/symfony v3.0.2 (requires psr/log ~1.0) `- __root__ (requires symfony/symfony ^3.0)","title":"depends (why)"},{"location":"cli.html#opcoes-depends","text":"--recursive (-r): Resolve recursivamente at\u00e9 o pacote raiz. --tree (-t): Exibe os resultados como uma \u00e1rvore aninhada, implica -r .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#prohibits-why-not","text":"O comando prohibits informa quais pacotes est\u00e3o impedindo a instala\u00e7\u00e3o de um determinado pacote. Especifique uma restri\u00e7\u00e3o de vers\u00e3o para verificar se as atualiza\u00e7\u00f5es podem ser executadas no seu projeto e, se n\u00e3o, por que n\u00e3o. Veja o seguinte exemplo: php composer.phar prohibits symfony/symfony 3.1 laravel/framework v5.2.16 requires symfony/var-dumper (2.8.*|3.0.*) Observe que voc\u00ea tamb\u00e9m pode especificar os requisitos de plataforma, por exemplo, para verificar se voc\u00ea pode atualizar seu servidor para o PHP 8.0: php composer.phar prohibits php:8 doctrine/cache v1.6.0 requires php (~5.5|~7.0) doctrine/common v2.6.1 requires php (~5.5|~7.0) doctrine/instantiator 1.0.5 requires php (>=5.3,<8.0-DEV) Assim como depends , voc\u00ea pode solicitar uma pesquisa recursiva, que listar\u00e1 todos os pacotes que dependem dos pacotes que causam o conflito.","title":"prohibits (why-not)"},{"location":"cli.html#opcoes-prohibits","text":"--recursive (-r): Resolve recursivamente at\u00e9 o pacote raiz. --tree (-t): Exibe os resultados como uma \u00e1rvore aninhada, implica -r .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#validate","text":"Voc\u00ea sempre deve executar o comando validate antes de fazer o commit do arquivo composer.json e antes de criar a tag de uma vers\u00e3o. Ele verificar\u00e1 se o composer.json \u00e9 v\u00e1lido. php composer.phar validate","title":"validate"},{"location":"cli.html#opcoes-validate","text":"--no-check-all: N\u00e3o emite um aviso se os requisitos do composer.json usarem restri\u00e7\u00f5es de vers\u00e3o n\u00e3o acopladas ou excessivamente r\u00edgidas. --no-check-lock: N\u00e3o emite um erro se o composer.lock existir e n\u00e3o estiver atualizado. --no-check-publish: N\u00e3o emite um erro se o composer.json for inadequado para publica\u00e7\u00e3o como um pacote no Packagist, mas for v\u00e1lido. --with-dependencies: Tamb\u00e9m valida o composer.json de todas as depend\u00eancias instaladas. --strict: Retorna um c\u00f3digo de sa\u00edda diferente de zero para avisos e erros.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#status","text":"Se voc\u00ea precisar modificar frequentemente o c\u00f3digo de suas depend\u00eancias e elas s\u00e3o instaladas a partir de source , o comando status permitir\u00e1 verificar se h\u00e1 altera\u00e7\u00f5es locais em alguma delas. php composer.phar status Com a op\u00e7\u00e3o --verbose , voc\u00ea obt\u00e9m mais informa\u00e7\u00f5es sobre o que foi alterado: php composer.phar status -v You have changes in the following dependencies: vendor/seld/jsonlint: M README.mdown","title":"status"},{"location":"cli.html#self-update-selfupdate","text":"Para atualizar o pr\u00f3prio Composer para a vers\u00e3o mais recente, execute o comando self-update . Ele substituir\u00e1 seu composer.phar pela vers\u00e3o mais recente. php composer.phar self-update Se voc\u00ea deseja atualizar para uma vers\u00e3o espec\u00edfica, basta especificar: php composer.phar self-update 1.0.0-alpha7 Se voc\u00ea instalou o Composer para todo o sistema (consulte a instala\u00e7\u00e3o global ), pode ser necess\u00e1rio executar o comando com privil\u00e9gios de root . sudo -H composer self-update","title":"self-update (selfupdate)"},{"location":"cli.html#opcoes-self-update","text":"--rollback (-r): Reverte para a \u00faltima vers\u00e3o que voc\u00ea instalou. --clean-backups: Exclui os backups antigos durante uma atualiza\u00e7\u00e3o. Isso torna a vers\u00e3o atual do Composer o \u00fanico backup dispon\u00edvel ap\u00f3s a atualiza\u00e7\u00e3o. --no-progress: Remove a exibi\u00e7\u00e3o de progresso do download. --update-keys: Solicita uma atualiza\u00e7\u00e3o de chave. --stable: For\u00e7a uma atualiza\u00e7\u00e3o para o canal est\u00e1vel. --preview: For\u00e7a uma atualiza\u00e7\u00e3o para o canal preview. --snapshot: For\u00e7a uma atualiza\u00e7\u00e3o para o canal snapshot.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#config","text":"O comando config permite editar configura\u00e7\u00f5es e reposit\u00f3rios do Composer tanto no arquivo local composer.json quanto no arquivo global config.json . Al\u00e9m disso, permite editar a maioria das propriedades no composer.json local. php composer.phar config --list","title":"config"},{"location":"cli.html#uso","text":"config [opcoes] [nome-configuracao] [valor-configuracao1] ... [valor-configuracaoN] nome-configuracao \u00e9 um nome de op\u00e7\u00e3o de configura\u00e7\u00e3o e valor-configuracao1 \u00e9 um valor de configura\u00e7\u00e3o. Para configura\u00e7\u00f5es que podem receber uma lista de valores (como github-protocols ), mais de um argumento valor-configuracao \u00e9 permitido. Voc\u00ea tamb\u00e9m pode editar os valores das seguintes propriedades: description , homepage , keywords , license , minimum-stability , name , prefer-stable , type e version . Veja o cap\u00edtulo Config para conhecer as op\u00e7\u00f5es de configura\u00e7\u00e3o v\u00e1lidas.","title":"Uso"},{"location":"cli.html#opcoes-config","text":"--global (-g): Opera no arquivo de configura\u00e7\u00e3o global localizado em $COMPOSER_HOME/config.json por padr\u00e3o. Sem essa op\u00e7\u00e3o, esse comando afeta o arquivo composer.json local ou um arquivo especificado por --file . --editor (-e): Abre o arquivo composer.json local usando um editor de texto conforme definido pela vari\u00e1vel de ambiente EDITOR . Com a op\u00e7\u00e3o --global , abre o arquivo de configura\u00e7\u00e3o global. --auth (-a): Afeta o arquivo de configura\u00e7\u00e3o de autentica\u00e7\u00e3o (usada apenas para --editor ). --unset: Remove o elemento de configura\u00e7\u00e3o nomeado por nome-configuracao . --list (-l): Exibe a lista de vari\u00e1veis de configura\u00e7\u00e3o atuais. Com a op\u00e7\u00e3o --global , lista apenas as configura\u00e7\u00f5es globais. --file=\"...\" (-f): Opera em um arquivo espec\u00edfico em vez do composer.json . Note que isso n\u00e3o pode ser usado em conjunto com a op\u00e7\u00e3o --global . --absolute: Retorna caminhos absolutos em vez de caminhos relativos ao buscar valores de configura\u00e7\u00e3o *-dir .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#modificando-repositorios","text":"Al\u00e9m de modificar a se\u00e7\u00e3o config , o comando config tamb\u00e9m suporta altera\u00e7\u00f5es na se\u00e7\u00e3o repositories , usando-o da seguinte maneira: php composer.phar config repositories.foo vcs https://github.com/foo/bar Se o seu reposit\u00f3rio exigir mais op\u00e7\u00f5es de configura\u00e7\u00e3o, voc\u00ea poder\u00e1 passar sua representa\u00e7\u00e3o JSON: php composer.phar config repositories.foo '{\"type\": \"vcs\", \"url\": \"http://svn.exemplo.org.br/meu-projeto/\", \"trunk-path\": \"master\"}'","title":"Modificando Reposit\u00f3rios"},{"location":"cli.html#modificando-valores-extras","text":"Al\u00e9m de modificar a se\u00e7\u00e3o config , o comando config tamb\u00e9m suporta altera\u00e7\u00f5es na se\u00e7\u00e3o extra , usando-o da seguinte maneira: php composer.phar config extra.foo.bar valor Os pontos indicam aninhamento de arrays, embora seja permitida uma profundidade m\u00e1xima de 3 n\u00edveis. O comando acima definiria \"extra\": { \"foo\": { \"bar\": \"valor\" } } .","title":"Modificando Valores Extras"},{"location":"cli.html#create-project","text":"Voc\u00ea pode usar o Composer para criar novos projetos a partir de um pacote existente. Isso \u00e9 o equivalente a fazer um git clone ou um svn checkout seguido por um composer install dos vendors. Existem v\u00e1rias aplica\u00e7\u00f5es para isso: Voc\u00ea pode implantar pacotes de aplica\u00e7\u00f5es. Voc\u00ea pode baixar qualquer pacote e come\u00e7ar a desenvolver patches, por exemplo. Projetos com v\u00e1rios desenvolvedores podem usar esse recurso para inicializar a aplica\u00e7\u00e3o inicial para desenvolvimento. Para criar um novo projeto usando o Composer, voc\u00ea pode usar o comando create-project . Passe o nome de um pacote e o diret\u00f3rio para criar o projeto. Voc\u00ea tamb\u00e9m pode fornecer uma vers\u00e3o como terceiro argumento, caso contr\u00e1rio, a vers\u00e3o mais recente ser\u00e1 usada. Se o diret\u00f3rio n\u00e3o existir, ser\u00e1 criado durante a instala\u00e7\u00e3o. php composer.phar create-project doctrine/orm caminho 2.2.* Tamb\u00e9m \u00e9 poss\u00edvel executar o comando sem par\u00e2metros em um diret\u00f3rio com um arquivo composer.json existente para inicializar um projeto. Por padr\u00e3o, o comando procura por pacotes no Packagist .","title":"create-project"},{"location":"cli.html#opcoes-create-project","text":"--stability (-s): Estabilidade m\u00ednima do pacote. O padr\u00e3o \u00e9 stable . --prefer-source: Instala os pacotes de source , quando dispon\u00edveis. --prefer-dist: Instala os pacotes de dist , quando dispon\u00edveis. --repository: Fornece um reposit\u00f3rio personalizado para pesquisar o pacote, que ser\u00e1 usado no lugar do Packagist. Pode ser uma URL HTTP apontando para um reposit\u00f3rio do composer , um caminho para um arquivo packages.json local ou uma string JSON semelhante \u00e0 string aceita pela chave repositories . --dev: Instala os pacotes listados em require-dev (esse \u00e9 o comportamento padr\u00e3o). --no-dev: Ignora a instala\u00e7\u00e3o dos pacotes listados em require-dev . A gera\u00e7\u00e3o do autoloader ignora as regras em autoload-dev . --no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no pacote raiz. --no-progress: Remove a exibi\u00e7\u00e3o de progresso que pode interferir em alguns terminais ou scripts que n\u00e3o tratam caracteres de backspace. --no-secure-http: Desabilita a op\u00e7\u00e3o de configura\u00e7\u00e3o secure-http temporariamente ao instalar o pacote raiz. Use por sua conta e risco. Usar essa flag \u00e9 uma m\u00e1 ideia. --keep-vcs: Ignora a exclus\u00e3o dos metadados do VCS para o projeto criado. Isso \u00e9 \u00fatil principalmente se voc\u00ea executar o comando em modo n\u00e3o interativo. --remove-vcs: For\u00e7a a remo\u00e7\u00e3o dos metadados do VCS sem pedir confirma\u00e7\u00e3o. --no-install: Desabilita a instala\u00e7\u00e3o dos vendors. --ignore-platform-reqs: Ignora os requisitos php , hhvm , lib-* e ext-* e for\u00e7a a instala\u00e7\u00e3o, mesmo que a m\u00e1quina local n\u00e3o os cumpra. Veja tamb\u00e9m a op\u00e7\u00e3o de configura\u00e7\u00e3o platform .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#dump-autoload-dumpautoload","text":"Se voc\u00ea precisar atualizar o autoloader por causa de novas classes em um pacote de mapa de classes, por exemplo, poder\u00e1 usar dump-autoload para fazer isso sem precisar passar por uma instala\u00e7\u00e3o ou atualiza\u00e7\u00e3o. Al\u00e9m disso, ele pode fazer o dump de um autoloader otimizado que converte pacotes PSR-0/4 em pacotes de mapa de classes por motivos de desempenho. Em aplica\u00e7\u00f5es grandes com muitas classes, o autoloader pode ocupar uma por\u00e7\u00e3o substancial do tempo de cada requisi\u00e7\u00e3o. O uso de mapas de classes para tudo \u00e9 menos conveniente durante o desenvolvimento, mas, usando essa op\u00e7\u00e3o, voc\u00ea ainda pode usar PSR-0/4 por conveni\u00eancia e mapas de classes por desempenho.","title":"dump-autoload (dumpautoload)"},{"location":"cli.html#opcoes-dump-autoload","text":"--no-scripts: Ignora a execu\u00e7\u00e3o dos scripts definidos no composer.json . --optimize (-o): Converte o autoloading PSR-0/4 em um mapa de classes para obter um autoloader mais r\u00e1pido. Isso \u00e9 recomendado especialmente em produ\u00e7\u00e3o, mas pode demorar um pouco para ser executado, portanto, no momento n\u00e3o \u00e9 feito por padr\u00e3o. --classmap-authoritative (-a): Faz o autoload apenas das classes do mapa de classes. Implicitamente habilita --optimize . --apcu: Usa a APCu para armazenar em cache as classes encontradas/n\u00e3o encontradas. --no-dev: Desabilita as regras em autoload-dev .","title":"Op\u00e7\u00f5es"},{"location":"cli.html#clear-cache-clearcache","text":"Exclui todo o conte\u00fado dos diret\u00f3rios de cache do Composer.","title":"clear-cache (clearcache)"},{"location":"cli.html#licenses","text":"Lista o nome, vers\u00e3o e licen\u00e7a de cada pacote instalado. Use --format=json para obter uma sa\u00edda leg\u00edvel para m\u00e1quinas.","title":"licenses"},{"location":"cli.html#opcoes-licenses","text":"--format: Formato da sa\u00edda: text ou json (padr\u00e3o: text ). --no-dev: Remove as depend\u00eancias de desenvolvimento da sa\u00edda.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#run-script","text":"","title":"run-script"},{"location":"cli.html#opcoes-run-script","text":"--timeout: Define o tempo limite do script em segundos ou 0 para desabilitar o tempo limite. --dev: Habilita o modo de desenvolvimento. --no-dev: Desabilita o modo de desenvolvimento. --list (-l): Lista os scripts definidos por quem que est\u00e1 desenvolvendo. Para executar scripts manualmente, voc\u00ea pode usar esse comando, passando o nome do script e, opcionalmente, quaisquer argumentos necess\u00e1rios.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#exec","text":"Executa um bin\u00e1rio ou script de um vendor. Voc\u00ea pode executar qualquer comando e isso garantir\u00e1 que o diret\u00f3rio bin-dir do Composer seja adicionado \u00e0 vari\u00e1vel PATH antes do comando ser executado.","title":"exec"},{"location":"cli.html#opcoes-exec","text":"--list (-l): Lista os bin\u00e1rios dispon\u00edveis no Composer.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#diagnose","text":"Se voc\u00ea acha que encontrou um erro ou se algo est\u00e1 se comportando de maneira estranha, conv\u00e9m executar o comando diagnose para realizar verifica\u00e7\u00f5es automatizadas de muitos problemas comuns. php composer.phar diagnose","title":"diagnose"},{"location":"cli.html#archive","text":"Esse comando \u00e9 usado para gerar um arquivo compactado zip/tar para um determinado pacote em uma determinada vers\u00e3o. Tamb\u00e9m pode ser usado para arquivar seu projeto inteiro sem os arquivos exclu\u00eddos/ignorados. php composer.phar archive vendor/pacote 2.0.21 --format=zip","title":"archive"},{"location":"cli.html#opcoes-archive","text":"--format (-f): Formato do arquivo compactado resultante: tar ou zip (padr\u00e3o: tar ). --dir: Salva o arquivo compactado neste diret\u00f3rio (padr\u00e3o: . ). --file: Salva o arquivo compactado com o nome de arquivo especificado.","title":"Op\u00e7\u00f5es"},{"location":"cli.html#help","text":"Para obter mais informa\u00e7\u00f5es sobre um determinado comando, voc\u00ea pode usar help . php composer.phar help install","title":"help"},{"location":"cli.html#preenchimento-automatico-na-linha-de-comando","text":"O preenchimento autom\u00e1tico na linha de comando pode ser habilitado seguindo as instru\u00e7\u00f5es nesta p\u00e1gina .","title":"Preenchimento Autom\u00e1tico na Linha de Comando"},{"location":"cli.html#variaveis-de-ambiente","text":"Voc\u00ea pode definir algumas vari\u00e1veis de ambiente que substituem determinadas configura\u00e7\u00f5es. Sempre que poss\u00edvel, \u00e9 recomend\u00e1vel especificar essas configura\u00e7\u00f5es na se\u00e7\u00e3o config do composer.json . Vale ressaltar que as vari\u00e1veis de ambiente sempre ter\u00e3o preced\u00eancia sobre os valores especificados no composer.json .","title":"Vari\u00e1veis de Ambiente"},{"location":"cli.html#composer","text":"Ao definir a vari\u00e1vel de ambiente COMPOSER , \u00e9 poss\u00edvel definir o nome do arquivo composer.json como algum outro. Por exemplo: COMPOSER=outro-composer.json php composer.phar install O arquivo lock gerado usar\u00e1 o mesmo nome: outro-composer.lock nesse exemplo.","title":"COMPOSER"},{"location":"cli.html#composer-allow-superuser","text":"Se definida como 1 , esta vari\u00e1vel de ambiente desabilita o aviso sobre a execu\u00e7\u00e3o de comandos como root/superusu\u00e1rio. Ela tamb\u00e9m desabilita a limpeza autom\u00e1tica de sess\u00f5es sudo; portanto, voc\u00ea realmente deve defini-la apenas se usar o Composer como superusu\u00e1rio o tempo todo, como em containers do Docker.","title":"COMPOSER_ALLOW_SUPERUSER"},{"location":"cli.html#composer-auth","text":"A vari\u00e1vel COMPOSER_AUTH permite configurar a autentica\u00e7\u00e3o como uma vari\u00e1vel de ambiente. O conte\u00fado da vari\u00e1vel deve ser um objeto JSON contendo objetos http-basic , github-oauth , bitbucket-oauth , ..., conforme necess\u00e1rio e seguindo as especifica\u00e7\u00f5es da configura\u00e7\u00e3o .","title":"COMPOSER_AUTH"},{"location":"cli.html#composer-bin-dir","text":"Ao definir esta op\u00e7\u00e3o, voc\u00ea pode alterar o diret\u00f3rio bin ( Bin\u00e1rios dos Vendors ) para algo diferente de vendor/bin .","title":"COMPOSER_BIN_DIR"},{"location":"cli.html#composer-cache-dir","text":"A vari\u00e1vel COMPOSER_CACHE_DIR permite alterar o diret\u00f3rio de cache do Composer, que tamb\u00e9m \u00e9 configur\u00e1vel atrav\u00e9s da op\u00e7\u00e3o cache-dir . Por padr\u00e3o, ela aponta para $COMPOSER_HOME/cache no *nix e macOS e C:\\Users\\<user>\\AppData\\Local\\Composer (ou %LOCALAPPDATA%\\Composer ) no Windows.","title":"COMPOSER_CACHE_DIR"},{"location":"cli.html#composer-cafile","text":"Ao definir esta vari\u00e1vel de ambiente, \u00e9 poss\u00edvel definir um caminho para um arquivo de pacote de certificado que ser\u00e1 usado durante a verifica\u00e7\u00e3o por par SSL/TLS.","title":"COMPOSER_CAFILE"},{"location":"cli.html#composer-discard-changes","text":"Esta vari\u00e1vel controla a op\u00e7\u00e3o de configura\u00e7\u00e3o discard-changes .","title":"COMPOSER_DISCARD_CHANGES"},{"location":"cli.html#composer-home","text":"A vari\u00e1vel COMPOSER_HOME permite alterar o diret\u00f3rio inicial do Composer. Este \u00e9 um diret\u00f3rio oculto global (por usu\u00e1rio na m\u00e1quina) compartilhado entre todos os projetos. Por padr\u00e3o, ela aponta para C:\\Users\\<usuario>\\AppData\\Roaming\\Composer no Windows e /Users/<usuario>/.composer no macOS. Em sistemas *nix que seguem as Especifica\u00e7\u00f5es de Diret\u00f3rio Base do XDG , ela aponta para $XDG_CONFIG_HOME/composer . Em outros sistemas *nix, ela aponta para /home/<usuario>/.composer .","title":"COMPOSER_HOME"},{"location":"cli.html#composer-home-config-json","text":"Voc\u00ea pode colocar um arquivo config.json no local para o qual COMPOSER_HOME aponta. O Composer combinar\u00e1 esta configura\u00e7\u00e3o com o composer.json do seu projeto quando voc\u00ea executar os comandos install e update . Esse arquivo permite definir reposit\u00f3rios e configura\u00e7\u00f5es para os seus projetos. Caso a configura\u00e7\u00e3o global corresponda \u00e0 configura\u00e7\u00e3o local , a configura\u00e7\u00e3o local no composer.json do projeto sempre vence.","title":"COMPOSER_HOME/config.json"},{"location":"cli.html#composer-htaccess-protect","text":"O padr\u00e3o \u00e9 1 . Se definida como 0 , o Composer n\u00e3o criar\u00e1 arquivos .htaccess nos diret\u00f3rios home, cache e data do Composer.","title":"COMPOSER_HTACCESS_PROTECT"},{"location":"cli.html#composer-memory-limit","text":"Se definida, o valor \u00e9 usado como memory_limit do PHP.","title":"COMPOSER_MEMORY_LIMIT"},{"location":"cli.html#composer-mirror-path-repos","text":"Se definida como 1 , esta vari\u00e1vel de ambiente altera a estrat\u00e9gia padr\u00e3o do reposit\u00f3rio de caminhos para mirror em vez de symlink . Como \u00e9 a estrat\u00e9gia padr\u00e3o definida, ela ainda pode ser substitu\u00edda pelas op\u00e7\u00f5es do reposit\u00f3rio.","title":"COMPOSER_MIRROR_PATH_REPOS"},{"location":"cli.html#composer-no-interaction","text":"Se definida como 1 , esta vari\u00e1vel de ambiente far\u00e1 o Composer se comportar como se voc\u00ea passasse a flag --no-interaction para todos os comandos. Ela pode ser definida em servidores de build/CI.","title":"COMPOSER_NO_INTERACTION"},{"location":"cli.html#composer-process-timeout","text":"Esta vari\u00e1vel de ambiente controla o tempo que o Composer espera por comandos (como comandos do git) antes de finalizar a execu\u00e7\u00e3o. O valor padr\u00e3o \u00e9 300 segundos (5 minutos).","title":"COMPOSER_PROCESS_TIMEOUT"},{"location":"cli.html#composer-root-version","text":"Ao definir esta vari\u00e1vel, voc\u00ea pode especificar a vers\u00e3o do pacote raiz, se ela n\u00e3o puder ser deduzida a partir das informa\u00e7\u00f5es do VCS e n\u00e3o estiver presente no composer.json .","title":"COMPOSER_ROOT_VERSION"},{"location":"cli.html#composer-vendor-dir","text":"Ao definir esta vari\u00e1vel, voc\u00ea pode fazer com que o Composer instale as depend\u00eancias em um diret\u00f3rio que n\u00e3o seja o vendor .","title":"COMPOSER_VENDOR_DIR"},{"location":"cli.html#http-proxy","text":"Se voc\u00ea estiver usando o Composer por tr\u00e1s de um proxy HTTP, poder\u00e1 usar a vari\u00e1vel de ambiente padr\u00e3o http_proxy ou HTTP_PROXY . Basta configur\u00e1-la como a URL do seu proxy. Muitos sistemas operacionais j\u00e1 definem esta vari\u00e1vel para voc\u00ea. Usar http_proxy (letras min\u00fasculas) ou mesmo definir as duas pode ser prefer\u00edvel, pois algumas ferramentas como git ou curl usar\u00e3o apenas a vers\u00e3o http_proxy com letras min\u00fasculas. Como alternativa, voc\u00ea tamb\u00e9m pode definir o proxy do git usando git config --global http.proxy <url-do-proxy> . Se voc\u00ea estiver usando o Composer em um contexto que n\u00e3o seja a CLI (ou seja, integra\u00e7\u00e3o em um CMS ou caso de uso semelhante) e precisar oferecer suporte a proxies, forne\u00e7a a vari\u00e1vel de ambiente CGI_HTTP_PROXY . Consulte httpoxy .org para mais detalhes.","title":"http_proxy ou HTTP_PROXY"},{"location":"cli.html#http-proxy-request-fulluri","text":"Se voc\u00ea usar um proxy, mas ele n\u00e3o suportar a flag request_fulluri , ent\u00e3o voc\u00ea deve definir esta vari\u00e1vel como false ou 0 para impedir que o Composer defina a op\u00e7\u00e3o request_fulluri .","title":"HTTP_PROXY_REQUEST_FULLURI"},{"location":"cli.html#https-proxy-request-fulluri","text":"Se voc\u00ea usar um proxy, mas ele n\u00e3o suportar a flag request_fulluri para requisi\u00e7\u00f5es HTTPS, ent\u00e3o voc\u00ea deve definir esta vari\u00e1vel como false ou 0 para impedir que o Composer defina a op\u00e7\u00e3o request_fulluri .","title":"HTTPS_PROXY_REQUEST_FULLURI"},{"location":"cli.html#composer-self-update-target","text":"Se definida, faz com que o comando self-update salve o novo arquivo phar do Composer neste caminho em vez de sobrescrever-se. \u00datil para atualizar o Composer em sistemas de arquivos somente leitura.","title":"COMPOSER_SELF_UPDATE_TARGET"},{"location":"cli.html#no-proxy","text":"Se voc\u00ea estiver atr\u00e1s de um proxy e deseja desabilit\u00e1-lo para determinados dom\u00ednios, pode usar a vari\u00e1vel de ambiente no_proxy ou NO_PROXY . Simplesmente defina-a como uma lista de dom\u00ednios separados por v\u00edrgula para os quais o proxy n\u00e3o deve ser usado. A vari\u00e1vel de ambiente aceita dom\u00ednios, endere\u00e7os de IP e blocos de endere\u00e7os de IP em nota\u00e7\u00e3o CIDR. Voc\u00ea pode restringir o filtro a uma porta espec\u00edfica (por exemplo, :80 ). Voc\u00ea tamb\u00e9m pode configur\u00e1-la como * para ignorar o proxy para todas as requisi\u00e7\u00f5es HTTP.","title":"no_proxy ou NO_PROXY"},{"location":"comunidade.html","text":"Comunidade \u00b6 J\u00e1 existem muitas pessoas usando o Composer e muita delas est\u00e3o contribuindo. Contribuindo \u00b6 Se voc\u00ea deseja contribuir com o Composer, leia os documentos README e CONTRIBUTING . As diretrizes mais importantes s\u00e3o descritas a seguir: Todas as contribui\u00e7\u00f5es de c\u00f3digo - incluindo aquelas de pessoas com acesso para fazer commit - devem passar por uma pull request e ser aprovadas por um desenvolvedor principal antes de serem adicionadas a um merge. Isso \u00e9 para garantir a revis\u00e3o adequada de todo o c\u00f3digo. Fa\u00e7a o fork do projeto, crie um feature branch e nos envie uma pull request. Para garantir uma base de c\u00f3digo consistente, verifique se o c\u00f3digo segue os Padr\u00f5es de Codifica\u00e7\u00e3o PSR-2 . IRC / Lista de Discuss\u00e3o \u00b6 Listas de discuss\u00e3o para suporte ao usu\u00e1rio e desenvolvimento . Canais IRC est\u00e3o dispon\u00edveis no irc.freenode.org: #composer para usu\u00e1rios e #composer-dev para desenvolvimento. O Stack Overflow tem uma cole\u00e7\u00e3o crescente de perguntas relacionadas ao Composer .","title":"Comunidade"},{"location":"comunidade.html#comunidade","text":"J\u00e1 existem muitas pessoas usando o Composer e muita delas est\u00e3o contribuindo.","title":"Comunidade"},{"location":"comunidade.html#contribuindo","text":"Se voc\u00ea deseja contribuir com o Composer, leia os documentos README e CONTRIBUTING . As diretrizes mais importantes s\u00e3o descritas a seguir: Todas as contribui\u00e7\u00f5es de c\u00f3digo - incluindo aquelas de pessoas com acesso para fazer commit - devem passar por uma pull request e ser aprovadas por um desenvolvedor principal antes de serem adicionadas a um merge. Isso \u00e9 para garantir a revis\u00e3o adequada de todo o c\u00f3digo. Fa\u00e7a o fork do projeto, crie um feature branch e nos envie uma pull request. Para garantir uma base de c\u00f3digo consistente, verifique se o c\u00f3digo segue os Padr\u00f5es de Codifica\u00e7\u00e3o PSR-2 .","title":"Contribuindo"},{"location":"comunidade.html#irc-lista-de-discussao","text":"Listas de discuss\u00e3o para suporte ao usu\u00e1rio e desenvolvimento . Canais IRC est\u00e3o dispon\u00edveis no irc.freenode.org: #composer para usu\u00e1rios e #composer-dev para desenvolvimento. O Stack Overflow tem uma cole\u00e7\u00e3o crescente de perguntas relacionadas ao Composer .","title":"IRC / Lista de Discuss\u00e3o"},{"location":"config.html","text":"Config \u00b6 Este cap\u00edtulo descreve a se\u00e7\u00e3o config do esquema do composer.json . process-timeout \u00b6 O padr\u00e3o \u00e9 300 . A dura\u00e7\u00e3o que processos como git clone podem ser executados antes que o Composer assuma que eles morreram. Pode ser necess\u00e1rio aumentar isso se voc\u00ea tiver uma conex\u00e3o lenta ou grandes vendors. Para desabilitar o tempo limite do processo em um comando personalizado em scripts , um auxiliar est\u00e1tico est\u00e1 dispon\u00edvel: { \"scripts\": { \"test\": [ \"Composer\\\\Config::disableProcessTimeout\", \"phpunit\" ] } } use-include-path \u00b6 O padr\u00e3o \u00e9 false . Se true , o autoloader do Composer tamb\u00e9m procurar\u00e1 classes no include_path do PHP. preferred-install \u00b6 O padr\u00e3o \u00e9 auto e pode ser source , dist ou auto . Essa op\u00e7\u00e3o permite definir o m\u00e9todo de instala\u00e7\u00e3o que o Composer usar\u00e1 preferencialmente. Opcionalmente, pode ser um hash de padr\u00f5es para prefer\u00eancias de instala\u00e7\u00e3o mais granulares. { \"config\": { \"preferred-install\": { \"minha-organizacao/pacote-estavel\": \"dist\", \"minha-organizacao/*\": \"source\", \"organizacao-parceira/*\": \"auto\", \"*\": \"dist\" } } } Nota: A ordem importa. Padr\u00f5es mais espec\u00edficos devem vir antes de padr\u00f5es mais relaxados. Ao misturar a nota\u00e7\u00e3o de string com a configura\u00e7\u00e3o de hash nas configura\u00e7\u00f5es global e de pacote, a nota\u00e7\u00e3o de string \u00e9 convertida em um padr\u00e3o de pacote * . store-auths \u00b6 O que fazer depois de solicitar a autentica\u00e7\u00e3o, uma das seguintes op\u00e7\u00f5es: true (sempre armazenar), false (n\u00e3o armazenar) e prompt (perguntar sempre), o padr\u00e3o \u00e9 prompt . github-protocols \u00b6 O padr\u00e3o \u00e9 [\"https\", \"ssh\", \"git\"] . Uma lista de protocolos a serem usados ao clonar de github.com, em ordem de prioridade. Por padr\u00e3o, git est\u00e1 presente, mas apenas se secure-http estiver desabilitada, pois o protocolo git n\u00e3o \u00e9 criptografado. Se voc\u00ea deseja que as URLs de push do seu reposit\u00f3rio remoto origin usem https e n\u00e3o ssh ( git@github.com:... ), defina a lista de protocolos como somente [\"https\"] e o Composer parar\u00e1 de substituir a URL de push por uma URL ssh. github-oauth \u00b6 Uma lista de nomes de dom\u00ednio e chaves OAuth. Por exemplo, ao usar {\"github.com\": \"token-oauth\"} como valor desta op\u00e7\u00e3o, token-oauth ser\u00e1 usado para acessar reposit\u00f3rios privados no GitHub e contornar a baixa limita\u00e7\u00e3o de uso baseada em IP da API deles. Leia mais sobre como obter um token OAuth para o GitHub. gitlab-oauth \u00b6 Uma lista de nomes de dom\u00ednio e chaves OAuth. Por exemplo, ao usar {\"gitlab.com\": \"token-oauth\"} como valor desta op\u00e7\u00e3o, token-oauth ser\u00e1 usado para acessar reposit\u00f3rios privados no GitLab. Note que, se o pacote n\u00e3o estiver hospedado em gitlab.com, os nomes de dom\u00ednio tamb\u00e9m devem ser especificados com a op\u00e7\u00e3o gitlab-domains . gitlab-token \u00b6 Uma lista de nomes de dom\u00ednio e tokens privados. Por exemplo, ao usar {\"gitlab.com\": \"token-privado\"} como valor desta op\u00e7\u00e3o, token-privado ser\u00e1 usado para acessar reposit\u00f3rios privados no GitLab. Note que, se o pacote n\u00e3o estiver hospedado em gitlab.com, os nomes de dom\u00ednio tamb\u00e9m devem ser especificados com a op\u00e7\u00e3o gitlab-domains . disable-tls \u00b6 O padr\u00e3o \u00e9 false . Se definida como true , todas as URLs HTTPS ser\u00e3o acessadas com HTTP e nenhuma criptografia no n\u00edvel de rede ser\u00e1 usada. Habilitar esta op\u00e7\u00e3o \u00e9 um risco \u00e0 seguran\u00e7a e N\u00c3O \u00e9 recomendado. A melhor maneira \u00e9 habilitar a extens\u00e3o php_openssl no php.ini . secure-http \u00b6 O padr\u00e3o \u00e9 true . Se definida como true , somente as URLs HTTPS poder\u00e3o ser baixadas pelo Composer. Se voc\u00ea realmente precisa de acesso HTTP a alguma coisa, pode desabilit\u00e1-la, mas usar o Let's Encrypt para obter um certificado SSL gratuito geralmente \u00e9 uma alternativa melhor. bitbucket-oauth \u00b6 Uma lista de nomes de dom\u00ednio e consumidores. Por exemplo, usando {\"bitbucket.org\": {\"consumer-key\": \"minha-chave\", \"consumer-secret\": \"meu-segredo\"}} . Leia sobre como configurar um consumidor no Bitbucket. cafile \u00b6 Localiza\u00e7\u00e3o do arquivo da Autoridade de Certifica\u00e7\u00e3o no sistema de arquivos local. No PHP 5.6+, voc\u00ea deve definir isso via openssl.cafile no php.ini , embora o PHP 5.6+ possa detectar o arquivo CA do sistema automaticamente. capath \u00b6 Se cafile n\u00e3o for especificado ou se o certificado n\u00e3o for encontrado l\u00e1, o diret\u00f3rio apontado por capath ser\u00e1 usado para procurar um certificado adequado. capath deve ser um diret\u00f3rio de certificado com hash correto. http-basic \u00b6 Uma lista de nomes de dom\u00ednios e usu\u00e1rios/senhas com os quais se autenticar nesses dom\u00ednios. Por exemplo, usar {\"exemplo.org.br\": {\"username\": \"alice\", \"password\": \"foo\"}} como valor desta op\u00e7\u00e3o permitir\u00e1 que o Composer se autentique em exemplo.org.br. Nota: Op\u00e7\u00f5es de configura\u00e7\u00e3o relacionadas \u00e0 autentica\u00e7\u00e3o, como http-basic e github-oauth , tamb\u00e9m podem ser especificadas em um arquivo auth.json que fica junto ao seu arquivo composer.json . Dessa forma, voc\u00ea pode adicion\u00e1-lo ao .gitignore e cada desenvolvedor pode colocar suas pr\u00f3prias credenciais l\u00e1. platform \u00b6 Permite simular pacotes de plataforma (PHP e extens\u00f5es) para que voc\u00ea possa emular um ambiente de produ\u00e7\u00e3o ou definir sua plataforma de destino na configura\u00e7\u00e3o. Exemplo: {\"php\": \"7.0.3\", \"ext-alguma-coisa\": \"4.0.3\"} . vendor-dir \u00b6 O padr\u00e3o \u00e9 vendor . Voc\u00ea pode instalar depend\u00eancias em um diret\u00f3rio diferente, se desejar. $HOME e ~ ser\u00e3o substitu\u00eddos pelo caminho do seu diret\u00f3rio inicial em vendor-dir e todas as op\u00e7\u00f5es *-dir abaixo. bin-dir \u00b6 O padr\u00e3o \u00e9 vendor/bin . Se um projeto incluir bin\u00e1rios, ser\u00e3o criados links simb\u00f3licos para eles neste diret\u00f3rio. data-dir \u00b6 O padr\u00e3o \u00e9 C:\\Users\\<usuario>\\AppData\\Roaming\\Composer no Windows, $XDG_DATA_HOME/composer em sistemas *nix que seguem as Especifica\u00e7\u00f5es de Diret\u00f3rio Base do XDG e $HOME em outros sistemas *nix. No momento, \u00e9 usada apenas para armazenar arquivos composer.phar anteriores para poder reverter para vers\u00f5es mais antigas. Veja tamb\u00e9m COMPOSER_HOME . cache-dir \u00b6 O padr\u00e3o \u00e9 C:\\Users\\<usuario>\\AppData\\Local\\Composer no Windows, $XDG_CACHE_HOME/composer em sistemas *nix que seguem as Especifica\u00e7\u00f5es de Diret\u00f3rio Base do XDG e $HOME/cache em outros sistemas *nix. Armazena todos os caches usados pelo Composer. Veja tamb\u00e9m COMPOSER_HOME . cache-files-dir \u00b6 O padr\u00e3o \u00e9 $cache-dir/files . Armazena os arquivos zip dos pacotes. cache-repo-dir \u00b6 O padr\u00e3o \u00e9 $cache-dir/repo . Armazena os metadados dos reposit\u00f3rios do tipo composer e os reposit\u00f3rios VCS dos tipos svn , fossil , github e bitbucket . cache-vcs-dir \u00b6 O padr\u00e3o \u00e9 $cache-dir/vcs . Armazena clones VCS para carregar os metadados de reposit\u00f3rios VCS dos tipos git / hg e acelerar as instala\u00e7\u00f5es. cache-files-ttl \u00b6 O padr\u00e3o \u00e9 15552000 (6 meses). O Composer armazena em cache todos os pacotes dist (zip, tar, ...) que ele baixa. Por padr\u00e3o, eles s\u00e3o eliminados ap\u00f3s seis meses sem serem utilizados. Esta op\u00e7\u00e3o permite ajustar essa dura\u00e7\u00e3o (em segundos) ou desabilit\u00e1-la completamente, definindo-a como 0 . cache-files-maxsize \u00b6 O padr\u00e3o \u00e9 300MiB . O Composer armazena em cache todos os pacotes dist (zip, tar, ...) que ele baixa. Quando a coleta de lixo \u00e9 executada periodicamente, esse \u00e9 o tamanho m\u00e1ximo que o cache poder\u00e1 usar. Os arquivos mais antigos (menos usados) ser\u00e3o removidos primeiro at\u00e9 que o cache se ajuste a esse tamanho. bin-compat \u00b6 O padr\u00e3o \u00e9 auto . Determina a compatibilidade dos bin\u00e1rios a serem instalados. Se for auto , o Composer instala apenas arquivos proxy .bat quando no Windows. Se definida como full , os arquivos .bat para o Windows e scripts para sistemas operacionais baseados em Unix ser\u00e3o instalados para cada bin\u00e1rio. Isso \u00e9 \u00fatil principalmente se voc\u00ea executar o Composer dentro de uma VM Linux, mas ainda desejar ter os proxies .bat dispon\u00edveis para usar no Windows do host. prepend-autoloader \u00b6 O padr\u00e3o \u00e9 true . Se false , o autoloader do Composer n\u00e3o ser\u00e1 adicionado antes dos autoloaders existentes. \u00c0s vezes, isso \u00e9 necess\u00e1rio para corrigir erros de interoperabilidade com outros autoloaders. autoloader-suffix \u00b6 O padr\u00e3o \u00e9 null . String a ser usada como sufixo pelo autoloader gerado pelo Composer. Quando null , um sufixo aleat\u00f3rio ser\u00e1 gerado. optimize-autoloader \u00b6 O padr\u00e3o \u00e9 false . Se true , sempre otimizar\u00e1 ao fazer o dump do autoloader. sort-packages \u00b6 O padr\u00e3o \u00e9 false . Se true , o comando require manter\u00e1 os pacotes ordenados por nome no composer.json ao adicionar um novo pacote. classmap-authoritative \u00b6 O padr\u00e3o \u00e9 false . Se true , o autoloader do Composer carregar\u00e1 apenas classes do mapa de classes. Implica optimize-autoloader . apcu-autoloader \u00b6 O padr\u00e3o \u00e9 false . Se true , o autoloader do Composer procurar\u00e1 pela extens\u00e3o APCu e a usar\u00e1 para armazenar em cache as classes encontradas/n\u00e3o encontradas quando ela estiver habilitada. github-domains \u00b6 O padr\u00e3o \u00e9 [\"github.com\"] . Uma lista de dom\u00ednios a serem usados no modo GitHub. Isso \u00e9 usado para instala\u00e7\u00f5es do GitHub Enterprise. github-expose-hostname \u00b6 O padr\u00e3o \u00e9 true . Se false , os tokens OAuth criados para acessar a API do GitHub ter\u00e3o uma data em vez do hostname da m\u00e1quina. gitlab-domains \u00b6 O padr\u00e3o \u00e9 [\"gitlab.com\"] . Uma lista de dom\u00ednios de servidores GitLab. Isso \u00e9 usado se voc\u00ea usar o tipo de reposit\u00f3rio gitlab . use-github-api \u00b6 O padr\u00e3o \u00e9 true . Semelhante \u00e0 chave no-api em um reposit\u00f3rio espec\u00edfico, definir use-github-api como false definir\u00e1 o comportamento global para todos os reposit\u00f3rios GitHub para clonar o reposit\u00f3rio como clonaria qualquer outro reposit\u00f3rio git, em vez de usar a API do GitHub. Mas, em vez de usar o driver git diretamente, o Composer ainda tentar\u00e1 usar os arquivos zip do GitHub. notify-on-install \u00b6 O padr\u00e3o \u00e9 true . O Composer permite que reposit\u00f3rios definam uma URL de notifica\u00e7\u00e3o, para que sejam notificados sempre que um pacote desse reposit\u00f3rio for instalado. Esta op\u00e7\u00e3o permite desabilitar esse comportamento. discard-changes \u00b6 O padr\u00e3o \u00e9 false e pode ser true , false ou stash . Esta op\u00e7\u00e3o permite definir a forma padr\u00e3o de lidar com atualiza\u00e7\u00f5es sujas quando em modo n\u00e3o interativo. true sempre descartar\u00e1 as altera\u00e7\u00f5es em vendors, enquanto stash tentar\u00e1 fazer o stash e reaplicar. Use isso para servidores de CI ou scripts de implanta\u00e7\u00e3o se voc\u00ea tende a ter vendors modificados. archive-format \u00b6 O padr\u00e3o \u00e9 tar . O Composer permite adicionar um formato de arquivo padr\u00e3o quando o fluxo de trabalho precisa criar um formato de arquivo dedicado. archive-dir \u00b6 O padr\u00e3o \u00e9 . . O Composer permite adicionar um diret\u00f3rio de arquivo padr\u00e3o quando o fluxo de trabalho precisa criar um formato de arquivo dedicado. Ou para um desenvolvimento mais f\u00e1cil entre os m\u00f3dulos. Exemplo: { \"config\": { \"archive-dir\": \"/home/<usuario>/.composer/repo\" } } htaccess-protect \u00b6 O padr\u00e3o \u00e9 true . Se definida como false , O Composer n\u00e3o criar\u00e1 arquivos .htaccess nos diret\u00f3rios inicial, de cache e de dados do Composer.","title":"Config"},{"location":"config.html#config","text":"Este cap\u00edtulo descreve a se\u00e7\u00e3o config do esquema do composer.json .","title":"Config"},{"location":"config.html#process-timeout","text":"O padr\u00e3o \u00e9 300 . A dura\u00e7\u00e3o que processos como git clone podem ser executados antes que o Composer assuma que eles morreram. Pode ser necess\u00e1rio aumentar isso se voc\u00ea tiver uma conex\u00e3o lenta ou grandes vendors. Para desabilitar o tempo limite do processo em um comando personalizado em scripts , um auxiliar est\u00e1tico est\u00e1 dispon\u00edvel: { \"scripts\": { \"test\": [ \"Composer\\\\Config::disableProcessTimeout\", \"phpunit\" ] } }","title":"process-timeout"},{"location":"config.html#use-include-path","text":"O padr\u00e3o \u00e9 false . Se true , o autoloader do Composer tamb\u00e9m procurar\u00e1 classes no include_path do PHP.","title":"use-include-path"},{"location":"config.html#preferred-install","text":"O padr\u00e3o \u00e9 auto e pode ser source , dist ou auto . Essa op\u00e7\u00e3o permite definir o m\u00e9todo de instala\u00e7\u00e3o que o Composer usar\u00e1 preferencialmente. Opcionalmente, pode ser um hash de padr\u00f5es para prefer\u00eancias de instala\u00e7\u00e3o mais granulares. { \"config\": { \"preferred-install\": { \"minha-organizacao/pacote-estavel\": \"dist\", \"minha-organizacao/*\": \"source\", \"organizacao-parceira/*\": \"auto\", \"*\": \"dist\" } } } Nota: A ordem importa. Padr\u00f5es mais espec\u00edficos devem vir antes de padr\u00f5es mais relaxados. Ao misturar a nota\u00e7\u00e3o de string com a configura\u00e7\u00e3o de hash nas configura\u00e7\u00f5es global e de pacote, a nota\u00e7\u00e3o de string \u00e9 convertida em um padr\u00e3o de pacote * .","title":"preferred-install"},{"location":"config.html#store-auths","text":"O que fazer depois de solicitar a autentica\u00e7\u00e3o, uma das seguintes op\u00e7\u00f5es: true (sempre armazenar), false (n\u00e3o armazenar) e prompt (perguntar sempre), o padr\u00e3o \u00e9 prompt .","title":"store-auths"},{"location":"config.html#github-protocols","text":"O padr\u00e3o \u00e9 [\"https\", \"ssh\", \"git\"] . Uma lista de protocolos a serem usados ao clonar de github.com, em ordem de prioridade. Por padr\u00e3o, git est\u00e1 presente, mas apenas se secure-http estiver desabilitada, pois o protocolo git n\u00e3o \u00e9 criptografado. Se voc\u00ea deseja que as URLs de push do seu reposit\u00f3rio remoto origin usem https e n\u00e3o ssh ( git@github.com:... ), defina a lista de protocolos como somente [\"https\"] e o Composer parar\u00e1 de substituir a URL de push por uma URL ssh.","title":"github-protocols"},{"location":"config.html#github-oauth","text":"Uma lista de nomes de dom\u00ednio e chaves OAuth. Por exemplo, ao usar {\"github.com\": \"token-oauth\"} como valor desta op\u00e7\u00e3o, token-oauth ser\u00e1 usado para acessar reposit\u00f3rios privados no GitHub e contornar a baixa limita\u00e7\u00e3o de uso baseada em IP da API deles. Leia mais sobre como obter um token OAuth para o GitHub.","title":"github-oauth"},{"location":"config.html#gitlab-oauth","text":"Uma lista de nomes de dom\u00ednio e chaves OAuth. Por exemplo, ao usar {\"gitlab.com\": \"token-oauth\"} como valor desta op\u00e7\u00e3o, token-oauth ser\u00e1 usado para acessar reposit\u00f3rios privados no GitLab. Note que, se o pacote n\u00e3o estiver hospedado em gitlab.com, os nomes de dom\u00ednio tamb\u00e9m devem ser especificados com a op\u00e7\u00e3o gitlab-domains .","title":"gitlab-oauth"},{"location":"config.html#gitlab-token","text":"Uma lista de nomes de dom\u00ednio e tokens privados. Por exemplo, ao usar {\"gitlab.com\": \"token-privado\"} como valor desta op\u00e7\u00e3o, token-privado ser\u00e1 usado para acessar reposit\u00f3rios privados no GitLab. Note que, se o pacote n\u00e3o estiver hospedado em gitlab.com, os nomes de dom\u00ednio tamb\u00e9m devem ser especificados com a op\u00e7\u00e3o gitlab-domains .","title":"gitlab-token"},{"location":"config.html#disable-tls","text":"O padr\u00e3o \u00e9 false . Se definida como true , todas as URLs HTTPS ser\u00e3o acessadas com HTTP e nenhuma criptografia no n\u00edvel de rede ser\u00e1 usada. Habilitar esta op\u00e7\u00e3o \u00e9 um risco \u00e0 seguran\u00e7a e N\u00c3O \u00e9 recomendado. A melhor maneira \u00e9 habilitar a extens\u00e3o php_openssl no php.ini .","title":"disable-tls"},{"location":"config.html#secure-http","text":"O padr\u00e3o \u00e9 true . Se definida como true , somente as URLs HTTPS poder\u00e3o ser baixadas pelo Composer. Se voc\u00ea realmente precisa de acesso HTTP a alguma coisa, pode desabilit\u00e1-la, mas usar o Let's Encrypt para obter um certificado SSL gratuito geralmente \u00e9 uma alternativa melhor.","title":"secure-http"},{"location":"config.html#bitbucket-oauth","text":"Uma lista de nomes de dom\u00ednio e consumidores. Por exemplo, usando {\"bitbucket.org\": {\"consumer-key\": \"minha-chave\", \"consumer-secret\": \"meu-segredo\"}} . Leia sobre como configurar um consumidor no Bitbucket.","title":"bitbucket-oauth"},{"location":"config.html#cafile","text":"Localiza\u00e7\u00e3o do arquivo da Autoridade de Certifica\u00e7\u00e3o no sistema de arquivos local. No PHP 5.6+, voc\u00ea deve definir isso via openssl.cafile no php.ini , embora o PHP 5.6+ possa detectar o arquivo CA do sistema automaticamente.","title":"cafile"},{"location":"config.html#capath","text":"Se cafile n\u00e3o for especificado ou se o certificado n\u00e3o for encontrado l\u00e1, o diret\u00f3rio apontado por capath ser\u00e1 usado para procurar um certificado adequado. capath deve ser um diret\u00f3rio de certificado com hash correto.","title":"capath"},{"location":"config.html#http-basic","text":"Uma lista de nomes de dom\u00ednios e usu\u00e1rios/senhas com os quais se autenticar nesses dom\u00ednios. Por exemplo, usar {\"exemplo.org.br\": {\"username\": \"alice\", \"password\": \"foo\"}} como valor desta op\u00e7\u00e3o permitir\u00e1 que o Composer se autentique em exemplo.org.br. Nota: Op\u00e7\u00f5es de configura\u00e7\u00e3o relacionadas \u00e0 autentica\u00e7\u00e3o, como http-basic e github-oauth , tamb\u00e9m podem ser especificadas em um arquivo auth.json que fica junto ao seu arquivo composer.json . Dessa forma, voc\u00ea pode adicion\u00e1-lo ao .gitignore e cada desenvolvedor pode colocar suas pr\u00f3prias credenciais l\u00e1.","title":"http-basic"},{"location":"config.html#platform","text":"Permite simular pacotes de plataforma (PHP e extens\u00f5es) para que voc\u00ea possa emular um ambiente de produ\u00e7\u00e3o ou definir sua plataforma de destino na configura\u00e7\u00e3o. Exemplo: {\"php\": \"7.0.3\", \"ext-alguma-coisa\": \"4.0.3\"} .","title":"platform"},{"location":"config.html#vendor-dir","text":"O padr\u00e3o \u00e9 vendor . Voc\u00ea pode instalar depend\u00eancias em um diret\u00f3rio diferente, se desejar. $HOME e ~ ser\u00e3o substitu\u00eddos pelo caminho do seu diret\u00f3rio inicial em vendor-dir e todas as op\u00e7\u00f5es *-dir abaixo.","title":"vendor-dir"},{"location":"config.html#bin-dir","text":"O padr\u00e3o \u00e9 vendor/bin . Se um projeto incluir bin\u00e1rios, ser\u00e3o criados links simb\u00f3licos para eles neste diret\u00f3rio.","title":"bin-dir"},{"location":"config.html#data-dir","text":"O padr\u00e3o \u00e9 C:\\Users\\<usuario>\\AppData\\Roaming\\Composer no Windows, $XDG_DATA_HOME/composer em sistemas *nix que seguem as Especifica\u00e7\u00f5es de Diret\u00f3rio Base do XDG e $HOME em outros sistemas *nix. No momento, \u00e9 usada apenas para armazenar arquivos composer.phar anteriores para poder reverter para vers\u00f5es mais antigas. Veja tamb\u00e9m COMPOSER_HOME .","title":"data-dir"},{"location":"config.html#cache-dir","text":"O padr\u00e3o \u00e9 C:\\Users\\<usuario>\\AppData\\Local\\Composer no Windows, $XDG_CACHE_HOME/composer em sistemas *nix que seguem as Especifica\u00e7\u00f5es de Diret\u00f3rio Base do XDG e $HOME/cache em outros sistemas *nix. Armazena todos os caches usados pelo Composer. Veja tamb\u00e9m COMPOSER_HOME .","title":"cache-dir"},{"location":"config.html#cache-files-dir","text":"O padr\u00e3o \u00e9 $cache-dir/files . Armazena os arquivos zip dos pacotes.","title":"cache-files-dir"},{"location":"config.html#cache-repo-dir","text":"O padr\u00e3o \u00e9 $cache-dir/repo . Armazena os metadados dos reposit\u00f3rios do tipo composer e os reposit\u00f3rios VCS dos tipos svn , fossil , github e bitbucket .","title":"cache-repo-dir"},{"location":"config.html#cache-vcs-dir","text":"O padr\u00e3o \u00e9 $cache-dir/vcs . Armazena clones VCS para carregar os metadados de reposit\u00f3rios VCS dos tipos git / hg e acelerar as instala\u00e7\u00f5es.","title":"cache-vcs-dir"},{"location":"config.html#cache-files-ttl","text":"O padr\u00e3o \u00e9 15552000 (6 meses). O Composer armazena em cache todos os pacotes dist (zip, tar, ...) que ele baixa. Por padr\u00e3o, eles s\u00e3o eliminados ap\u00f3s seis meses sem serem utilizados. Esta op\u00e7\u00e3o permite ajustar essa dura\u00e7\u00e3o (em segundos) ou desabilit\u00e1-la completamente, definindo-a como 0 .","title":"cache-files-ttl"},{"location":"config.html#cache-files-maxsize","text":"O padr\u00e3o \u00e9 300MiB . O Composer armazena em cache todos os pacotes dist (zip, tar, ...) que ele baixa. Quando a coleta de lixo \u00e9 executada periodicamente, esse \u00e9 o tamanho m\u00e1ximo que o cache poder\u00e1 usar. Os arquivos mais antigos (menos usados) ser\u00e3o removidos primeiro at\u00e9 que o cache se ajuste a esse tamanho.","title":"cache-files-maxsize"},{"location":"config.html#bin-compat","text":"O padr\u00e3o \u00e9 auto . Determina a compatibilidade dos bin\u00e1rios a serem instalados. Se for auto , o Composer instala apenas arquivos proxy .bat quando no Windows. Se definida como full , os arquivos .bat para o Windows e scripts para sistemas operacionais baseados em Unix ser\u00e3o instalados para cada bin\u00e1rio. Isso \u00e9 \u00fatil principalmente se voc\u00ea executar o Composer dentro de uma VM Linux, mas ainda desejar ter os proxies .bat dispon\u00edveis para usar no Windows do host.","title":"bin-compat"},{"location":"config.html#prepend-autoloader","text":"O padr\u00e3o \u00e9 true . Se false , o autoloader do Composer n\u00e3o ser\u00e1 adicionado antes dos autoloaders existentes. \u00c0s vezes, isso \u00e9 necess\u00e1rio para corrigir erros de interoperabilidade com outros autoloaders.","title":"prepend-autoloader"},{"location":"config.html#autoloader-suffix","text":"O padr\u00e3o \u00e9 null . String a ser usada como sufixo pelo autoloader gerado pelo Composer. Quando null , um sufixo aleat\u00f3rio ser\u00e1 gerado.","title":"autoloader-suffix"},{"location":"config.html#optimize-autoloader","text":"O padr\u00e3o \u00e9 false . Se true , sempre otimizar\u00e1 ao fazer o dump do autoloader.","title":"optimize-autoloader"},{"location":"config.html#sort-packages","text":"O padr\u00e3o \u00e9 false . Se true , o comando require manter\u00e1 os pacotes ordenados por nome no composer.json ao adicionar um novo pacote.","title":"sort-packages"},{"location":"config.html#classmap-authoritative","text":"O padr\u00e3o \u00e9 false . Se true , o autoloader do Composer carregar\u00e1 apenas classes do mapa de classes. Implica optimize-autoloader .","title":"classmap-authoritative"},{"location":"config.html#apcu-autoloader","text":"O padr\u00e3o \u00e9 false . Se true , o autoloader do Composer procurar\u00e1 pela extens\u00e3o APCu e a usar\u00e1 para armazenar em cache as classes encontradas/n\u00e3o encontradas quando ela estiver habilitada.","title":"apcu-autoloader"},{"location":"config.html#github-domains","text":"O padr\u00e3o \u00e9 [\"github.com\"] . Uma lista de dom\u00ednios a serem usados no modo GitHub. Isso \u00e9 usado para instala\u00e7\u00f5es do GitHub Enterprise.","title":"github-domains"},{"location":"config.html#github-expose-hostname","text":"O padr\u00e3o \u00e9 true . Se false , os tokens OAuth criados para acessar a API do GitHub ter\u00e3o uma data em vez do hostname da m\u00e1quina.","title":"github-expose-hostname"},{"location":"config.html#gitlab-domains","text":"O padr\u00e3o \u00e9 [\"gitlab.com\"] . Uma lista de dom\u00ednios de servidores GitLab. Isso \u00e9 usado se voc\u00ea usar o tipo de reposit\u00f3rio gitlab .","title":"gitlab-domains"},{"location":"config.html#use-github-api","text":"O padr\u00e3o \u00e9 true . Semelhante \u00e0 chave no-api em um reposit\u00f3rio espec\u00edfico, definir use-github-api como false definir\u00e1 o comportamento global para todos os reposit\u00f3rios GitHub para clonar o reposit\u00f3rio como clonaria qualquer outro reposit\u00f3rio git, em vez de usar a API do GitHub. Mas, em vez de usar o driver git diretamente, o Composer ainda tentar\u00e1 usar os arquivos zip do GitHub.","title":"use-github-api"},{"location":"config.html#notify-on-install","text":"O padr\u00e3o \u00e9 true . O Composer permite que reposit\u00f3rios definam uma URL de notifica\u00e7\u00e3o, para que sejam notificados sempre que um pacote desse reposit\u00f3rio for instalado. Esta op\u00e7\u00e3o permite desabilitar esse comportamento.","title":"notify-on-install"},{"location":"config.html#discard-changes","text":"O padr\u00e3o \u00e9 false e pode ser true , false ou stash . Esta op\u00e7\u00e3o permite definir a forma padr\u00e3o de lidar com atualiza\u00e7\u00f5es sujas quando em modo n\u00e3o interativo. true sempre descartar\u00e1 as altera\u00e7\u00f5es em vendors, enquanto stash tentar\u00e1 fazer o stash e reaplicar. Use isso para servidores de CI ou scripts de implanta\u00e7\u00e3o se voc\u00ea tende a ter vendors modificados.","title":"discard-changes"},{"location":"config.html#archive-format","text":"O padr\u00e3o \u00e9 tar . O Composer permite adicionar um formato de arquivo padr\u00e3o quando o fluxo de trabalho precisa criar um formato de arquivo dedicado.","title":"archive-format"},{"location":"config.html#archive-dir","text":"O padr\u00e3o \u00e9 . . O Composer permite adicionar um diret\u00f3rio de arquivo padr\u00e3o quando o fluxo de trabalho precisa criar um formato de arquivo dedicado. Ou para um desenvolvimento mais f\u00e1cil entre os m\u00f3dulos. Exemplo: { \"config\": { \"archive-dir\": \"/home/<usuario>/.composer/repo\" } }","title":"archive-dir"},{"location":"config.html#htaccess-protect","text":"O padr\u00e3o \u00e9 true . Se definida como false , O Composer n\u00e3o criar\u00e1 arquivos .htaccess nos diret\u00f3rios inicial, de cache e de dados do Composer.","title":"htaccess-protect"},{"location":"esquema.html","text":"O Esquema do composer.json \u00b6 Este cap\u00edtulo explicar\u00e1 todos os campos dispon\u00edveis no composer.json . Esquema JSON \u00b6 Temos um esquema JSON que documenta o formato e tamb\u00e9m pode ser usado para validar seu composer.json . De fato, ele \u00e9 usado pelo comando validate . Voc\u00ea pode encontr\u00e1-lo no site do Composer . Pacote Raiz \u00b6 O pacote raiz \u00e9 o pacote definido pelo composer.json na raiz do seu projeto. \u00c9 o composer.json principal que define os requisitos do seu projeto. Certos campos se aplicam apenas no contexto do pacote raiz. Um exemplo disto \u00e9 o campo config . Somente o pacote raiz pode definir a configura\u00e7\u00e3o. O campo config das depend\u00eancias \u00e9 ignorado. Isto faz do campo config um campo root-only . Nota: Um pacote pode ser o pacote raiz ou n\u00e3o, dependendo do contexto. Por exemplo, se seu projeto depende da biblioteca monolog , seu projeto \u00e9 o pacote raiz. No entanto, se voc\u00ea clonar o monolog no GitHub para corrigir um erro, ent\u00e3o o monolog \u00e9 o pacote raiz. Propriedades \u00b6 name \u00b6 O nome do pacote. Consiste no nome do vendor e no nome do projeto, separados por / . Exemplos: monolog/monolog igorw/event-source O nome pode conter qualquer caractere, incluindo espa\u00e7os em branco, e n\u00e3o diferencia mai\u00fasculas de min\u00fasculas ( foo/bar e Foo/Bar s\u00e3o considerados o mesmo pacote). Para simplificar sua instala\u00e7\u00e3o, \u00e9 recomend\u00e1vel definir um nome curto e em min\u00fasculas que n\u00e3o inclua caracteres n\u00e3o alfanum\u00e9ricos ou espa\u00e7os em branco. Obrigat\u00f3rio para pacotes publicados (bibliotecas). description \u00b6 Uma breve descri\u00e7\u00e3o do pacote. Normalmente, tem apenas uma linha de comprimento. Obrigat\u00f3rio para pacotes publicados (bibliotecas). version \u00b6 A vers\u00e3o do pacote. Na maioria dos casos, n\u00e3o \u00e9 necess\u00e1ria e deve ser omitida (veja abaixo). Ela deve seguir o formato X.Y.Z ou vX.Y.Z com um sufixo opcional -dev , -patch ( -p ), -alpha ( -a ), -beta ( -b ) ou -RC . Os sufixos patch, alpha, beta e RC podem ser seguidos por um n\u00famero. Exemplos: 1.0.0 1.0.2 1.1.0 0.2.5 1.0.0-dev 1.0.0-alpha3 1.0.0-beta2 1.0.0-RC5 v2.0.4-p1 Opcional se o reposit\u00f3rio do pacote puder inferir a vers\u00e3o de algum lugar, como o nome da tag no reposit\u00f3rio VCS. Neste caso, tamb\u00e9m \u00e9 recomend\u00e1vel omiti-la. Nota: O Packagist usa reposit\u00f3rios VCS, portanto, a declara\u00e7\u00e3o acima tamb\u00e9m \u00e9 verdadeira para o Packagist. Especificar a vers\u00e3o por conta pr\u00f3pria provavelmente criar\u00e1 problemas em algum momento devido a erro humano. type \u00b6 O tipo do pacote. O padr\u00e3o \u00e9 library . Os tipos de pacote s\u00e3o usados para l\u00f3gica de instala\u00e7\u00e3o personalizada. Se voc\u00ea tiver um pacote que precise de alguma l\u00f3gica especial, voc\u00ea pode definir um tipo personalizado. Pode ser, por exemplo, symfony-bundle , wordpress-plugin ou typo3-cms-extension . Estes tipos ser\u00e3o espec\u00edficos para determinados projetos e precisar\u00e3o fornecer um instalador capaz de instalar pacotes deste tipo. Pronto para uso, o Composer suporta quatro tipos: library: Este \u00e9 o padr\u00e3o. Ele simplesmente copiar\u00e1 os arquivos para vendor . project: Denota um projeto em vez de uma biblioteca. Por exemplo, shells de aplica\u00e7\u00f5es como a Edi\u00e7\u00e3o Padr\u00e3o do Symfony , CMSs como o instalador do SilverStripe ou aplica\u00e7\u00f5es completas distribu\u00eddas como pacotes. Isto pode ser usado, por exemplo, pelas IDEs para fornecer listagens de projetos a serem inicializados ao criar um novo workspace. metapackage: Um pacote vazio que cont\u00e9m requisitos e acionar\u00e1 suas instala\u00e7\u00f5es, mas n\u00e3o cont\u00e9m nenhum arquivo e n\u00e3o gravar\u00e1 nada no sistema de arquivos. Sendo assim, n\u00e3o requer uma chave dist ou source para ser instal\u00e1vel. composer-plugin: Um pacote do tipo composer-plugin pode fornecer um instalador para outros pacotes que possuem um tipo personalizado. Leia mais no artigo dedicado . Use um tipo personalizado somente se precisar de l\u00f3gica personalizada durante a instala\u00e7\u00e3o. \u00c9 recomend\u00e1vel omitir este campo e usar o padr\u00e3o library . keywords \u00b6 Um array de palavras-chave \u00e0s quais o pacote est\u00e1 relacionado. Elas podem ser usadas para pesquisa e filtragem. Exemplos: logging events database redis templating Opcional. homepage \u00b6 Uma URL para o site do projeto. Opcional. readme \u00b6 Um caminho relativo para o documento README . Opcional. time \u00b6 Data de lan\u00e7amento da vers\u00e3o. Deve estar no formato YYYY-MM-DD ou YYYY-MM-DD HH:MM:SS . Opcional. license \u00b6 A licen\u00e7a do pacote. Pode ser uma string ou um array de strings. A nota\u00e7\u00e3o recomendada para as licen\u00e7as mais comuns \u00e9 (em ordem alfab\u00e9tica): Apache-2.0 BSD-2-Clause BSD-3-Clause BSD-4-Clause GPL-2.0-only / GPL-2.0-or-later GPL-3.0-only / GPL-3.0-or-later LGPL-2.1-only / LGPL-2.1-or-later LGPL-3.0-only / LGPL-3.0-or-later MIT Opcional, mas \u00e9 altamente recomend\u00e1vel fornec\u00ea-la. Mais identificadores est\u00e3o listados no Registro de Licen\u00e7as de C\u00f3digo Aberto SPDX . Para software de c\u00f3digo fechado, voc\u00ea pode usar proprietary como identificador da licen\u00e7a. Um exemplo: { \"license\": \"MIT\" } Para um pacote, quando h\u00e1 uma escolha entre as licen\u00e7as (\"licen\u00e7as disjuntivas\"), v\u00e1rias podem ser especificadas como array. Um exemplo usando licen\u00e7as disjuntivas: { \"license\": [ \"LGPL-2.1-only\", \"GPL-3.0-or-later\" ] } Alternativamente, elas podem ser separadas por or e colocadas entre par\u00eanteses; { \"license\": \"(LGPL-2.1-only or GPL-3.0-or-later)\" } Da mesma forma, quando v\u00e1rias licen\u00e7as precisam ser aplicadas (\"licen\u00e7as conjuntivas\"), elas devem ser separadas por and e colocadas entre par\u00eanteses; authors \u00b6 As pessoas que criaram o pacote, listadas em um array de objetos. Cada objeto de pessoa pode ter as seguintes propriedades: name: O nome da pessoa. Geralmente o nome verdadeiro. email: O endere\u00e7o de e-mail da pessoa. homepage: Uma URL para o site da pessoa. role: A fun\u00e7\u00e3o da pessoa no projeto (por exemplo, desenvolvedora ou tradutora). Um exemplo: { \"authors\": [ { \"name\": \"Nils Adermann\", \"email\": \"naderman@naderman.de\", \"homepage\": \"http://www.naderman.de\", \"role\": \"Developer\" }, { \"name\": \"Jordi Boggiano\", \"email\": \"j.boggiano@seld.be\", \"homepage\": \"https://seld.be\", \"role\": \"Developer\" } ] } Opcional, mas altamente recomendada. support \u00b6 V\u00e1rias informa\u00e7\u00f5es para obter suporte para o projeto. As informa\u00e7\u00f5es de suporte incluem as seguintes: email: Endere\u00e7o de e-mail para suporte. issues: URL do sistema para acompanhamento de issues. forum: URL do f\u00f3rum. wiki: URL da wiki. irc: canal IRC para suporte, como irc://servidor/canal . source: URL para pesquisar ou baixar o c\u00f3digo-fonte. docs: URL da documenta\u00e7\u00e3o. rss: URL para o feed RSS. chat: URL para o canal de chat. Um exemplo: { \"support\": { \"email\": \"suporte@exemplo.org.br\", \"irc\": \"irc://irc.freenode.org/composer\" } } Opcional. Links de Pacotes \u00b6 Todos os itens a seguir recebem um objeto que mapeia nomes de pacotes para vers\u00f5es do pacote atrav\u00e9s de restri\u00e7\u00f5es de vers\u00e3o. Leia mais sobre vers\u00f5es aqui . Exemplo: { \"require\": { \"monolog/monolog\": \"1.0.*\" } } Todos os links s\u00e3o campos opcionais. require e require-dev tamb\u00e9m oferecem suporte a flags de estabilidade ( root-only ). Elas permitem restringir ou expandir ainda mais a estabilidade de um pacote al\u00e9m do escopo da configura\u00e7\u00e3o minimum-stability . Voc\u00ea pode aplic\u00e1-las a uma restri\u00e7\u00e3o ou aplic\u00e1-las a uma restri\u00e7\u00e3o vazia, se desejar permitir pacotes inst\u00e1veis de uma depend\u00eancia, por exemplo. Exemplo: { \"require\": { \"monolog/monolog\": \"1.0.*@beta\", \"acme/foo\": \"@dev\" } } Se uma de suas depend\u00eancias depender de um pacote inst\u00e1vel, voc\u00ea tamb\u00e9m precisar\u00e1 requisit\u00e1-lo explicitamente, juntamente com a flag de estabilidade necess\u00e1ria. Exemplo: Assumindo que doctrine/doctrine-fixtures-bundle requer \"doctrine/data-fixtures\": \"dev-master\" , ent\u00e3o dentro do composer.json raiz, voc\u00ea precisar\u00e1 adicionar a segunda linha abaixo para permitir vers\u00f5es de desenvolvimento do pacote doctrine/data-fixtures : { \"require\": { \"doctrine/doctrine-fixtures-bundle\": \"dev-master\", \"doctrine/data-fixtures\": \"@dev\" } } Al\u00e9m disso, require e require-dev suportam refer\u00eancias expl\u00edcitas (ou seja, commits) para vers\u00f5es de desenvolvimento para garantir que elas estejam travadas em um determinado estado, mesmo quando voc\u00ea executa a atualiza\u00e7\u00e3o. Elas funcionam apenas se voc\u00ea requisitar explicitamente uma vers\u00e3o de desenvolvimento e adicionar a refer\u00eancia com #<ref> . Este tamb\u00e9m \u00e9 um recurso root-only e ser\u00e1 ignorado nas depend\u00eancias. Exemplo: { \"require\": { \"monolog/monolog\": \"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\", \"acme/foo\": \"1.0.x-dev#abc123\" } } Nota: Esse recurso tem graves limita\u00e7\u00f5es t\u00e9cnicas, pois os metadados do composer.json ainda ser\u00e3o lidos a partir do nome do branch que voc\u00ea especificar antes do hash. Portanto, voc\u00ea deve usar isso apenas como uma solu\u00e7\u00e3o tempor\u00e1ria durante o desenvolvimento para corrigir problemas transit\u00f3rios, at\u00e9 poder alternar para vers\u00f5es de tag. O time do Composer n\u00e3o suporta ativamente esse recurso e n\u00e3o aceita relat\u00f3rios de erros relacionados a ele. Tamb\u00e9m \u00e9 poss\u00edvel criar um alias em linha de uma restri\u00e7\u00e3o de pacote, para que ela corresponda a uma restri\u00e7\u00e3o que de outra forma n\u00e3o corresponderia. Para obter mais informa\u00e7\u00f5es, consulte o artigo sobre aliases . require e require-dev tamb\u00e9m suportam refer\u00eancias a vers\u00f5es espec\u00edficas do PHP e de extens\u00f5es PHP que seu projeto precisa para executar com sucesso. Exemplo: { \"require\" : { \"php\" : \"^5.5 || ^7.0\", \"ext-mbstring\": \"*\" } } Nota: \u00c9 importante listar as extens\u00f5es PHP que seu projeto requer. Nem todas as instala\u00e7\u00f5es PHP s\u00e3o criadas da mesma forma: algumas podem n\u00e3o possuir extens\u00f5es que voc\u00ea pode considerar como padr\u00e3o (como ext-mysqli , que n\u00e3o \u00e9 instalada por padr\u00e3o nas instala\u00e7\u00f5es m\u00ednimas dos sistemas Fedora/CentOS). N\u00e3o listar as extens\u00f5es PHP necess\u00e1rias pode levar a uma experi\u00eancia ruim do usu\u00e1rio: o Composer instalar\u00e1 seu pacote sem erros, mas ele falhar\u00e1 em tempo de execu\u00e7\u00e3o. O comando composer show --platform lista todas as extens\u00f5es PHP dispon\u00edveis no seu sistema. Voc\u00ea pode us\u00e1-lo para te ajudar a compilar a lista de extens\u00f5es que voc\u00ea usa e precisa. Como alternativa, voc\u00ea pode usar ferramentas de terceiros para analisar seu projeto para obter a lista de extens\u00f5es usadas. require \u00b6 Lista os pacotes exigidos por este pacote. O pacote n\u00e3o ser\u00e1 instalado, a menos que estes requisitos possam ser atendidos. require-dev ( root-only ) \u00b6 Lista os pacotes necess\u00e1rios para desenvolver este pacote, executar testes, etc. Os requisitos de desenvolvimento do pacote raiz s\u00e3o instalados por padr\u00e3o. Tanto install quanto update suportam a op\u00e7\u00e3o --no-dev , que impede a instala\u00e7\u00e3o das depend\u00eancias de desenvolvimento. conflict \u00b6 Lista os pacotes que entram em conflito com esta vers\u00e3o deste pacote. Eles n\u00e3o poder\u00e3o ser instalados junto com o seu pacote. Observe que, ao especificar intervalos como <1.0 >=1.1 em um link de conflict , isso indicar\u00e1 um conflito com todas as vers\u00f5es inferiores a 1.0 e iguais ou mais recentes que 1.1 ao mesmo tempo, o que provavelmente n\u00e3o \u00e9 o que voc\u00ea deseja. Voc\u00ea provavelmente quer escolher <1.0 || >=1.1 , neste caso. replace \u00b6 Lista os pacotes que s\u00e3o substitu\u00eddos por este pacote. Isso permite que voc\u00ea fa\u00e7a o fork de um pacote, publique-o com um nome diferente com seus pr\u00f3prios n\u00fameros de vers\u00e3o, enquanto os pacotes que exigem o pacote original continuam a funcionar com o seu fork, pois ele substitui o pacote original. Isso tamb\u00e9m \u00e9 \u00fatil para pacotes que cont\u00eam subpacotes, por exemplo, o pacote principal symfony/symfony cont\u00e9m todos os Componentes do Symfony que tamb\u00e9m est\u00e3o dispon\u00edveis como pacotes individuais. Se voc\u00ea exigir o pacote principal, ele atender\u00e1 automaticamente a qualquer requisito de um dos componentes individuais, uma vez que os substitui. Recomenda-se cuidado ao usar replace para a finalidade de subpacote explicada acima. Em geral, voc\u00ea deve substituir apenas usando self.version como uma restri\u00e7\u00e3o de vers\u00e3o, para garantir que o pacote principal substitua apenas os subpacotes desta vers\u00e3o exata e de nenhuma outra vers\u00e3o, o que seria incorreto. provide \u00b6 Lista de outros pacotes que s\u00e3o fornecidos por este pacote. Isso \u00e9 \u00fatil principalmente para interfaces comuns. Um pacote pode depender de algum pacote virtual logger e qualquer biblioteca que implemente esta interface logger simplesmente ir\u00e1 list\u00e1-la em provide . suggest \u00b6 Pacotes sugeridos que podem melhorar ou funcionar bem com este pacote. Eles s\u00e3o informativos e s\u00e3o exibidos ap\u00f3s a instala\u00e7\u00e3o do pacote, para dar \u00e0s pessoas uma dica de que elas poderiam adicionar mais pacotes, mesmo que n\u00e3o sejam estritamente necess\u00e1rios. O formato \u00e9 como os links de pacotes acima, exceto que os valores s\u00e3o texto livre e n\u00e3o restri\u00e7\u00f5es de vers\u00e3o. Exemplo: { \"suggest\": { \"monolog/monolog\": \"Permite o registro mais avan\u00e7ado de logging do fluxo da aplica\u00e7\u00e3o\", \"ext-xml\": \"Necess\u00e1ria para suportar o formato XML na classe Foo\" } } autoload \u00b6 Mapeamento de autoload para um autoloader PHP. O autoloading PSR-4 e PSR-0 , a gera\u00e7\u00e3o de classmap e a inclus\u00e3o de files s\u00e3o suportados. PSR-4 \u00e9 a maneira recomendada, pois oferece maior facilidade de uso (n\u00e3o \u00e9 necess\u00e1rio gerar o autoloader novamente ao adicionar classes). PSR-4 \u00b6 Usando a chave psr-4 , voc\u00ea define um mapeamento de namespaces para caminhos relativos \u00e0 raiz do pacote. Ao fazer o autoloading de uma classe como Foo\\\\Bar\\\\Baz , um prefixo de namespace Foo\\\\ apontando para um diret\u00f3rio src/ significa que o autoloader procurar\u00e1 por um arquivo chamado src/Bar/Baz.php e o incluir\u00e1, se ele existir. Observe que, ao contr\u00e1rio do antigo estilo PSR-0, o prefixo ( Foo\\\\ ) n\u00e3o est\u00e1 presente no caminho do arquivo. Os prefixos de namespace devem terminar em \\\\ para evitar conflitos entre prefixos semelhantes. Por exemplo, Foo corresponderia \u00e0s classes no namespace FooBar , por isso as barras invertidas \u00e0 direita resolvem o problema: Foo\\\\ e FooBar\\\\ s\u00e3o distintos. As refer\u00eancias PSR-4 s\u00e3o todas combinadas, durante a instala\u00e7\u00e3o/atualiza\u00e7\u00e3o, em um \u00fanico array associativo, que pode ser encontrado no arquivo vendor/composer/autoload_psr4.php gerado. Exemplo: { \"autoload\": { \"psr-4\": { \"Monolog\\\\\": \"src/\", \"Vendor\\\\Namespace\\\\\": \"\" } } } Se voc\u00ea precisar procurar um mesmo prefixo em v\u00e1rios diret\u00f3rios, poder\u00e1 especific\u00e1-los como um array como: { \"autoload\": { \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] } } } Se voc\u00ea deseja ter um diret\u00f3rio alternativo onde qualquer namespace ser\u00e1 procurado, use um prefixo vazio como: { \"autoload\": { \"psr-4\": { \"\": \"src/\" } } } PSR-0 \u00b6 Usando a chave psr-0 , voc\u00ea define um mapeamento de namespaces para caminhos relativos \u00e0 raiz do pacote. Observe que ele tamb\u00e9m suporta a conven\u00e7\u00e3o sem namespaces do estilo PEAR. Observe que as declara\u00e7\u00f5es de namespaces devem terminar em \\\\ para garantir que o autoloader responda precisamente. Por exemplo, Foo corresponderia a FooBar ent\u00e3o as barras invertidas \u00e0 direita resolvem o problema: Foo\\\\ e FooBar\\\\ s\u00e3o distintos. As refer\u00eancias PSR-0 s\u00e3o todas combinadas, durante a instala\u00e7\u00e3o/atualiza\u00e7\u00e3o, em um \u00fanico array associativo, que pode ser encontrado no arquivo vendor/composer/autoload_namespaces.php gerado. Exemplo: { \"autoload\": { \"psr-0\": { \"Monolog\\\\\": \"src/\", \"Vendor\\\\Namespace\\\\\": \"src/\", \"Vendor_Namespace_\": \"src/\" } } } Se voc\u00ea precisar procurar um mesmo prefixo em v\u00e1rios diret\u00f3rios, poder\u00e1 especific\u00e1-los como um array como: { \"autoload\": { \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] } } } O estilo PSR-0 n\u00e3o se limita apenas \u00e0s declara\u00e7\u00f5es de namespace, mas pode ser especificado at\u00e9 o n\u00edvel da classe. Isso pode ser \u00fatil para bibliotecas com apenas uma classe no namespace global. Se o arquivo-fonte PHP tamb\u00e9m estiver localizado na raiz do pacote, por exemplo, ele poder\u00e1 ser declarado assim: { \"autoload\": { \"psr-0\": { \"ClasseGlobalUnica\": \"\" } } } Se voc\u00ea deseja ter um diret\u00f3rio alternativo onde qualquer namespace ser\u00e1 procurado, use um prefixo vazio como: { \"autoload\": { \"psr-0\": { \"\": \"src/\" } } } Classmap \u00b6 As refer\u00eancias em classmap s\u00e3o todas combinadas, durante a instala\u00e7\u00e3o/atualiza\u00e7\u00e3o, em um \u00fanico array associativo, que pode ser encontrado no arquivo vendor/composer/autoload_classmap.php gerado. Esse mapa \u00e9 constru\u00eddo pesquisando por classes em todos os arquivos .php e .inc nos diret\u00f3rios/arquivos fornecidos. Voc\u00ea pode usar o suporte \u00e0 gera\u00e7\u00e3o de mapa de classes para definir o autoloading para todas as bibliotecas que n\u00e3o seguem as PSR-0/4. Para configurar isso, voc\u00ea especifica todos os diret\u00f3rios ou arquivos onde procurar por classes. Exemplo: { \"autoload\": { \"classmap\": [\"src/\", \"lib/\", \"AlgumaCoisa.php\"] } } Files \u00b6 Se voc\u00ea deseja exigir determinados arquivos explicitamente em todas as requisi\u00e7\u00f5es, pode usar o mecanismo de autoloading files . Ele \u00e9 \u00fatil se seu pacote incluir fun\u00e7\u00f5es PHP que n\u00e3o podem ser carregadas automaticamente pelo PHP. Exemplo: { \"autoload\": { \"files\": [\"src/MinhaBiblioteca/funcoes.php\"] } } Excluir Arquivos do Mapa de Classes \u00b6 Se voc\u00ea deseja excluir alguns arquivos ou pastas do mapa de classes, use a propriedade exclude-from-classmap . Isso pode ser \u00fatil para excluir as classes de teste em seu ambiente ativo, por exemplo, pois elas ser\u00e3o omitidas do mapa de classes, at\u00e9 mesmo ao criar um autoloader otimizado. O gerador de mapa de classes ignorar\u00e1 todos os arquivos nos caminhos configurados aqui. Os caminhos s\u00e3o absolutos no diret\u00f3rio raiz do pacote (ou seja, o local do composer.json ) e suportam * para corresponder a qualquer coisa, exceto uma barra, e ** para corresponder a qualquer coisa. ** \u00e9 inclu\u00eddo implicitamente ao final dos caminhos. Exemplo: { \"autoload\": { \"exclude-from-classmap\": [\"/Tests/\", \"/test/\", \"/tests/\"] } } Otimizando o Autoloader \u00b6 O autoloader pode ter um impacto bastante substancial no tempo da requisi\u00e7\u00e3o (50-100ms por requisi\u00e7\u00e3o em frameworks grandes usando muitas classes). Consulte o artigo sobre otimiza\u00e7\u00e3o do autoloader para obter mais detalhes sobre como reduzir esse impacto. autoload-dev ( root-only ) \u00b6 Esta se\u00e7\u00e3o permite definir regras de autoload para fins de desenvolvimento. As classes necess\u00e1rias para executar a su\u00edte de testes n\u00e3o devem ser inclu\u00eddas nas regras principais de autoload para evitar poluir o autoloader em produ\u00e7\u00e3o e quando outras pessoas usarem seu pacote como uma depend\u00eancia. Portanto, \u00e9 uma boa ideia contar com um caminho dedicado para seus testes unit\u00e1rios e adicion\u00e1-lo na se\u00e7\u00e3o autoload-dev . Exemplo: { \"autoload\": { \"psr-4\": { \"MinhaBiblioteca\\\\\": \"src/\" } }, \"autoload-dev\": { \"psr-4\": { \"MinhaBiblioteca\\\\Tests\\\\\": \"tests/\" } } } include-path \u00b6 OBSOLETA : Esta propriedade est\u00e1 presente apenas para oferecer suporte a projetos legados e todo c\u00f3digo novo deve preferencialmente usar o autoloading. Como tal, \u00e9 uma pr\u00e1tica desaprovada, mas o recurso em si provavelmente n\u00e3o desaparecer\u00e1 do Composer. Uma lista de caminhos que devem ser anexados ao include_path do PHP. Exemplo: { \"include-path\": [\"lib/\"] } Opcional. target-dir \u00b6 OBSOLETA : Esta propriedade est\u00e1 presente apenas para oferecer suporte ao autoloading no estilo PSR-0 legado e todo c\u00f3digo novo deve preferencialmente usar a PSR-4 sem target-dir e os projetos usando a PSR-0 com namespaces PHP s\u00e3o encorajados a migrar para a PSR-4. Define o destino da instala\u00e7\u00e3o. Caso a raiz do pacote esteja abaixo da declara\u00e7\u00e3o do namespace, voc\u00ea n\u00e3o poder\u00e1 fazer o autoload corretamente. target-dir resolve este problema. Um exemplo \u00e9 o Symfony. Existem pacotes individuais para os componentes. O componente Yaml est\u00e1 em Symfony\\Component\\Yaml . A raiz do pacote \u00e9 esse diret\u00f3rio Yaml . Para tornar o autoloading poss\u00edvel, precisamos garantir que ele n\u00e3o esteja instalado em vendor/symfony/yaml , mas sim em vendor/symfony/yaml/Symfony/Component/Yaml , para que o autoloader possa carreg\u00e1-lo a partir de vendor/symfony/yaml . Para fazer isso, autoload e target-dir s\u00e3o definidas da seguinte maneira: { \"autoload\": { \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" } }, \"target-dir\": \"Symfony/Component/Yaml\" } Opcional. minimum-stability ( root-only ) \u00b6 Isso define o comportamento padr\u00e3o para filtrar pacotes pela estabilidade. O padr\u00e3o \u00e9 stable , portanto, se voc\u00ea depender de um pacote dev , especifique-o em seu arquivo para evitar surpresas. Todas as vers\u00f5es de cada pacote s\u00e3o verificadas quanto \u00e0 estabilidade, e as que s\u00e3o menos est\u00e1veis que a configura\u00e7\u00e3o minimum-stability ser\u00e3o ignoradas ao resolver as depend\u00eancias do projeto. (Observe que voc\u00ea tamb\u00e9m pode especificar requisitos de estabilidade por pacote, usando flags de estabilidade nas restri\u00e7\u00f5es de vers\u00e3o especificadas em um bloco require (consulte os links de pacotes para obter mais detalhes). As op\u00e7\u00f5es dispon\u00edveis (em ordem de estabilidade) s\u00e3o dev , alpha , beta , RC e stable . prefer-stable ( root-only ) \u00b6 Quando isso est\u00e1 habilitado, o Composer prefere pacotes mais est\u00e1veis do que os inst\u00e1veis quando \u00e9 poss\u00edvel encontrar pacotes est\u00e1veis compat\u00edveis. Se voc\u00ea precisar de uma vers\u00e3o de desenvolvimento ou apenas vers\u00f5es alpha estiverem dispon\u00edveis para um pacote, elas ainda ser\u00e3o selecionadas, desde que a minimum-stability permita. Use \"prefer-stable\": true para habilitar. repositories ( root-only ) \u00b6 Reposit\u00f3rios de pacotes personalizados a serem usados. Por padr\u00e3o, o Composer usa apenas o reposit\u00f3rio Packagist. Ao especificar reposit\u00f3rios, voc\u00ea pode obter pacotes de outros lugares. Os reposit\u00f3rios n\u00e3o s\u00e3o resolvidos recursivamente. Voc\u00ea pode adicion\u00e1-los apenas ao seu composer.json principal. As declara\u00e7\u00f5es de reposit\u00f3rios do composer.json das depend\u00eancias s\u00e3o ignoradas. Os seguintes tipos de reposit\u00f3rios s\u00e3o suportados: composer: Um reposit\u00f3rio do Composer \u00e9 simplesmente um arquivo packages.json servido via rede (HTTP, FTP, SSH), que cont\u00e9m uma lista de objetos composer.json com informa\u00e7\u00f5es adicionais sobre dist e/ou source . O arquivo packages.json \u00e9 carregado usando um stream PHP. Voc\u00ea pode definir op\u00e7\u00f5es extras para esse stream usando o par\u00e2metro options . vcs: O reposit\u00f3rio do sistema de controle de vers\u00e3o pode buscar pacotes nos reposit\u00f3rios do git, svn, fossil e hg. pear: Com isso, voc\u00ea pode importar qualquer reposit\u00f3rio PEAR para o seu projeto Composer. package: Se voc\u00ea depende de um projeto que n\u00e3o possui absolutamente nenhum suporte ao Composer, voc\u00ea pode definir o pacote em linha usando um reposit\u00f3rio package . Voc\u00ea basicamente adiciona o objeto composer.json em linha. Para obter mais informa\u00e7\u00f5es sobre qualquer um deles, consulte Reposit\u00f3rios . Exemplo: { \"repositories\": [ { \"type\": \"composer\", \"url\": \"http://packages.exemplo.com.br\" }, { \"type\": \"composer\", \"url\": \"https://packages.exemplo.com.br\", \"options\": { \"ssl\": { \"verify_peer\": \"true\" } } }, { \"type\": \"vcs\", \"url\": \"https://github.com/Seldaek/monolog\" }, { \"type\": \"pear\", \"url\": \"https://pear2.php.net\" }, { \"type\": \"package\", \"package\": { \"name\": \"smarty/smarty\", \"version\": \"3.1.7\", \"dist\": { \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\", \"type\": \"zip\" }, \"source\": { \"url\": \"https://smarty-php.googlecode.com/svn/\", \"type\": \"svn\", \"reference\": \"tags/Smarty_3_1_7/distribution/\" } } } ] } Nota: Aqui a ordem \u00e9 importante. Ao procurar um pacote, o Composer procurar\u00e1 do primeiro reposit\u00f3rio ao \u00faltimo e escolher\u00e1 a primeira correspond\u00eancia. Por padr\u00e3o, o Packagist \u00e9 adicionado por \u00faltimo, o que significa que os reposit\u00f3rios personalizados podem sobrescrever os pacotes dele. O uso da nota\u00e7\u00e3o de objeto JSON tamb\u00e9m \u00e9 poss\u00edvel. No entanto, os pares de chave/valor JSON devem ser considerados ignorando a ordem, ent\u00e3o um comportamento consistente n\u00e3o pode ser garantido. json { \"repositories\": { \"foo\": { \"type\": \"composer\", \"url\": \"http://packages.foo.com\" } } } config ( root-only ) \u00b6 Um conjunto de op\u00e7\u00f5es de configura\u00e7\u00e3o. \u00c9 usada apenas para projetos. Consulte Config para obter uma descri\u00e7\u00e3o de cada op\u00e7\u00e3o individual. scripts ( root-only ) \u00b6 O Composer permite conectar-se a v\u00e1rias partes do processo de instala\u00e7\u00e3o atrav\u00e9s do uso de scripts. Consulte Scripts para obter detalhes e exemplos de eventos. extra \u00b6 Dados extras arbitr\u00e1rios para consumo por scripts . Isso pode ser praticamente qualquer coisa. Para acess\u00e1-los de dentro de um manipulador de eventos de script, voc\u00ea pode fazer: $extra = $event->getComposer()->getPackage()->getExtra(); Opcional. bin \u00b6 Um conjunto de arquivos que devem ser tratados como bin\u00e1rios e ter links simb\u00f3licos no bin-dir (da configura\u00e7\u00e3o). Consulte os Bin\u00e1rios dos Vendors para obter mais detalhes. Opcional. archive \u00b6 Um conjunto de op\u00e7\u00f5es para criar arquivos de pacotes compactados. As seguintes op\u00e7\u00f5es s\u00e3o suportadas: exclude: Permite configurar uma lista de padr\u00f5es para caminhos exclu\u00eddos. A sintaxe do padr\u00e3o corresponde aos arquivos .gitignore . Um ponto de exclama\u00e7\u00e3o ( ! ) inicial resultar\u00e1 na inclus\u00e3o de todos os arquivos correspondentes, mesmo que um padr\u00e3o anterior os tenha exclu\u00eddo. Uma barra inicial corresponder\u00e1 apenas no in\u00edcio do caminho relativo do projeto. Um asterisco n\u00e3o ser\u00e1 expandido para um separador de diret\u00f3rio. Exemplo: { \"archive\": { \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", \"!/foo/bar/baz\"] } } O exemplo incluir\u00e1 /dir/foo/bar/arquivo , /foo/bar/baz , /arquivo.php , /foo/meu.test , mas excluir\u00e1 /foo/bar/qualquer , /foo/baz e /meu.test . Opcional. abandoned \u00b6 Indica se este pacote foi abandonado. Pode ser booleano ou um nome/URL de pacote apontando para uma alternativa recomendada. Exemplos: Use \"abandoned\": true para indicar que este pacote foi abandonado. Use \"abandoned\": \"monolog/monolog\" para indicar que este pacote foi abandonado e a alternativa recomendada \u00e9 monolog/monolog . O padr\u00e3o \u00e9 false . Opcional. non-feature-branches \u00b6 Uma lista de padr\u00f5es de express\u00f5es regulares de nomes de branches n\u00e3o num\u00e9ricos (por exemplo, \"latest\" ou algo parecido), que N\u00c3O ser\u00e3o tratados como feature branches. \u00c9 um array de strings. Se voc\u00ea tiver nomes de branches n\u00e3o num\u00e9ricos, por exemplo, como \"latest\", \"current\", \"latest-stable\" ou algo parecido, que n\u00e3o se pare\u00e7am com um n\u00famero de vers\u00e3o, o Composer tratar\u00e1 esses branches como feature branches. Isso significa que ele procurar\u00e1 por branches pai, que se parecem com uma vers\u00e3o ou terminam em branches especiais (como master ) e o n\u00famero da vers\u00e3o do pacote raiz se tornar\u00e1 a vers\u00e3o do branch pai ou, pelo menos, master ou algo parecido. Para tratar branches com nomes n\u00e3o num\u00e9ricos como vers\u00f5es em vez de procurar por um branch pai com uma vers\u00e3o v\u00e1lida ou nome de branch especial como master , voc\u00ea pode definir padr\u00f5es para nomes de branches, que devem ser tratados como branches de vers\u00f5es de desenvolvimento. Isso \u00e9 realmente \u00fatil quando voc\u00ea tem depend\u00eancias usando self.version , para que n\u00e3o o dev-master , mas o mesmo branch seja instalado (no exemplo: latest-testing ). Um exemplo: Se voc\u00ea possui um branch testing , que \u00e9 fortemente mantido durante uma fase de testes e \u00e9 implantado em seu ambiente staging, normalmente composer show -s retornar\u00e1 versions : * dev-master . Se voc\u00ea configurar \"latest-.*\" como um padr\u00e3o para non-feature-branches desta forma: { \"non-feature-branches\": [\"latest-.*\"] } Ent\u00e3o composer show -s retornar\u00e1 versions : * dev-latest-testing . Opcional.","title":"O Esquema do composer.json"},{"location":"esquema.html#o-esquema-do-composerjson","text":"Este cap\u00edtulo explicar\u00e1 todos os campos dispon\u00edveis no composer.json .","title":"O Esquema do composer.json"},{"location":"esquema.html#esquema-json","text":"Temos um esquema JSON que documenta o formato e tamb\u00e9m pode ser usado para validar seu composer.json . De fato, ele \u00e9 usado pelo comando validate . Voc\u00ea pode encontr\u00e1-lo no site do Composer .","title":"Esquema JSON"},{"location":"esquema.html#pacote-raiz","text":"O pacote raiz \u00e9 o pacote definido pelo composer.json na raiz do seu projeto. \u00c9 o composer.json principal que define os requisitos do seu projeto. Certos campos se aplicam apenas no contexto do pacote raiz. Um exemplo disto \u00e9 o campo config . Somente o pacote raiz pode definir a configura\u00e7\u00e3o. O campo config das depend\u00eancias \u00e9 ignorado. Isto faz do campo config um campo root-only . Nota: Um pacote pode ser o pacote raiz ou n\u00e3o, dependendo do contexto. Por exemplo, se seu projeto depende da biblioteca monolog , seu projeto \u00e9 o pacote raiz. No entanto, se voc\u00ea clonar o monolog no GitHub para corrigir um erro, ent\u00e3o o monolog \u00e9 o pacote raiz.","title":"Pacote Raiz"},{"location":"esquema.html#propriedades","text":"","title":"Propriedades"},{"location":"esquema.html#name","text":"O nome do pacote. Consiste no nome do vendor e no nome do projeto, separados por / . Exemplos: monolog/monolog igorw/event-source O nome pode conter qualquer caractere, incluindo espa\u00e7os em branco, e n\u00e3o diferencia mai\u00fasculas de min\u00fasculas ( foo/bar e Foo/Bar s\u00e3o considerados o mesmo pacote). Para simplificar sua instala\u00e7\u00e3o, \u00e9 recomend\u00e1vel definir um nome curto e em min\u00fasculas que n\u00e3o inclua caracteres n\u00e3o alfanum\u00e9ricos ou espa\u00e7os em branco. Obrigat\u00f3rio para pacotes publicados (bibliotecas).","title":"name"},{"location":"esquema.html#description","text":"Uma breve descri\u00e7\u00e3o do pacote. Normalmente, tem apenas uma linha de comprimento. Obrigat\u00f3rio para pacotes publicados (bibliotecas).","title":"description"},{"location":"esquema.html#version","text":"A vers\u00e3o do pacote. Na maioria dos casos, n\u00e3o \u00e9 necess\u00e1ria e deve ser omitida (veja abaixo). Ela deve seguir o formato X.Y.Z ou vX.Y.Z com um sufixo opcional -dev , -patch ( -p ), -alpha ( -a ), -beta ( -b ) ou -RC . Os sufixos patch, alpha, beta e RC podem ser seguidos por um n\u00famero. Exemplos: 1.0.0 1.0.2 1.1.0 0.2.5 1.0.0-dev 1.0.0-alpha3 1.0.0-beta2 1.0.0-RC5 v2.0.4-p1 Opcional se o reposit\u00f3rio do pacote puder inferir a vers\u00e3o de algum lugar, como o nome da tag no reposit\u00f3rio VCS. Neste caso, tamb\u00e9m \u00e9 recomend\u00e1vel omiti-la. Nota: O Packagist usa reposit\u00f3rios VCS, portanto, a declara\u00e7\u00e3o acima tamb\u00e9m \u00e9 verdadeira para o Packagist. Especificar a vers\u00e3o por conta pr\u00f3pria provavelmente criar\u00e1 problemas em algum momento devido a erro humano.","title":"version"},{"location":"esquema.html#type","text":"O tipo do pacote. O padr\u00e3o \u00e9 library . Os tipos de pacote s\u00e3o usados para l\u00f3gica de instala\u00e7\u00e3o personalizada. Se voc\u00ea tiver um pacote que precise de alguma l\u00f3gica especial, voc\u00ea pode definir um tipo personalizado. Pode ser, por exemplo, symfony-bundle , wordpress-plugin ou typo3-cms-extension . Estes tipos ser\u00e3o espec\u00edficos para determinados projetos e precisar\u00e3o fornecer um instalador capaz de instalar pacotes deste tipo. Pronto para uso, o Composer suporta quatro tipos: library: Este \u00e9 o padr\u00e3o. Ele simplesmente copiar\u00e1 os arquivos para vendor . project: Denota um projeto em vez de uma biblioteca. Por exemplo, shells de aplica\u00e7\u00f5es como a Edi\u00e7\u00e3o Padr\u00e3o do Symfony , CMSs como o instalador do SilverStripe ou aplica\u00e7\u00f5es completas distribu\u00eddas como pacotes. Isto pode ser usado, por exemplo, pelas IDEs para fornecer listagens de projetos a serem inicializados ao criar um novo workspace. metapackage: Um pacote vazio que cont\u00e9m requisitos e acionar\u00e1 suas instala\u00e7\u00f5es, mas n\u00e3o cont\u00e9m nenhum arquivo e n\u00e3o gravar\u00e1 nada no sistema de arquivos. Sendo assim, n\u00e3o requer uma chave dist ou source para ser instal\u00e1vel. composer-plugin: Um pacote do tipo composer-plugin pode fornecer um instalador para outros pacotes que possuem um tipo personalizado. Leia mais no artigo dedicado . Use um tipo personalizado somente se precisar de l\u00f3gica personalizada durante a instala\u00e7\u00e3o. \u00c9 recomend\u00e1vel omitir este campo e usar o padr\u00e3o library .","title":"type"},{"location":"esquema.html#keywords","text":"Um array de palavras-chave \u00e0s quais o pacote est\u00e1 relacionado. Elas podem ser usadas para pesquisa e filtragem. Exemplos: logging events database redis templating Opcional.","title":"keywords"},{"location":"esquema.html#homepage","text":"Uma URL para o site do projeto. Opcional.","title":"homepage"},{"location":"esquema.html#readme","text":"Um caminho relativo para o documento README . Opcional.","title":"readme"},{"location":"esquema.html#time","text":"Data de lan\u00e7amento da vers\u00e3o. Deve estar no formato YYYY-MM-DD ou YYYY-MM-DD HH:MM:SS . Opcional.","title":"time"},{"location":"esquema.html#license","text":"A licen\u00e7a do pacote. Pode ser uma string ou um array de strings. A nota\u00e7\u00e3o recomendada para as licen\u00e7as mais comuns \u00e9 (em ordem alfab\u00e9tica): Apache-2.0 BSD-2-Clause BSD-3-Clause BSD-4-Clause GPL-2.0-only / GPL-2.0-or-later GPL-3.0-only / GPL-3.0-or-later LGPL-2.1-only / LGPL-2.1-or-later LGPL-3.0-only / LGPL-3.0-or-later MIT Opcional, mas \u00e9 altamente recomend\u00e1vel fornec\u00ea-la. Mais identificadores est\u00e3o listados no Registro de Licen\u00e7as de C\u00f3digo Aberto SPDX . Para software de c\u00f3digo fechado, voc\u00ea pode usar proprietary como identificador da licen\u00e7a. Um exemplo: { \"license\": \"MIT\" } Para um pacote, quando h\u00e1 uma escolha entre as licen\u00e7as (\"licen\u00e7as disjuntivas\"), v\u00e1rias podem ser especificadas como array. Um exemplo usando licen\u00e7as disjuntivas: { \"license\": [ \"LGPL-2.1-only\", \"GPL-3.0-or-later\" ] } Alternativamente, elas podem ser separadas por or e colocadas entre par\u00eanteses; { \"license\": \"(LGPL-2.1-only or GPL-3.0-or-later)\" } Da mesma forma, quando v\u00e1rias licen\u00e7as precisam ser aplicadas (\"licen\u00e7as conjuntivas\"), elas devem ser separadas por and e colocadas entre par\u00eanteses;","title":"license"},{"location":"esquema.html#authors","text":"As pessoas que criaram o pacote, listadas em um array de objetos. Cada objeto de pessoa pode ter as seguintes propriedades: name: O nome da pessoa. Geralmente o nome verdadeiro. email: O endere\u00e7o de e-mail da pessoa. homepage: Uma URL para o site da pessoa. role: A fun\u00e7\u00e3o da pessoa no projeto (por exemplo, desenvolvedora ou tradutora). Um exemplo: { \"authors\": [ { \"name\": \"Nils Adermann\", \"email\": \"naderman@naderman.de\", \"homepage\": \"http://www.naderman.de\", \"role\": \"Developer\" }, { \"name\": \"Jordi Boggiano\", \"email\": \"j.boggiano@seld.be\", \"homepage\": \"https://seld.be\", \"role\": \"Developer\" } ] } Opcional, mas altamente recomendada.","title":"authors"},{"location":"esquema.html#support","text":"V\u00e1rias informa\u00e7\u00f5es para obter suporte para o projeto. As informa\u00e7\u00f5es de suporte incluem as seguintes: email: Endere\u00e7o de e-mail para suporte. issues: URL do sistema para acompanhamento de issues. forum: URL do f\u00f3rum. wiki: URL da wiki. irc: canal IRC para suporte, como irc://servidor/canal . source: URL para pesquisar ou baixar o c\u00f3digo-fonte. docs: URL da documenta\u00e7\u00e3o. rss: URL para o feed RSS. chat: URL para o canal de chat. Um exemplo: { \"support\": { \"email\": \"suporte@exemplo.org.br\", \"irc\": \"irc://irc.freenode.org/composer\" } } Opcional.","title":"support"},{"location":"esquema.html#links-de-pacotes","text":"Todos os itens a seguir recebem um objeto que mapeia nomes de pacotes para vers\u00f5es do pacote atrav\u00e9s de restri\u00e7\u00f5es de vers\u00e3o. Leia mais sobre vers\u00f5es aqui . Exemplo: { \"require\": { \"monolog/monolog\": \"1.0.*\" } } Todos os links s\u00e3o campos opcionais. require e require-dev tamb\u00e9m oferecem suporte a flags de estabilidade ( root-only ). Elas permitem restringir ou expandir ainda mais a estabilidade de um pacote al\u00e9m do escopo da configura\u00e7\u00e3o minimum-stability . Voc\u00ea pode aplic\u00e1-las a uma restri\u00e7\u00e3o ou aplic\u00e1-las a uma restri\u00e7\u00e3o vazia, se desejar permitir pacotes inst\u00e1veis de uma depend\u00eancia, por exemplo. Exemplo: { \"require\": { \"monolog/monolog\": \"1.0.*@beta\", \"acme/foo\": \"@dev\" } } Se uma de suas depend\u00eancias depender de um pacote inst\u00e1vel, voc\u00ea tamb\u00e9m precisar\u00e1 requisit\u00e1-lo explicitamente, juntamente com a flag de estabilidade necess\u00e1ria. Exemplo: Assumindo que doctrine/doctrine-fixtures-bundle requer \"doctrine/data-fixtures\": \"dev-master\" , ent\u00e3o dentro do composer.json raiz, voc\u00ea precisar\u00e1 adicionar a segunda linha abaixo para permitir vers\u00f5es de desenvolvimento do pacote doctrine/data-fixtures : { \"require\": { \"doctrine/doctrine-fixtures-bundle\": \"dev-master\", \"doctrine/data-fixtures\": \"@dev\" } } Al\u00e9m disso, require e require-dev suportam refer\u00eancias expl\u00edcitas (ou seja, commits) para vers\u00f5es de desenvolvimento para garantir que elas estejam travadas em um determinado estado, mesmo quando voc\u00ea executa a atualiza\u00e7\u00e3o. Elas funcionam apenas se voc\u00ea requisitar explicitamente uma vers\u00e3o de desenvolvimento e adicionar a refer\u00eancia com #<ref> . Este tamb\u00e9m \u00e9 um recurso root-only e ser\u00e1 ignorado nas depend\u00eancias. Exemplo: { \"require\": { \"monolog/monolog\": \"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\", \"acme/foo\": \"1.0.x-dev#abc123\" } } Nota: Esse recurso tem graves limita\u00e7\u00f5es t\u00e9cnicas, pois os metadados do composer.json ainda ser\u00e3o lidos a partir do nome do branch que voc\u00ea especificar antes do hash. Portanto, voc\u00ea deve usar isso apenas como uma solu\u00e7\u00e3o tempor\u00e1ria durante o desenvolvimento para corrigir problemas transit\u00f3rios, at\u00e9 poder alternar para vers\u00f5es de tag. O time do Composer n\u00e3o suporta ativamente esse recurso e n\u00e3o aceita relat\u00f3rios de erros relacionados a ele. Tamb\u00e9m \u00e9 poss\u00edvel criar um alias em linha de uma restri\u00e7\u00e3o de pacote, para que ela corresponda a uma restri\u00e7\u00e3o que de outra forma n\u00e3o corresponderia. Para obter mais informa\u00e7\u00f5es, consulte o artigo sobre aliases . require e require-dev tamb\u00e9m suportam refer\u00eancias a vers\u00f5es espec\u00edficas do PHP e de extens\u00f5es PHP que seu projeto precisa para executar com sucesso. Exemplo: { \"require\" : { \"php\" : \"^5.5 || ^7.0\", \"ext-mbstring\": \"*\" } } Nota: \u00c9 importante listar as extens\u00f5es PHP que seu projeto requer. Nem todas as instala\u00e7\u00f5es PHP s\u00e3o criadas da mesma forma: algumas podem n\u00e3o possuir extens\u00f5es que voc\u00ea pode considerar como padr\u00e3o (como ext-mysqli , que n\u00e3o \u00e9 instalada por padr\u00e3o nas instala\u00e7\u00f5es m\u00ednimas dos sistemas Fedora/CentOS). N\u00e3o listar as extens\u00f5es PHP necess\u00e1rias pode levar a uma experi\u00eancia ruim do usu\u00e1rio: o Composer instalar\u00e1 seu pacote sem erros, mas ele falhar\u00e1 em tempo de execu\u00e7\u00e3o. O comando composer show --platform lista todas as extens\u00f5es PHP dispon\u00edveis no seu sistema. Voc\u00ea pode us\u00e1-lo para te ajudar a compilar a lista de extens\u00f5es que voc\u00ea usa e precisa. Como alternativa, voc\u00ea pode usar ferramentas de terceiros para analisar seu projeto para obter a lista de extens\u00f5es usadas.","title":"Links de Pacotes"},{"location":"esquema.html#require","text":"Lista os pacotes exigidos por este pacote. O pacote n\u00e3o ser\u00e1 instalado, a menos que estes requisitos possam ser atendidos.","title":"require"},{"location":"esquema.html#require-dev","text":"Lista os pacotes necess\u00e1rios para desenvolver este pacote, executar testes, etc. Os requisitos de desenvolvimento do pacote raiz s\u00e3o instalados por padr\u00e3o. Tanto install quanto update suportam a op\u00e7\u00e3o --no-dev , que impede a instala\u00e7\u00e3o das depend\u00eancias de desenvolvimento.","title":"require-dev (root-only)"},{"location":"esquema.html#conflict","text":"Lista os pacotes que entram em conflito com esta vers\u00e3o deste pacote. Eles n\u00e3o poder\u00e3o ser instalados junto com o seu pacote. Observe que, ao especificar intervalos como <1.0 >=1.1 em um link de conflict , isso indicar\u00e1 um conflito com todas as vers\u00f5es inferiores a 1.0 e iguais ou mais recentes que 1.1 ao mesmo tempo, o que provavelmente n\u00e3o \u00e9 o que voc\u00ea deseja. Voc\u00ea provavelmente quer escolher <1.0 || >=1.1 , neste caso.","title":"conflict"},{"location":"esquema.html#replace","text":"Lista os pacotes que s\u00e3o substitu\u00eddos por este pacote. Isso permite que voc\u00ea fa\u00e7a o fork de um pacote, publique-o com um nome diferente com seus pr\u00f3prios n\u00fameros de vers\u00e3o, enquanto os pacotes que exigem o pacote original continuam a funcionar com o seu fork, pois ele substitui o pacote original. Isso tamb\u00e9m \u00e9 \u00fatil para pacotes que cont\u00eam subpacotes, por exemplo, o pacote principal symfony/symfony cont\u00e9m todos os Componentes do Symfony que tamb\u00e9m est\u00e3o dispon\u00edveis como pacotes individuais. Se voc\u00ea exigir o pacote principal, ele atender\u00e1 automaticamente a qualquer requisito de um dos componentes individuais, uma vez que os substitui. Recomenda-se cuidado ao usar replace para a finalidade de subpacote explicada acima. Em geral, voc\u00ea deve substituir apenas usando self.version como uma restri\u00e7\u00e3o de vers\u00e3o, para garantir que o pacote principal substitua apenas os subpacotes desta vers\u00e3o exata e de nenhuma outra vers\u00e3o, o que seria incorreto.","title":"replace"},{"location":"esquema.html#provide","text":"Lista de outros pacotes que s\u00e3o fornecidos por este pacote. Isso \u00e9 \u00fatil principalmente para interfaces comuns. Um pacote pode depender de algum pacote virtual logger e qualquer biblioteca que implemente esta interface logger simplesmente ir\u00e1 list\u00e1-la em provide .","title":"provide"},{"location":"esquema.html#suggest","text":"Pacotes sugeridos que podem melhorar ou funcionar bem com este pacote. Eles s\u00e3o informativos e s\u00e3o exibidos ap\u00f3s a instala\u00e7\u00e3o do pacote, para dar \u00e0s pessoas uma dica de que elas poderiam adicionar mais pacotes, mesmo que n\u00e3o sejam estritamente necess\u00e1rios. O formato \u00e9 como os links de pacotes acima, exceto que os valores s\u00e3o texto livre e n\u00e3o restri\u00e7\u00f5es de vers\u00e3o. Exemplo: { \"suggest\": { \"monolog/monolog\": \"Permite o registro mais avan\u00e7ado de logging do fluxo da aplica\u00e7\u00e3o\", \"ext-xml\": \"Necess\u00e1ria para suportar o formato XML na classe Foo\" } }","title":"suggest"},{"location":"esquema.html#autoload","text":"Mapeamento de autoload para um autoloader PHP. O autoloading PSR-4 e PSR-0 , a gera\u00e7\u00e3o de classmap e a inclus\u00e3o de files s\u00e3o suportados. PSR-4 \u00e9 a maneira recomendada, pois oferece maior facilidade de uso (n\u00e3o \u00e9 necess\u00e1rio gerar o autoloader novamente ao adicionar classes).","title":"autoload"},{"location":"esquema.html#psr-4","text":"Usando a chave psr-4 , voc\u00ea define um mapeamento de namespaces para caminhos relativos \u00e0 raiz do pacote. Ao fazer o autoloading de uma classe como Foo\\\\Bar\\\\Baz , um prefixo de namespace Foo\\\\ apontando para um diret\u00f3rio src/ significa que o autoloader procurar\u00e1 por um arquivo chamado src/Bar/Baz.php e o incluir\u00e1, se ele existir. Observe que, ao contr\u00e1rio do antigo estilo PSR-0, o prefixo ( Foo\\\\ ) n\u00e3o est\u00e1 presente no caminho do arquivo. Os prefixos de namespace devem terminar em \\\\ para evitar conflitos entre prefixos semelhantes. Por exemplo, Foo corresponderia \u00e0s classes no namespace FooBar , por isso as barras invertidas \u00e0 direita resolvem o problema: Foo\\\\ e FooBar\\\\ s\u00e3o distintos. As refer\u00eancias PSR-4 s\u00e3o todas combinadas, durante a instala\u00e7\u00e3o/atualiza\u00e7\u00e3o, em um \u00fanico array associativo, que pode ser encontrado no arquivo vendor/composer/autoload_psr4.php gerado. Exemplo: { \"autoload\": { \"psr-4\": { \"Monolog\\\\\": \"src/\", \"Vendor\\\\Namespace\\\\\": \"\" } } } Se voc\u00ea precisar procurar um mesmo prefixo em v\u00e1rios diret\u00f3rios, poder\u00e1 especific\u00e1-los como um array como: { \"autoload\": { \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] } } } Se voc\u00ea deseja ter um diret\u00f3rio alternativo onde qualquer namespace ser\u00e1 procurado, use um prefixo vazio como: { \"autoload\": { \"psr-4\": { \"\": \"src/\" } } }","title":"PSR-4"},{"location":"esquema.html#psr-0","text":"Usando a chave psr-0 , voc\u00ea define um mapeamento de namespaces para caminhos relativos \u00e0 raiz do pacote. Observe que ele tamb\u00e9m suporta a conven\u00e7\u00e3o sem namespaces do estilo PEAR. Observe que as declara\u00e7\u00f5es de namespaces devem terminar em \\\\ para garantir que o autoloader responda precisamente. Por exemplo, Foo corresponderia a FooBar ent\u00e3o as barras invertidas \u00e0 direita resolvem o problema: Foo\\\\ e FooBar\\\\ s\u00e3o distintos. As refer\u00eancias PSR-0 s\u00e3o todas combinadas, durante a instala\u00e7\u00e3o/atualiza\u00e7\u00e3o, em um \u00fanico array associativo, que pode ser encontrado no arquivo vendor/composer/autoload_namespaces.php gerado. Exemplo: { \"autoload\": { \"psr-0\": { \"Monolog\\\\\": \"src/\", \"Vendor\\\\Namespace\\\\\": \"src/\", \"Vendor_Namespace_\": \"src/\" } } } Se voc\u00ea precisar procurar um mesmo prefixo em v\u00e1rios diret\u00f3rios, poder\u00e1 especific\u00e1-los como um array como: { \"autoload\": { \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] } } } O estilo PSR-0 n\u00e3o se limita apenas \u00e0s declara\u00e7\u00f5es de namespace, mas pode ser especificado at\u00e9 o n\u00edvel da classe. Isso pode ser \u00fatil para bibliotecas com apenas uma classe no namespace global. Se o arquivo-fonte PHP tamb\u00e9m estiver localizado na raiz do pacote, por exemplo, ele poder\u00e1 ser declarado assim: { \"autoload\": { \"psr-0\": { \"ClasseGlobalUnica\": \"\" } } } Se voc\u00ea deseja ter um diret\u00f3rio alternativo onde qualquer namespace ser\u00e1 procurado, use um prefixo vazio como: { \"autoload\": { \"psr-0\": { \"\": \"src/\" } } }","title":"PSR-0"},{"location":"esquema.html#classmap","text":"As refer\u00eancias em classmap s\u00e3o todas combinadas, durante a instala\u00e7\u00e3o/atualiza\u00e7\u00e3o, em um \u00fanico array associativo, que pode ser encontrado no arquivo vendor/composer/autoload_classmap.php gerado. Esse mapa \u00e9 constru\u00eddo pesquisando por classes em todos os arquivos .php e .inc nos diret\u00f3rios/arquivos fornecidos. Voc\u00ea pode usar o suporte \u00e0 gera\u00e7\u00e3o de mapa de classes para definir o autoloading para todas as bibliotecas que n\u00e3o seguem as PSR-0/4. Para configurar isso, voc\u00ea especifica todos os diret\u00f3rios ou arquivos onde procurar por classes. Exemplo: { \"autoload\": { \"classmap\": [\"src/\", \"lib/\", \"AlgumaCoisa.php\"] } }","title":"Classmap"},{"location":"esquema.html#files","text":"Se voc\u00ea deseja exigir determinados arquivos explicitamente em todas as requisi\u00e7\u00f5es, pode usar o mecanismo de autoloading files . Ele \u00e9 \u00fatil se seu pacote incluir fun\u00e7\u00f5es PHP que n\u00e3o podem ser carregadas automaticamente pelo PHP. Exemplo: { \"autoload\": { \"files\": [\"src/MinhaBiblioteca/funcoes.php\"] } }","title":"Files"},{"location":"esquema.html#excluir-arquivos-do-mapa-de-classes","text":"Se voc\u00ea deseja excluir alguns arquivos ou pastas do mapa de classes, use a propriedade exclude-from-classmap . Isso pode ser \u00fatil para excluir as classes de teste em seu ambiente ativo, por exemplo, pois elas ser\u00e3o omitidas do mapa de classes, at\u00e9 mesmo ao criar um autoloader otimizado. O gerador de mapa de classes ignorar\u00e1 todos os arquivos nos caminhos configurados aqui. Os caminhos s\u00e3o absolutos no diret\u00f3rio raiz do pacote (ou seja, o local do composer.json ) e suportam * para corresponder a qualquer coisa, exceto uma barra, e ** para corresponder a qualquer coisa. ** \u00e9 inclu\u00eddo implicitamente ao final dos caminhos. Exemplo: { \"autoload\": { \"exclude-from-classmap\": [\"/Tests/\", \"/test/\", \"/tests/\"] } }","title":"Excluir Arquivos do Mapa de Classes"},{"location":"esquema.html#otimizando-o-autoloader","text":"O autoloader pode ter um impacto bastante substancial no tempo da requisi\u00e7\u00e3o (50-100ms por requisi\u00e7\u00e3o em frameworks grandes usando muitas classes). Consulte o artigo sobre otimiza\u00e7\u00e3o do autoloader para obter mais detalhes sobre como reduzir esse impacto.","title":"Otimizando o Autoloader"},{"location":"esquema.html#autoload-dev","text":"Esta se\u00e7\u00e3o permite definir regras de autoload para fins de desenvolvimento. As classes necess\u00e1rias para executar a su\u00edte de testes n\u00e3o devem ser inclu\u00eddas nas regras principais de autoload para evitar poluir o autoloader em produ\u00e7\u00e3o e quando outras pessoas usarem seu pacote como uma depend\u00eancia. Portanto, \u00e9 uma boa ideia contar com um caminho dedicado para seus testes unit\u00e1rios e adicion\u00e1-lo na se\u00e7\u00e3o autoload-dev . Exemplo: { \"autoload\": { \"psr-4\": { \"MinhaBiblioteca\\\\\": \"src/\" } }, \"autoload-dev\": { \"psr-4\": { \"MinhaBiblioteca\\\\Tests\\\\\": \"tests/\" } } }","title":"autoload-dev (root-only)"},{"location":"esquema.html#include-path","text":"OBSOLETA : Esta propriedade est\u00e1 presente apenas para oferecer suporte a projetos legados e todo c\u00f3digo novo deve preferencialmente usar o autoloading. Como tal, \u00e9 uma pr\u00e1tica desaprovada, mas o recurso em si provavelmente n\u00e3o desaparecer\u00e1 do Composer. Uma lista de caminhos que devem ser anexados ao include_path do PHP. Exemplo: { \"include-path\": [\"lib/\"] } Opcional.","title":"include-path"},{"location":"esquema.html#target-dir","text":"OBSOLETA : Esta propriedade est\u00e1 presente apenas para oferecer suporte ao autoloading no estilo PSR-0 legado e todo c\u00f3digo novo deve preferencialmente usar a PSR-4 sem target-dir e os projetos usando a PSR-0 com namespaces PHP s\u00e3o encorajados a migrar para a PSR-4. Define o destino da instala\u00e7\u00e3o. Caso a raiz do pacote esteja abaixo da declara\u00e7\u00e3o do namespace, voc\u00ea n\u00e3o poder\u00e1 fazer o autoload corretamente. target-dir resolve este problema. Um exemplo \u00e9 o Symfony. Existem pacotes individuais para os componentes. O componente Yaml est\u00e1 em Symfony\\Component\\Yaml . A raiz do pacote \u00e9 esse diret\u00f3rio Yaml . Para tornar o autoloading poss\u00edvel, precisamos garantir que ele n\u00e3o esteja instalado em vendor/symfony/yaml , mas sim em vendor/symfony/yaml/Symfony/Component/Yaml , para que o autoloader possa carreg\u00e1-lo a partir de vendor/symfony/yaml . Para fazer isso, autoload e target-dir s\u00e3o definidas da seguinte maneira: { \"autoload\": { \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" } }, \"target-dir\": \"Symfony/Component/Yaml\" } Opcional.","title":"target-dir"},{"location":"esquema.html#minimum-stability","text":"Isso define o comportamento padr\u00e3o para filtrar pacotes pela estabilidade. O padr\u00e3o \u00e9 stable , portanto, se voc\u00ea depender de um pacote dev , especifique-o em seu arquivo para evitar surpresas. Todas as vers\u00f5es de cada pacote s\u00e3o verificadas quanto \u00e0 estabilidade, e as que s\u00e3o menos est\u00e1veis que a configura\u00e7\u00e3o minimum-stability ser\u00e3o ignoradas ao resolver as depend\u00eancias do projeto. (Observe que voc\u00ea tamb\u00e9m pode especificar requisitos de estabilidade por pacote, usando flags de estabilidade nas restri\u00e7\u00f5es de vers\u00e3o especificadas em um bloco require (consulte os links de pacotes para obter mais detalhes). As op\u00e7\u00f5es dispon\u00edveis (em ordem de estabilidade) s\u00e3o dev , alpha , beta , RC e stable .","title":"minimum-stability (root-only)"},{"location":"esquema.html#prefer-stable","text":"Quando isso est\u00e1 habilitado, o Composer prefere pacotes mais est\u00e1veis do que os inst\u00e1veis quando \u00e9 poss\u00edvel encontrar pacotes est\u00e1veis compat\u00edveis. Se voc\u00ea precisar de uma vers\u00e3o de desenvolvimento ou apenas vers\u00f5es alpha estiverem dispon\u00edveis para um pacote, elas ainda ser\u00e3o selecionadas, desde que a minimum-stability permita. Use \"prefer-stable\": true para habilitar.","title":"prefer-stable (root-only)"},{"location":"esquema.html#repositories","text":"Reposit\u00f3rios de pacotes personalizados a serem usados. Por padr\u00e3o, o Composer usa apenas o reposit\u00f3rio Packagist. Ao especificar reposit\u00f3rios, voc\u00ea pode obter pacotes de outros lugares. Os reposit\u00f3rios n\u00e3o s\u00e3o resolvidos recursivamente. Voc\u00ea pode adicion\u00e1-los apenas ao seu composer.json principal. As declara\u00e7\u00f5es de reposit\u00f3rios do composer.json das depend\u00eancias s\u00e3o ignoradas. Os seguintes tipos de reposit\u00f3rios s\u00e3o suportados: composer: Um reposit\u00f3rio do Composer \u00e9 simplesmente um arquivo packages.json servido via rede (HTTP, FTP, SSH), que cont\u00e9m uma lista de objetos composer.json com informa\u00e7\u00f5es adicionais sobre dist e/ou source . O arquivo packages.json \u00e9 carregado usando um stream PHP. Voc\u00ea pode definir op\u00e7\u00f5es extras para esse stream usando o par\u00e2metro options . vcs: O reposit\u00f3rio do sistema de controle de vers\u00e3o pode buscar pacotes nos reposit\u00f3rios do git, svn, fossil e hg. pear: Com isso, voc\u00ea pode importar qualquer reposit\u00f3rio PEAR para o seu projeto Composer. package: Se voc\u00ea depende de um projeto que n\u00e3o possui absolutamente nenhum suporte ao Composer, voc\u00ea pode definir o pacote em linha usando um reposit\u00f3rio package . Voc\u00ea basicamente adiciona o objeto composer.json em linha. Para obter mais informa\u00e7\u00f5es sobre qualquer um deles, consulte Reposit\u00f3rios . Exemplo: { \"repositories\": [ { \"type\": \"composer\", \"url\": \"http://packages.exemplo.com.br\" }, { \"type\": \"composer\", \"url\": \"https://packages.exemplo.com.br\", \"options\": { \"ssl\": { \"verify_peer\": \"true\" } } }, { \"type\": \"vcs\", \"url\": \"https://github.com/Seldaek/monolog\" }, { \"type\": \"pear\", \"url\": \"https://pear2.php.net\" }, { \"type\": \"package\", \"package\": { \"name\": \"smarty/smarty\", \"version\": \"3.1.7\", \"dist\": { \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\", \"type\": \"zip\" }, \"source\": { \"url\": \"https://smarty-php.googlecode.com/svn/\", \"type\": \"svn\", \"reference\": \"tags/Smarty_3_1_7/distribution/\" } } } ] } Nota: Aqui a ordem \u00e9 importante. Ao procurar um pacote, o Composer procurar\u00e1 do primeiro reposit\u00f3rio ao \u00faltimo e escolher\u00e1 a primeira correspond\u00eancia. Por padr\u00e3o, o Packagist \u00e9 adicionado por \u00faltimo, o que significa que os reposit\u00f3rios personalizados podem sobrescrever os pacotes dele. O uso da nota\u00e7\u00e3o de objeto JSON tamb\u00e9m \u00e9 poss\u00edvel. No entanto, os pares de chave/valor JSON devem ser considerados ignorando a ordem, ent\u00e3o um comportamento consistente n\u00e3o pode ser garantido. json { \"repositories\": { \"foo\": { \"type\": \"composer\", \"url\": \"http://packages.foo.com\" } } }","title":"repositories (root-only)"},{"location":"esquema.html#config","text":"Um conjunto de op\u00e7\u00f5es de configura\u00e7\u00e3o. \u00c9 usada apenas para projetos. Consulte Config para obter uma descri\u00e7\u00e3o de cada op\u00e7\u00e3o individual.","title":"config (root-only)"},{"location":"esquema.html#scripts","text":"O Composer permite conectar-se a v\u00e1rias partes do processo de instala\u00e7\u00e3o atrav\u00e9s do uso de scripts. Consulte Scripts para obter detalhes e exemplos de eventos.","title":"scripts (root-only)"},{"location":"esquema.html#extra","text":"Dados extras arbitr\u00e1rios para consumo por scripts . Isso pode ser praticamente qualquer coisa. Para acess\u00e1-los de dentro de um manipulador de eventos de script, voc\u00ea pode fazer: $extra = $event->getComposer()->getPackage()->getExtra(); Opcional.","title":"extra"},{"location":"esquema.html#bin","text":"Um conjunto de arquivos que devem ser tratados como bin\u00e1rios e ter links simb\u00f3licos no bin-dir (da configura\u00e7\u00e3o). Consulte os Bin\u00e1rios dos Vendors para obter mais detalhes. Opcional.","title":"bin"},{"location":"esquema.html#archive","text":"Um conjunto de op\u00e7\u00f5es para criar arquivos de pacotes compactados. As seguintes op\u00e7\u00f5es s\u00e3o suportadas: exclude: Permite configurar uma lista de padr\u00f5es para caminhos exclu\u00eddos. A sintaxe do padr\u00e3o corresponde aos arquivos .gitignore . Um ponto de exclama\u00e7\u00e3o ( ! ) inicial resultar\u00e1 na inclus\u00e3o de todos os arquivos correspondentes, mesmo que um padr\u00e3o anterior os tenha exclu\u00eddo. Uma barra inicial corresponder\u00e1 apenas no in\u00edcio do caminho relativo do projeto. Um asterisco n\u00e3o ser\u00e1 expandido para um separador de diret\u00f3rio. Exemplo: { \"archive\": { \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", \"!/foo/bar/baz\"] } } O exemplo incluir\u00e1 /dir/foo/bar/arquivo , /foo/bar/baz , /arquivo.php , /foo/meu.test , mas excluir\u00e1 /foo/bar/qualquer , /foo/baz e /meu.test . Opcional.","title":"archive"},{"location":"esquema.html#abandoned","text":"Indica se este pacote foi abandonado. Pode ser booleano ou um nome/URL de pacote apontando para uma alternativa recomendada. Exemplos: Use \"abandoned\": true para indicar que este pacote foi abandonado. Use \"abandoned\": \"monolog/monolog\" para indicar que este pacote foi abandonado e a alternativa recomendada \u00e9 monolog/monolog . O padr\u00e3o \u00e9 false . Opcional.","title":"abandoned"},{"location":"esquema.html#non-feature-branches","text":"Uma lista de padr\u00f5es de express\u00f5es regulares de nomes de branches n\u00e3o num\u00e9ricos (por exemplo, \"latest\" ou algo parecido), que N\u00c3O ser\u00e3o tratados como feature branches. \u00c9 um array de strings. Se voc\u00ea tiver nomes de branches n\u00e3o num\u00e9ricos, por exemplo, como \"latest\", \"current\", \"latest-stable\" ou algo parecido, que n\u00e3o se pare\u00e7am com um n\u00famero de vers\u00e3o, o Composer tratar\u00e1 esses branches como feature branches. Isso significa que ele procurar\u00e1 por branches pai, que se parecem com uma vers\u00e3o ou terminam em branches especiais (como master ) e o n\u00famero da vers\u00e3o do pacote raiz se tornar\u00e1 a vers\u00e3o do branch pai ou, pelo menos, master ou algo parecido. Para tratar branches com nomes n\u00e3o num\u00e9ricos como vers\u00f5es em vez de procurar por um branch pai com uma vers\u00e3o v\u00e1lida ou nome de branch especial como master , voc\u00ea pode definir padr\u00f5es para nomes de branches, que devem ser tratados como branches de vers\u00f5es de desenvolvimento. Isso \u00e9 realmente \u00fatil quando voc\u00ea tem depend\u00eancias usando self.version , para que n\u00e3o o dev-master , mas o mesmo branch seja instalado (no exemplo: latest-testing ). Um exemplo: Se voc\u00ea possui um branch testing , que \u00e9 fortemente mantido durante uma fase de testes e \u00e9 implantado em seu ambiente staging, normalmente composer show -s retornar\u00e1 versions : * dev-master . Se voc\u00ea configurar \"latest-.*\" como um padr\u00e3o para non-feature-branches desta forma: { \"non-feature-branches\": [\"latest-.*\"] } Ent\u00e3o composer show -s retornar\u00e1 versions : * dev-latest-testing . Opcional.","title":"non-feature-branches"},{"location":"introducao.html","text":"Introdu\u00e7\u00e3o \u00b6 O Composer \u00e9 uma ferramenta para gerenciamento de depend\u00eancias no PHP. Ele permite que voc\u00ea declare as bibliotecas das quais seu projeto depende e as gerencia (instala/atualiza) para voc\u00ea. Gerenciamento de Depend\u00eancias \u00b6 O Composer n\u00e3o \u00e9 um gerenciador de pacotes no mesmo sentido que o Yum ou Apt. Sim, ele lida com \"pacotes\" ou bibliotecas, mas os gerencia separadamente por projeto, instalando-os em um diret\u00f3rio (por exemplo, vendor ) dentro do seu projeto. Por padr\u00e3o, ele n\u00e3o instala nada globalmente. Portanto, ele \u00e9 um gerenciador de depend\u00eancias. No entanto, ele suporta um projeto \"global\" por conveni\u00eancia, atrav\u00e9s do comando global . Essa ideia n\u00e3o \u00e9 nova e o Composer \u00e9 fortemente inspirado pelo npm do node e pelo bundler do ruby. Suponha que: Voc\u00ea tem um projeto que depende de v\u00e1rias bibliotecas. Algumas dessas bibliotecas dependem de outras bibliotecas. O Composer: Permite declarar as bibliotecas das quais voc\u00ea depende. Descobre quais vers\u00f5es de quais pacotes podem e precisam ser instaladas e as instala (o que significa que elas s\u00e3o baixadas no seu projeto). Consulte o cap\u00edtulo Uso B\u00e1sico para obter mais detalhes sobre a declara\u00e7\u00e3o de depend\u00eancias. Requisitos de Sistema \u00b6 O Composer requer o PHP 5.3.2+ para executar. Algumas configura\u00e7\u00f5es sens\u00edveis do PHP e flags de compila\u00e7\u00e3o tamb\u00e9m s\u00e3o necess\u00e1rias, mas ao usar o instalador, voc\u00ea ficar\u00e1 sabendo de quaisquer incompatibilidades. Para instalar pacotes a partir do c\u00f3digo-fonte, em vez de arquivos zip simples, voc\u00ea precisar\u00e1 do git, svn, fossil ou hg, dependendo de como \u00e9 feito o controle de vers\u00e3o do pacote. O Composer \u00e9 multiplataforma e n\u00f3s nos esfor\u00e7amos para faz\u00ea-lo funcionar igualmente bem no Windows, Linux e macOS. Instala\u00e7\u00e3o - Linux / Unix / macOS \u00b6 Baixando o Execut\u00e1vel do Composer \u00b6 O Composer oferece um instalador conveniente que voc\u00ea pode executar diretamente da linha de comando. Sinta-se \u00e0 vontade para baixar esse arquivo ou revis\u00e1-lo no GitHub , se desejar saber mais sobre o funcionamento interno do instalador. O c\u00f3digo-fonte \u00e9 PHP simples. Em resumo, existem duas formas de instalar o Composer. Localmente como parte do seu projeto ou globalmente como um execut\u00e1vel dispon\u00edvel em todo o sistema. Localmente \u00b6 Para instalar o Composer localmente, execute o instalador no diret\u00f3rio do seu projeto. Consulte a p\u00e1gina de download para obter instru\u00e7\u00f5es. O instalador verificar\u00e1 algumas configura\u00e7\u00f5es do PHP e far\u00e1 o download do composer.phar no seu diret\u00f3rio atual. Esse arquivo \u00e9 o bin\u00e1rio do Composer. Ele \u00e9 um PHAR (PHP Archive), que \u00e9 um formato de arquivo para PHP que pode ser executado na linha de comando, entre outras coisas. Agora execute php composer.phar para executar o Composer. Voc\u00ea pode instalar o Composer em um diret\u00f3rio espec\u00edfico usando a op\u00e7\u00e3o --install-dir e, adicionalmente, tamb\u00e9m renome\u00e1-lo usando a op\u00e7\u00e3o --filename . Ao executar o instalador, seguindo as instru\u00e7\u00f5es da p\u00e1gina de download , adicione os seguintes par\u00e2metros: php composer-setup.php --install-dir=bin --filename=composer Agora execute php bin/composer para executar o Composer. Globalmente \u00b6 Voc\u00ea pode colocar o PHAR do Composer em qualquer lugar que desejar. Se voc\u00ea o colocar em um diret\u00f3rio que fa\u00e7a parte da sua vari\u00e1vel de ambiente PATH , voc\u00ea poder\u00e1 acess\u00e1-lo globalmente. Nos sistemas Unix, voc\u00ea pode at\u00e9 torn\u00e1-lo execut\u00e1vel e invoc\u00e1-lo sem usar diretamente o interpretador php . Ap\u00f3s executar o instalador, seguindo as instru\u00e7\u00f5es da p\u00e1gina de download , voc\u00ea pode executar isto para mover o composer.phar para um diret\u00f3rio que esteja na sua vari\u00e1vel PATH : mv composer.phar /usr/local/bin/composer Se voc\u00ea deseja instal\u00e1-lo apenas para o seu usu\u00e1rio e evitar exigir permiss\u00f5es de root, use ~/.local/bin , que est\u00e1 dispon\u00edvel por padr\u00e3o em algumas distribui\u00e7\u00f5es Linux. Nota: Se o comando acima falhar devido a permiss\u00f5es, pode ser necess\u00e1rio execut\u00e1-lo novamente com sudo. Nota: Em algumas vers\u00f5es do macOS, o diret\u00f3rio /usr n\u00e3o existe por padr\u00e3o. Se voc\u00ea receber o erro \"/usr/local/bin/composer: No such file or directory\", dever\u00e1 criar o diret\u00f3rio manualmente antes de continuar: mkdir -p /usr/local/bin . Nota: Para obter informa\u00e7\u00f5es sobre como alterar sua vari\u00e1vel PATH , leia o artigo da Wikipedia e/ou use seu mecanismo de busca preferido. Agora execute composer para executar o Composer em vez de php composer.phar . Instala\u00e7\u00e3o - Windows \u00b6 Usando o Instalador \u00b6 Esta \u00e9 a maneira mais f\u00e1cil de configurar o Composer na sua m\u00e1quina. Baixe e execute o Composer-Setup.exe . Ele instalar\u00e1 a vers\u00e3o mais recente do Composer e configurar\u00e1 sua vari\u00e1vel PATH para que voc\u00ea possa executar o composer de qualquer diret\u00f3rio na sua linha de comando. Nota: Feche seu terminal atual. Teste o uso com um novo terminal: Isso \u00e9 importante, pois a vari\u00e1vel PATH s\u00f3 \u00e9 carregada quando o terminal \u00e9 iniciado. Instala\u00e7\u00e3o Manual \u00b6 Mude para um diret\u00f3rio que esteja na sua vari\u00e1vel PATH e execute o instalador seguindo as instru\u00e7\u00f5es da p\u00e1gina de download para baixar o composer.phar . Crie um novo arquivo composer.bat junto ao composer.phar : C:\\bin>echo @php \"%~dp0composer.phar\" %*>composer.bat Adicione o diret\u00f3rio \u00e0 sua vari\u00e1vel de ambiente PATH , se ainda n\u00e3o estiver. Para obter informa\u00e7\u00f5es sobre como alterar sua vari\u00e1vel PATH , consulte este artigo e/ou use seu mecanismo de pesquisa preferido. Feche o seu terminal atual. Teste o uso em um novo terminal: C:\\Users\\username>composer -V Composer version 1.0.0 2016-01-10 20:34:53 Usando o Composer \u00b6 Agora que voc\u00ea instalou o Composer, est\u00e1 tudo pronto para us\u00e1-lo! V\u00e1 para o pr\u00f3ximo cap\u00edtulo para uma demonstra\u00e7\u00e3o curta e simples.","title":"Introdu\u00e7\u00e3o"},{"location":"introducao.html#introducao","text":"O Composer \u00e9 uma ferramenta para gerenciamento de depend\u00eancias no PHP. Ele permite que voc\u00ea declare as bibliotecas das quais seu projeto depende e as gerencia (instala/atualiza) para voc\u00ea.","title":"Introdu\u00e7\u00e3o"},{"location":"introducao.html#gerenciamento-de-dependencias","text":"O Composer n\u00e3o \u00e9 um gerenciador de pacotes no mesmo sentido que o Yum ou Apt. Sim, ele lida com \"pacotes\" ou bibliotecas, mas os gerencia separadamente por projeto, instalando-os em um diret\u00f3rio (por exemplo, vendor ) dentro do seu projeto. Por padr\u00e3o, ele n\u00e3o instala nada globalmente. Portanto, ele \u00e9 um gerenciador de depend\u00eancias. No entanto, ele suporta um projeto \"global\" por conveni\u00eancia, atrav\u00e9s do comando global . Essa ideia n\u00e3o \u00e9 nova e o Composer \u00e9 fortemente inspirado pelo npm do node e pelo bundler do ruby. Suponha que: Voc\u00ea tem um projeto que depende de v\u00e1rias bibliotecas. Algumas dessas bibliotecas dependem de outras bibliotecas. O Composer: Permite declarar as bibliotecas das quais voc\u00ea depende. Descobre quais vers\u00f5es de quais pacotes podem e precisam ser instaladas e as instala (o que significa que elas s\u00e3o baixadas no seu projeto). Consulte o cap\u00edtulo Uso B\u00e1sico para obter mais detalhes sobre a declara\u00e7\u00e3o de depend\u00eancias.","title":"Gerenciamento de Depend\u00eancias"},{"location":"introducao.html#requisitos-de-sistema","text":"O Composer requer o PHP 5.3.2+ para executar. Algumas configura\u00e7\u00f5es sens\u00edveis do PHP e flags de compila\u00e7\u00e3o tamb\u00e9m s\u00e3o necess\u00e1rias, mas ao usar o instalador, voc\u00ea ficar\u00e1 sabendo de quaisquer incompatibilidades. Para instalar pacotes a partir do c\u00f3digo-fonte, em vez de arquivos zip simples, voc\u00ea precisar\u00e1 do git, svn, fossil ou hg, dependendo de como \u00e9 feito o controle de vers\u00e3o do pacote. O Composer \u00e9 multiplataforma e n\u00f3s nos esfor\u00e7amos para faz\u00ea-lo funcionar igualmente bem no Windows, Linux e macOS.","title":"Requisitos de Sistema"},{"location":"introducao.html#instalacao-linux-unix-macos","text":"","title":"Instala\u00e7\u00e3o - Linux / Unix / macOS"},{"location":"introducao.html#baixando-o-executavel-do-composer","text":"O Composer oferece um instalador conveniente que voc\u00ea pode executar diretamente da linha de comando. Sinta-se \u00e0 vontade para baixar esse arquivo ou revis\u00e1-lo no GitHub , se desejar saber mais sobre o funcionamento interno do instalador. O c\u00f3digo-fonte \u00e9 PHP simples. Em resumo, existem duas formas de instalar o Composer. Localmente como parte do seu projeto ou globalmente como um execut\u00e1vel dispon\u00edvel em todo o sistema.","title":"Baixando o Execut\u00e1vel do Composer"},{"location":"introducao.html#localmente","text":"Para instalar o Composer localmente, execute o instalador no diret\u00f3rio do seu projeto. Consulte a p\u00e1gina de download para obter instru\u00e7\u00f5es. O instalador verificar\u00e1 algumas configura\u00e7\u00f5es do PHP e far\u00e1 o download do composer.phar no seu diret\u00f3rio atual. Esse arquivo \u00e9 o bin\u00e1rio do Composer. Ele \u00e9 um PHAR (PHP Archive), que \u00e9 um formato de arquivo para PHP que pode ser executado na linha de comando, entre outras coisas. Agora execute php composer.phar para executar o Composer. Voc\u00ea pode instalar o Composer em um diret\u00f3rio espec\u00edfico usando a op\u00e7\u00e3o --install-dir e, adicionalmente, tamb\u00e9m renome\u00e1-lo usando a op\u00e7\u00e3o --filename . Ao executar o instalador, seguindo as instru\u00e7\u00f5es da p\u00e1gina de download , adicione os seguintes par\u00e2metros: php composer-setup.php --install-dir=bin --filename=composer Agora execute php bin/composer para executar o Composer.","title":"Localmente"},{"location":"introducao.html#globalmente","text":"Voc\u00ea pode colocar o PHAR do Composer em qualquer lugar que desejar. Se voc\u00ea o colocar em um diret\u00f3rio que fa\u00e7a parte da sua vari\u00e1vel de ambiente PATH , voc\u00ea poder\u00e1 acess\u00e1-lo globalmente. Nos sistemas Unix, voc\u00ea pode at\u00e9 torn\u00e1-lo execut\u00e1vel e invoc\u00e1-lo sem usar diretamente o interpretador php . Ap\u00f3s executar o instalador, seguindo as instru\u00e7\u00f5es da p\u00e1gina de download , voc\u00ea pode executar isto para mover o composer.phar para um diret\u00f3rio que esteja na sua vari\u00e1vel PATH : mv composer.phar /usr/local/bin/composer Se voc\u00ea deseja instal\u00e1-lo apenas para o seu usu\u00e1rio e evitar exigir permiss\u00f5es de root, use ~/.local/bin , que est\u00e1 dispon\u00edvel por padr\u00e3o em algumas distribui\u00e7\u00f5es Linux. Nota: Se o comando acima falhar devido a permiss\u00f5es, pode ser necess\u00e1rio execut\u00e1-lo novamente com sudo. Nota: Em algumas vers\u00f5es do macOS, o diret\u00f3rio /usr n\u00e3o existe por padr\u00e3o. Se voc\u00ea receber o erro \"/usr/local/bin/composer: No such file or directory\", dever\u00e1 criar o diret\u00f3rio manualmente antes de continuar: mkdir -p /usr/local/bin . Nota: Para obter informa\u00e7\u00f5es sobre como alterar sua vari\u00e1vel PATH , leia o artigo da Wikipedia e/ou use seu mecanismo de busca preferido. Agora execute composer para executar o Composer em vez de php composer.phar .","title":"Globalmente"},{"location":"introducao.html#instalacao-windows","text":"","title":"Instala\u00e7\u00e3o - Windows"},{"location":"introducao.html#usando-o-instalador","text":"Esta \u00e9 a maneira mais f\u00e1cil de configurar o Composer na sua m\u00e1quina. Baixe e execute o Composer-Setup.exe . Ele instalar\u00e1 a vers\u00e3o mais recente do Composer e configurar\u00e1 sua vari\u00e1vel PATH para que voc\u00ea possa executar o composer de qualquer diret\u00f3rio na sua linha de comando. Nota: Feche seu terminal atual. Teste o uso com um novo terminal: Isso \u00e9 importante, pois a vari\u00e1vel PATH s\u00f3 \u00e9 carregada quando o terminal \u00e9 iniciado.","title":"Usando o Instalador"},{"location":"introducao.html#instalacao-manual","text":"Mude para um diret\u00f3rio que esteja na sua vari\u00e1vel PATH e execute o instalador seguindo as instru\u00e7\u00f5es da p\u00e1gina de download para baixar o composer.phar . Crie um novo arquivo composer.bat junto ao composer.phar : C:\\bin>echo @php \"%~dp0composer.phar\" %*>composer.bat Adicione o diret\u00f3rio \u00e0 sua vari\u00e1vel de ambiente PATH , se ainda n\u00e3o estiver. Para obter informa\u00e7\u00f5es sobre como alterar sua vari\u00e1vel PATH , consulte este artigo e/ou use seu mecanismo de pesquisa preferido. Feche o seu terminal atual. Teste o uso em um novo terminal: C:\\Users\\username>composer -V Composer version 1.0.0 2016-01-10 20:34:53","title":"Instala\u00e7\u00e3o Manual"},{"location":"introducao.html#usando-o-composer","text":"Agora que voc\u00ea instalou o Composer, est\u00e1 tudo pronto para us\u00e1-lo! V\u00e1 para o pr\u00f3ximo cap\u00edtulo para uma demonstra\u00e7\u00e3o curta e simples.","title":"Usando o Composer"},{"location":"repositorios.html","text":"Reposit\u00f3rios \u00b6 Este cap\u00edtulo explicar\u00e1 o conceito de pacotes e reposit\u00f3rios, que tipos de reposit\u00f3rios est\u00e3o dispon\u00edveis e como eles funcionam. Conceitos \u00b6 Antes de examinarmos os diferentes tipos de reposit\u00f3rios existentes, precisamos entender alguns dos conceitos b\u00e1sicos sobre os quais o Composer \u00e9 constru\u00eddo. Pacote \u00b6 O Composer \u00e9 um gerenciador de depend\u00eancias. Ele instala pacotes localmente. Um pacote \u00e9 essencialmente um diret\u00f3rio que cont\u00e9m alguma coisa. Nesse caso, c\u00f3digo PHP, mas em teoria poderia ser qualquer coisa. E ele cont\u00e9m uma descri\u00e7\u00e3o do pacote que possui um nome e uma vers\u00e3o. O nome e a vers\u00e3o s\u00e3o usados para identificar o pacote. De fato, internamente o Composer v\u00ea cada vers\u00e3o como um pacote separado. Embora essa distin\u00e7\u00e3o n\u00e3o importe quando voc\u00ea estiver usando o Composer, ela \u00e9 muito importante quando voc\u00ea quiser alterar o pacote. Al\u00e9m do nome e da vers\u00e3o, existem metadados \u00fateis. A informa\u00e7\u00e3o mais relevante para a instala\u00e7\u00e3o \u00e9 a defini\u00e7\u00e3o da fonte, que descreve onde obter o conte\u00fado do pacote. Os dados do pacote apontam para o conte\u00fado do pacote. E h\u00e1 duas op\u00e7\u00f5es aqui: dist e source . Dist: \u00e9 uma vers\u00e3o empacotada dos dados do pacote. Geralmente \u00e9 uma vers\u00e3o publicada, normalmente \u00e9 uma vers\u00e3o est\u00e1vel. Source: \u00e9 usada para desenvolvimento. Ela geralmente se origina de um reposit\u00f3rio de c\u00f3digo-fonte, como o git. Voc\u00ea pode obter o c\u00f3digo-fonte quando quiser modificar o pacote baixado. Os pacotes podem fornecer uma dessas ou at\u00e9 mesmo as duas. Dependendo de certos fatores, como as op\u00e7\u00f5es fornecidas pela pessoa e a estabilidade do pacote, uma delas ter\u00e1 a prefer\u00eancia. Reposit\u00f3rio \u00b6 Um reposit\u00f3rio \u00e9 uma fonte de pacotes. \u00c9 uma lista de pacotes/vers\u00f5es. O Composer procurar\u00e1 em todos os seus reposit\u00f3rios para encontrar os pacotes que seu projeto exige. Por padr\u00e3o, apenas o reposit\u00f3rio Packagist est\u00e1 registrado no Composer. Voc\u00ea pode adicionar mais reposit\u00f3rios ao seu projeto declarando-os no composer.json . Os reposit\u00f3rios est\u00e3o dispon\u00edveis apenas para o pacote raiz e os reposit\u00f3rios definidos em suas depend\u00eancias n\u00e3o ser\u00e3o carregados. Leia a FAQ se quiser saber o porqu\u00ea. Tipos \u00b6 composer \u00b6 O principal tipo de reposit\u00f3rio \u00e9 o reposit\u00f3rio composer . Ele usa um \u00fanico arquivo packages.json que cont\u00e9m todos os metadados dos pacotes. Este tamb\u00e9m \u00e9 o tipo de reposit\u00f3rio que o Packagist usa. Para referenciar um reposit\u00f3rio composer , forne\u00e7a o caminho antes do arquivo packages.json . No caso do Packagist, esse arquivo est\u00e1 localizado em /packages.json , portanto, a URL do reposit\u00f3rio seria repo.packagist.org . Para exemplo.org.br/packages.json , a URL do reposit\u00f3rio seria exemplo.org.br . packages \u00b6 O \u00fanico campo obrigat\u00f3rio \u00e9 packages . A estrutura JSON \u00e9 a seguinte: { \"packages\": { \"vendor/nome-pacote\": { \"dev-master\": { @composer.json }, \"1.0.x-dev\": { @composer.json }, \"0.0.1\": { @composer.json }, \"1.0.0\": { @composer.json } } } } O marcador @composer.json seria o conte\u00fado do composer.json dessa vers\u00e3o do pacote, incluindo no m\u00ednimo: name version dist ou source Aqui est\u00e1 uma defini\u00e7\u00e3o m\u00ednima de pacote: { \"name\": \"smarty/smarty\", \"version\": \"3.1.7\", \"dist\": { \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\", \"type\": \"zip\" } } Ela pode incluir qualquer um dos outros campos especificados no esquema . notify-batch \u00b6 O campo notify-batch permite especificar uma URL que ser\u00e1 chamada sempre que algu\u00e9m instalar um pacote. A URL pode ser um caminho absoluto (que usar\u00e1 o mesmo dom\u00ednio que o reposit\u00f3rio) ou uma URL completamente qualificada. Um exemplo de valor: { \"notify-batch\": \"/downloads/\" } Para exemplo.org.br/packages.json contendo um pacote monolog/monolog , isso enviaria uma requisi\u00e7\u00e3o POST para exemplo.org.br/downloads/ com o seguinte corpo da requisi\u00e7\u00e3o JSON: { \"downloads\": [ {\"name\": \"monolog/monolog\", \"version\": \"1.2.1.0\"} ] } O campo version conter\u00e1 a representa\u00e7\u00e3o normalizada do n\u00famero da vers\u00e3o. Este campo \u00e9 opcional. provider-includes e providers-url \u00b6 O campo provider-includes permite listar um conjunto de arquivos que listam nomes de pacotes fornecidos por este reposit\u00f3rio. Nesse caso, o hash deve ser um sha256 dos arquivos. O campo providers-url descreve como os arquivos do provedor s\u00e3o encontrados no servidor. \u00c9 um caminho absoluto da raiz do reposit\u00f3rio. Deve conter os placeholders %package% e %hash% . Um exemplo: { \"provider-includes\": { \"providers-a.json\": { \"sha256\": \"f5b4bc0b354108ef08614e569c1ed01a2782e67641744864a74e788982886f4c\" }, \"providers-b.json\": { \"sha256\": \"b38372163fac0573053536f5b8ef11b86f804ea8b016d239e706191203f6efac\" } }, \"providers-url\": \"/p/%package%$%hash%.json\" } Esses arquivos cont\u00eam listas de nomes de pacotes e hashes para verificar a integridade do arquivo, por exemplo: { \"providers\": { \"acme/foo\": { \"sha256\": \"38968de1305c2e17f4de33aea164515bc787c42c7e2d6e25948539a14268bb82\" }, \"acme/bar\": { \"sha256\": \"4dd24c930bd6e1103251306d6336ac813b563a220d9ca14f4743c032fb047233\" } } } O arquivo acima declara que acme/foo e acme/bar podem ser encontrados neste reposit\u00f3rio, carregando o arquivo referenciado por providers-url , substituindo %package% pelo nome do pacote com o nome do vendor e %hash% pelo campo sha256 . Esses arquivos cont\u00eam defini\u00e7\u00f5es de pacotes, conforme descrito acima . Estes campos s\u00e3o opcionais. Voc\u00ea provavelmente n\u00e3o precisa deles para seu pr\u00f3prio reposit\u00f3rio personalizado. Op\u00e7\u00f5es de Stream \u00b6 O arquivo packages.json \u00e9 carregado usando um stream PHP. Voc\u00ea pode definir op\u00e7\u00f5es extras para esse stream usando o par\u00e2metro options . Voc\u00ea pode definir qualquer op\u00e7\u00e3o de contexto de stream PHP v\u00e1lida. Consulte Op\u00e7\u00f5es e par\u00e2metros de contexto para obter mais informa\u00e7\u00f5es. VCS \u00b6 VCS significa sistema de controle de vers\u00e3o. Isso inclui sistemas de versionamento como git, svn, fossil ou hg. O Composer possui um tipo de reposit\u00f3rio para instalar pacotes desses sistemas. Carregando um Pacote de um Reposit\u00f3rio VCS \u00b6 Existem alguns casos de uso para isso. O mais comum \u00e9 manter seu pr\u00f3prio fork de uma biblioteca de terceiros. Se voc\u00ea estiver usando uma determinada biblioteca para seu projeto e decidir alterar algo na biblioteca, desejar\u00e1 que seu projeto use a vers\u00e3o alterada. Se a biblioteca estiver no GitHub (esse \u00e9 o caso na maioria das vezes), voc\u00ea pode simplesmente fazer o fork dela l\u00e1 e fazer o push das suas altera\u00e7\u00f5es para o seu fork. Depois disso, voc\u00ea atualiza o composer.json do projeto. Tudo que voc\u00ea precisa fazer \u00e9 adicionar seu fork como um reposit\u00f3rio e atualizar a restri\u00e7\u00e3o de vers\u00e3o para apontar para seu branch personalizado. No composer.json , voc\u00ea deve prefixar o nome do seu branch personalizado com dev- . Para conven\u00e7\u00f5es de nomenclatura de restri\u00e7\u00f5es de vers\u00e3o, consulte Bibliotecas para obter mais informa\u00e7\u00f5es. Exemplo assumindo que voc\u00ea alterou o monolog para corrigir um erro no branch bugfix : { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://github.com/igorw/monolog\" } ], \"require\": { \"monolog/monolog\": \"dev-bugfix\" } } Quando voc\u00ea executar php composer.phar update , voc\u00ea deve obter sua vers\u00e3o modificada do monolog/monolog em vez da vers\u00e3o do Packagist. Observe que voc\u00ea n\u00e3o deve renomear o pacote, a menos que realmente pretenda fazer o fork do projeto a longo prazo e se afastar completamente do pacote original. O Composer selecionar\u00e1 seu pacote corretamente no lugar do original, j\u00e1 que o reposit\u00f3rio personalizado tem prioridade sobre o Packagist. Se voc\u00ea deseja renomear o pacote, deve faz\u00ea-lo no branch padr\u00e3o (geralmente master ) e n\u00e3o no feature branch, pois o nome do pacote \u00e9 obtido do branch padr\u00e3o. Observe tamb\u00e9m que a substitui\u00e7\u00e3o n\u00e3o funcionar\u00e1 se voc\u00ea alterar a propriedade name no arquivo composer.json do reposit\u00f3rio criado pelo fork, pois ela precisa corresponder \u00e0 original para a substitui\u00e7\u00e3o funcionar. Se outra depend\u00eancia depender do pacote criado pelo fork, \u00e9 poss\u00edvel adicionar um alias em linha para que ela corresponda a uma restri\u00e7\u00e3o que, de outra forma, ela n\u00e3o iria. Para obter mais informa\u00e7\u00f5es, consulte o artigo sobre aliases . Usando Reposit\u00f3rios Privados \u00b6 Exatamente a mesma solu\u00e7\u00e3o permite que voc\u00ea trabalhe com seus reposit\u00f3rios privados no GitHub e BitBucket: { \"require\": { \"vendor/meu-repo-privado\": \"dev-master\" }, \"repositories\": [ { \"type\": \"vcs\", \"url\": \"git@bitbucket.org:vendor/meu-repo-privado.git\" } ] } O \u00fanico requisito \u00e9 a instala\u00e7\u00e3o de chaves SSH para um cliente git. Alternativas ao Git \u00b6 Git n\u00e3o \u00e9 o \u00fanico sistema de controle de vers\u00e3o suportado pelo reposit\u00f3rio VCS. Os seguintes s\u00e3o suportados: Git: git-scm.com Subversion: subversion.apache.org Mercurial: mercurial-scm.org Fossil : fossil-scm.org Para obter pacotes desses sistemas, voc\u00ea precisa ter seus respectivos clientes instalados. Isso pode ser inconveniente. E por esse motivo, h\u00e1 suporte especial ao GitHub e BitBucket que usa as APIs fornecidas por esses sites para buscar os pacotes sem precisar instalar o sistema de controle de vers\u00e3o. O reposit\u00f3rio VCS fornece op\u00e7\u00f5es dist para eles que buscam os pacotes como arquivos zip. GitHub: github.com (Git) BitBucket: bitbucket.org (Git e Mercurial) O driver VCS a ser usado \u00e9 detectado automaticamente com base na URL. Entretanto, se voc\u00ea precisar especificar um por qualquer motivo, poder\u00e1 usar git-bitbucket , hg-bitbucket , github , gitlab , perforce , fossil , git , svn ou hg como o tipo de reposit\u00f3rio em vez de vcs . Se voc\u00ea definir a chave no-api como true em um reposit\u00f3rio github , clonar\u00e1 o reposit\u00f3rio como faria com qualquer outro reposit\u00f3rio git, em vez de usar a API do GitHub. Por\u00e9m, diferente de usar o driver git diretamente, o Composer ainda tentar\u00e1 usar os arquivos zip do GitHub. Note que: Para permitir que o Composer escolha qual driver usar , o tipo de reposit\u00f3rio precisa ser definido como vcs ; Se voc\u00ea j\u00e1 usou um reposit\u00f3rio privado , isso significa que o Composer deve ter clonado ele no cache. Se voc\u00ea deseja instalar o mesmo pacote com drivers, lembre-se de executar o comando composer clearcache seguido do comando composer update para atualizar o cache do Composer e instalar o pacote a partir de dist . Configura\u00e7\u00e3o do Driver do BitBucket \u00b6 O driver do BitBucket usa OAuth para acessar seus reposit\u00f3rios privados por meio das APIs REST do BitBucket e voc\u00ea precisar\u00e1 criar um consumidor OAuth para usar o driver, consulte a Documenta\u00e7\u00e3o da Atlassian . Voc\u00ea precisar\u00e1 preencher a URL de callback com algo para satisfazer o BitBucket, mas o endere\u00e7o n\u00e3o precisa ir a lugar algum e n\u00e3o \u00e9 usado pelo Composer. Depois de criar um consumidor OAuth no painel de controle do BitBucket, voc\u00ea precisa configurar o arquivo auth.json com as credenciais desta forma (mais informa\u00e7\u00f5es aqui ): { \"bitbucket-oauth\": { \"bitbucket.org\": { \"consumer-key\": \"minha-chave\", \"consumer-secret\": \"meu-segredo\" } } } Observe que o endpoint do reposit\u00f3rio precisa ser https em vez de git . Como alternativa, se voc\u00ea preferir n\u00e3o ter suas credenciais OAuth em seu sistema de arquivos, poder\u00e1 exportar o bloco bitbucket-oauth acima para a vari\u00e1vel de ambiente COMPOSER_AUTH . Op\u00e7\u00f5es do Subversion \u00b6 Como o Subversion n\u00e3o possui um conceito nativo de branches e tags, o Composer assume por padr\u00e3o que o c\u00f3digo est\u00e1 localizado em $url/trunk , $url/branches e $url/tags . Se seu reposit\u00f3rio tiver um layout diferente, voc\u00ea poder\u00e1 alterar esses valores. Por exemplo, se voc\u00ea usasse nomes com iniciais em mai\u00fasculas, poderia configurar o reposit\u00f3rio desta forma: { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"http://svn.exemplo.org.br/projeto-a/\", \"trunk-path\": \"Trunk\", \"branches-path\": \"Branches\", \"tags-path\": \"Tags\" } ] } Se voc\u00ea n\u00e3o tiver um diret\u00f3rio branches ou tags , poder\u00e1 desabilit\u00e1-los completamente definindo branches-path ou tags-path como false . Se o pacote estiver em um subdiret\u00f3rio, por exemplo, /trunk/foo/bar/composer.json e /tags/1.0/foo/bar/composer.json , voc\u00ea pode fazer o Composer acess\u00e1-lo definindo a op\u00e7\u00e3o package-path com o subdiret\u00f3rio, nesse exemplo seria \"package-path\": \"foo/bar/\" . Se voc\u00ea possui um reposit\u00f3rio Subversion privado, pode salvar as credenciais na se\u00e7\u00e3o http-basic da sua configura\u00e7\u00e3o (consulte Esquema ): { \"http-basic\": { \"svn.exemplo.org.br\": { \"username\": \"usuario\", \"password\": \"senha\" } } } Se o seu cliente Subversion estiver configurado para armazenar credenciais por padr\u00e3o, essas credenciais ser\u00e3o salvas para o usu\u00e1rio atual e as credenciais salvas anteriormente para esse servidor ser\u00e3o substitu\u00eddas. Voc\u00ea pode alterar esse comportamento definindo a op\u00e7\u00e3o svn-cache-credentials como false na configura\u00e7\u00e3o do seu reposit\u00f3rio: { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"http://svn.exemplo.org.br/projeto-a/\", \"svn-cache-credentials\": false } ] } PEAR \u00b6 \u00c9 poss\u00edvel instalar pacotes de qualquer canal PEAR usando o reposit\u00f3rio pear . O Composer prefixar\u00e1 todos os nomes de pacotes com pear-{NomeCanal}/ para evitar conflitos. Todos os pacotes tamb\u00e9m t\u00eam alias com o prefixo pear-{AliasCanal}/ . Exemplo usando pear2.php.net : { \"repositories\": [ { \"type\": \"pear\", \"url\": \"https://pear2.php.net\" } ], \"require\": { \"pear-pear2.php.net/PEAR2_Text_Markdown\": \"*\", \"pear-pear2/PEAR2_HTTP_Request\": \"*\" } } Nesse caso, o nome abreviado do canal \u00e9 pear2 , portanto, o nome do pacote PEAR2_HTTP_Request se torna pear-pear2/PEAR2_HTTP_Request . Nota: O reposit\u00f3rio pear requer v\u00e1rias requisi\u00e7\u00f5es por pacote, portanto, isso pode retardar consideravelmente o processo de instala\u00e7\u00e3o. Alias de Vendor Personalizado \u00b6 \u00c9 poss\u00edvel criar um alias de pacotes de canais PEAR com um nome de vendor personalizado. Exemplo: Suponha que voc\u00ea tenha um reposit\u00f3rio PEAR privado e deseje usar o Composer para incorporar depend\u00eancias de um VCS. Seu reposit\u00f3rio PEAR cont\u00e9m os seguintes pacotes: PacoteBase PacoteIntermediario , que depende do PacoteBase PacoteDeAltoNivel1 e PacoteDeAltoNivel2 , que dependem do PacoteIntermediario Sem um alias de vendor, o Composer usar\u00e1 o nome do canal PEAR como a parte do vendor no nome do pacote: pear-pear.foobar.repo/PacoteBase pear-pear.foobar.repo/PacoteIntermediario pear-pear.foobar.repo/PacoteDeAltoNivel1 pear-pear.foobar.repo/PacoteDeAltoNivel2 Suponha que posteriormente voc\u00ea deseje migrar seus pacotes PEAR para um esquema de nomenclatura e reposit\u00f3rio do Composer e adote o nome de vendor foobar . Os projetos que usam seus pacotes PEAR n\u00e3o veriam os pacotes atualizados, pois eles t\u00eam um nome de vendor diferente ( foobar/PacoteIntermediario vs. pear-pear.foobar.repo/PacoteIntermediario ). Ao especificar vendor-alias para o reposit\u00f3rio PEAR desde o in\u00edcio, voc\u00ea pode evitar esse cen\u00e1rio e proteger os nomes de seus pacotes de mudan\u00e7as futuras. Para ilustrar, o exemplo a seguir obteria os pacotes PacoteBase , PacoteDeAltoNivel1 e PacoteDeAltoNivel2 do seu reposit\u00f3rio PEAR e o PacoteIntermediario de um reposit\u00f3rio do GitHub: { \"repositories\": [ { \"type\": \"git\", \"url\": \"https://github.com/foobar/intermediario.git\" }, { \"type\": \"pear\", \"url\": \"http://pear.foobar.repo\", \"vendor-alias\": \"foobar\" } ], \"require\": { \"foobar/PacoteDeAltoNivel1\": \"*\", \"foobar/PacoteDeAltoNivel2\": \"*\" } } Package \u00b6 Se voc\u00ea deseja usar um projeto que n\u00e3o oferece suporte ao Composer por qualquer um dos meios acima, voc\u00ea mesmo ainda pode definir o pacote usando um reposit\u00f3rio package . Basicamente, voc\u00ea define as mesmas informa\u00e7\u00f5es inclu\u00eddas no packages.json do reposit\u00f3rio composer , mas apenas para um \u00fanico pacote. Novamente, os campos m\u00ednimos necess\u00e1rios s\u00e3o name , version e dist ou source . Aqui est\u00e1 um exemplo para o mecanismo de template Smarty: { \"repositories\": [ { \"type\": \"package\", \"package\": { \"name\": \"smarty/smarty\", \"version\": \"3.1.7\", \"dist\": { \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\", \"type\": \"zip\" }, \"source\": { \"url\": \"http://smarty-php.googlecode.com/svn/\", \"type\": \"svn\", \"reference\": \"tags/Smarty_3_1_7/distribution/\" }, \"autoload\": { \"classmap\": [\"libs/\"] } } } ], \"require\": { \"smarty/smarty\": \"3.1.*\" } } Normalmente, voc\u00ea n\u00e3o incluiria a parte source , pois realmente n\u00e3o precisa dela. Nota : Esse tipo de reposit\u00f3rio possui algumas limita\u00e7\u00f5es e deve ser evitado sempre que poss\u00edvel: O Composer n\u00e3o atualizar\u00e1 o pacote, a menos que voc\u00ea altere o campo version . O Composer n\u00e3o atualizar\u00e1 as refer\u00eancias dos commits, portanto, se voc\u00ea usar master como refer\u00eancia, ter\u00e1 que excluir o pacote para for\u00e7ar uma atualiza\u00e7\u00e3o e precisar\u00e1 lidar com um arquivo lock inst\u00e1vel. A chave package em um reposit\u00f3rio package pode ser definida como um array para definir v\u00e1rias vers\u00f5es de um pacote: { \"repositories\": [ { \"type\": \"package\", \"package\": [ { \"name\": \"foo/bar\", \"version\": \"1.0.0\", ... }, { \"name\": \"foo/bar\", \"version\": \"2.0.0\", ... } ] } ] } Hospedando Seu Pr\u00f3prio Reposit\u00f3rio \u00b6 Embora voc\u00ea provavelmente deseje colocar seus pacotes no Packagist na maioria das vezes, existem alguns casos de uso para hospedar seu pr\u00f3prio reposit\u00f3rio. Pacotes de empresas privadas: Se voc\u00ea faz parte de uma empresa que usa o Composer para seus pacotes internamente, conv\u00e9m manter esses pacotes privados. Ecossistema separado: Se voc\u00ea tem um projeto que possui seu pr\u00f3prio ecossistema e os pacotes n\u00e3o s\u00e3o realmente reutiliz\u00e1veis pela imensa comunidade PHP, conv\u00e9m mant\u00ea-los separados do Packagist. Um exemplo disso seriam os plugins do WordPress. Para hospedar seus pr\u00f3prios pacotes, \u00e9 recomendado o tipo de reposit\u00f3rio nativo composer , que oferece o melhor desempenho. Existem algumas ferramentas que podem te ajudar a criar um reposit\u00f3rio composer . Packagist Privado \u00b6 Packagist Privado \u00e9 uma aplica\u00e7\u00e3o hospedada ou com hospedagem pr\u00f3pria que fornece hospedagem de pacotes privados, al\u00e9m do espelhamento do GitHub, Packagist.org e outros reposit\u00f3rios de pacotes. Visite Packagist.com para obter mais informa\u00e7\u00f5es. Satis \u00b6 Satis \u00e9 um gerador de reposit\u00f3rios composer est\u00e1ticos. Parece um pouco com uma vers\u00e3o ultra leve e est\u00e1tica do Packagist, baseada em arquivos. Voc\u00ea fornece a ele um composer.json contendo reposit\u00f3rios, geralmente VCS, e defini\u00e7\u00f5es de reposit\u00f3rios de pacotes. Ele buscar\u00e1 todos os pacotes que est\u00e3o em require e far\u00e1 o dump de um packages.json , que \u00e9 o seu reposit\u00f3rio composer . Verifique o reposit\u00f3rio do Satis no GitHub e o artigo sobre o Satis para obter mais informa\u00e7\u00f5es. Artifact \u00b6 Existem alguns casos em que n\u00e3o \u00e9 poss\u00edvel ter online nenhum dos tipos de reposit\u00f3rio mencionados anteriormente, nem mesmo o VCS. Um exemplo t\u00edpico pode ser a troca de bibliotecas entre organiza\u00e7\u00f5es atrav\u00e9s de artefatos constru\u00eddos. Claro, na maioria das vezes eles s\u00e3o privados. Para simplificar a manuten\u00e7\u00e3o, pode-se simplesmente usar um reposit\u00f3rio do tipo artifact com um diret\u00f3rio contendo arquivos zip desses pacotes privados: { \"repositories\": [ { \"type\": \"artifact\", \"url\": \"caminho/para/o/diretorio/com/zips/\" } ], \"require\": { \"vendor-privado-um/core\": \"15.6.2\", \"vendor-privado-dois/connectivity\": \"*\", \"acme-corp/parser\": \"10.3.5\" } } Cada artefato zip \u00e9 um arquivo zip com um composer.json no diret\u00f3rio raiz: unzip -l acme-corp-parser-10.3.5.zip composer.json ... Se houver dois arquivos com vers\u00f5es diferentes de um pacote, eles ser\u00e3o importados. Quando um arquivo com uma vers\u00e3o mais recente for adicionado no diret\u00f3rio de artefatos e voc\u00ea executar update , essa vers\u00e3o tamb\u00e9m ser\u00e1 importada e o Composer atualizar\u00e1 para a vers\u00e3o mais recente. Path \u00b6 Al\u00e9m do reposit\u00f3rio artifact , \u00e9 poss\u00edvel usar o reposit\u00f3rio path , que permite depender de um diret\u00f3rio local, absoluto ou relativo. Isso pode ser especialmente \u00fatil ao lidar com reposit\u00f3rios monol\u00edticos. Por exemplo, se voc\u00ea possui a seguinte estrutura de diret\u00f3rios no seu reposit\u00f3rio: apps \u2514\u2500\u2500 minha-aplicacao \u2514\u2500\u2500 composer.json pacotes \u2514\u2500\u2500 meu-pacote \u2514\u2500\u2500 composer.json Ent\u00e3o, para adicionar o pacote meu/pacote como uma depend\u00eancia, no arquivo apps/minha-aplicacao/composer.json , voc\u00ea pode usar a seguinte configura\u00e7\u00e3o: { \"repositories\": [ { \"type\": \"path\", \"url\": \"../../pacotes/meu-pacote\" } ], \"require\": { \"meu/pacote\": \"*\" } } Se o pacote for um reposit\u00f3rio VCS local, a vers\u00e3o poder\u00e1 ser inferida a partir do branch ou tag do qual foi feito o checkout. Caso contr\u00e1rio, a vers\u00e3o dever\u00e1 ser explicitamente definida no arquivo composer.json do pacote. Se a vers\u00e3o n\u00e3o puder ser resolvida por esses meios, presume-se que seja dev-master . Se poss\u00edvel, ser\u00e1 criado um link simb\u00f3lico do pacote local; nesse caso a sa\u00edda no console exibir\u00e1 Symlinking from ../../pacotes/meu-pacote . Se a cria\u00e7\u00e3o do link simb\u00f3lico n\u00e3o for poss\u00edvel, o pacote ser\u00e1 copiado. Nesse caso, o console exibir\u00e1 Mirrored from ../../pacotes/meu-pacote . Em vez da estrat\u00e9gia de fallback padr\u00e3o, voc\u00ea pode for\u00e7ar o uso do link simb\u00f3lico com a op\u00e7\u00e3o \"symlink\": true ou o espelhamento com a op\u00e7\u00e3o \"symlink\": false . For\u00e7ar o espelhamento pode ser \u00fatil ao implantar ou gerar pacotes a partir de um reposit\u00f3rio monol\u00edtico. Nota: No Windows, os links simb\u00f3licos de diret\u00f3rio s\u00e3o implementados usando jun\u00e7\u00f5es NTFS porque elas podem ser criadas por usu\u00e1rios n\u00e3o administradores. O espelhamento sempre ser\u00e1 usado nas vers\u00f5es abaixo do Windows 7 ou se proc_open estiver desabilitado. { \"repositories\": [ { \"type\": \"path\", \"url\": \"../../pacotes/meu-pacote\", \"options\": { \"symlink\": false } } ] } O til no in\u00edcio dos caminhos \u00e9 expandido para a pasta inicial do usu\u00e1rio atual e as vari\u00e1veis de ambiente s\u00e3o processadas usando as nota\u00e7\u00f5es do Windows e Linux/Mac. Por exemplo, ~/git/meu-pacote automaticamente carregar\u00e1 o clone de meu-pacote de /home/<usuario>/git/meu-pacote , equivalente a $HOME/git/meu-pacote ou %USERPROFILE%/git/meu-pacote . Nota: Caminhos de reposit\u00f3rios tamb\u00e9m podem conter curingas como * e ? . Para mais detalhes, consulte a fun\u00e7\u00e3o glob do PHP . Desabilitando o Packagist.org \u00b6 Voc\u00ea pode desabilitar o reposit\u00f3rio padr\u00e3o Packagist.org adicionando isto ao seu composer.json : { \"repositories\": [ { \"packagist.org\": false } ] } Voc\u00ea pode desabilitar o Packagist.org globalmente usando a flag de configura\u00e7\u00e3o global: composer config -g repo.packagist false","title":"Reposit\u00f3rios"},{"location":"repositorios.html#repositorios","text":"Este cap\u00edtulo explicar\u00e1 o conceito de pacotes e reposit\u00f3rios, que tipos de reposit\u00f3rios est\u00e3o dispon\u00edveis e como eles funcionam.","title":"Reposit\u00f3rios"},{"location":"repositorios.html#conceitos","text":"Antes de examinarmos os diferentes tipos de reposit\u00f3rios existentes, precisamos entender alguns dos conceitos b\u00e1sicos sobre os quais o Composer \u00e9 constru\u00eddo.","title":"Conceitos"},{"location":"repositorios.html#pacote","text":"O Composer \u00e9 um gerenciador de depend\u00eancias. Ele instala pacotes localmente. Um pacote \u00e9 essencialmente um diret\u00f3rio que cont\u00e9m alguma coisa. Nesse caso, c\u00f3digo PHP, mas em teoria poderia ser qualquer coisa. E ele cont\u00e9m uma descri\u00e7\u00e3o do pacote que possui um nome e uma vers\u00e3o. O nome e a vers\u00e3o s\u00e3o usados para identificar o pacote. De fato, internamente o Composer v\u00ea cada vers\u00e3o como um pacote separado. Embora essa distin\u00e7\u00e3o n\u00e3o importe quando voc\u00ea estiver usando o Composer, ela \u00e9 muito importante quando voc\u00ea quiser alterar o pacote. Al\u00e9m do nome e da vers\u00e3o, existem metadados \u00fateis. A informa\u00e7\u00e3o mais relevante para a instala\u00e7\u00e3o \u00e9 a defini\u00e7\u00e3o da fonte, que descreve onde obter o conte\u00fado do pacote. Os dados do pacote apontam para o conte\u00fado do pacote. E h\u00e1 duas op\u00e7\u00f5es aqui: dist e source . Dist: \u00e9 uma vers\u00e3o empacotada dos dados do pacote. Geralmente \u00e9 uma vers\u00e3o publicada, normalmente \u00e9 uma vers\u00e3o est\u00e1vel. Source: \u00e9 usada para desenvolvimento. Ela geralmente se origina de um reposit\u00f3rio de c\u00f3digo-fonte, como o git. Voc\u00ea pode obter o c\u00f3digo-fonte quando quiser modificar o pacote baixado. Os pacotes podem fornecer uma dessas ou at\u00e9 mesmo as duas. Dependendo de certos fatores, como as op\u00e7\u00f5es fornecidas pela pessoa e a estabilidade do pacote, uma delas ter\u00e1 a prefer\u00eancia.","title":"Pacote"},{"location":"repositorios.html#repositorio","text":"Um reposit\u00f3rio \u00e9 uma fonte de pacotes. \u00c9 uma lista de pacotes/vers\u00f5es. O Composer procurar\u00e1 em todos os seus reposit\u00f3rios para encontrar os pacotes que seu projeto exige. Por padr\u00e3o, apenas o reposit\u00f3rio Packagist est\u00e1 registrado no Composer. Voc\u00ea pode adicionar mais reposit\u00f3rios ao seu projeto declarando-os no composer.json . Os reposit\u00f3rios est\u00e3o dispon\u00edveis apenas para o pacote raiz e os reposit\u00f3rios definidos em suas depend\u00eancias n\u00e3o ser\u00e3o carregados. Leia a FAQ se quiser saber o porqu\u00ea.","title":"Reposit\u00f3rio"},{"location":"repositorios.html#tipos","text":"","title":"Tipos"},{"location":"repositorios.html#composer","text":"O principal tipo de reposit\u00f3rio \u00e9 o reposit\u00f3rio composer . Ele usa um \u00fanico arquivo packages.json que cont\u00e9m todos os metadados dos pacotes. Este tamb\u00e9m \u00e9 o tipo de reposit\u00f3rio que o Packagist usa. Para referenciar um reposit\u00f3rio composer , forne\u00e7a o caminho antes do arquivo packages.json . No caso do Packagist, esse arquivo est\u00e1 localizado em /packages.json , portanto, a URL do reposit\u00f3rio seria repo.packagist.org . Para exemplo.org.br/packages.json , a URL do reposit\u00f3rio seria exemplo.org.br .","title":"composer"},{"location":"repositorios.html#packages","text":"O \u00fanico campo obrigat\u00f3rio \u00e9 packages . A estrutura JSON \u00e9 a seguinte: { \"packages\": { \"vendor/nome-pacote\": { \"dev-master\": { @composer.json }, \"1.0.x-dev\": { @composer.json }, \"0.0.1\": { @composer.json }, \"1.0.0\": { @composer.json } } } } O marcador @composer.json seria o conte\u00fado do composer.json dessa vers\u00e3o do pacote, incluindo no m\u00ednimo: name version dist ou source Aqui est\u00e1 uma defini\u00e7\u00e3o m\u00ednima de pacote: { \"name\": \"smarty/smarty\", \"version\": \"3.1.7\", \"dist\": { \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\", \"type\": \"zip\" } } Ela pode incluir qualquer um dos outros campos especificados no esquema .","title":"packages"},{"location":"repositorios.html#notify-batch","text":"O campo notify-batch permite especificar uma URL que ser\u00e1 chamada sempre que algu\u00e9m instalar um pacote. A URL pode ser um caminho absoluto (que usar\u00e1 o mesmo dom\u00ednio que o reposit\u00f3rio) ou uma URL completamente qualificada. Um exemplo de valor: { \"notify-batch\": \"/downloads/\" } Para exemplo.org.br/packages.json contendo um pacote monolog/monolog , isso enviaria uma requisi\u00e7\u00e3o POST para exemplo.org.br/downloads/ com o seguinte corpo da requisi\u00e7\u00e3o JSON: { \"downloads\": [ {\"name\": \"monolog/monolog\", \"version\": \"1.2.1.0\"} ] } O campo version conter\u00e1 a representa\u00e7\u00e3o normalizada do n\u00famero da vers\u00e3o. Este campo \u00e9 opcional.","title":"notify-batch"},{"location":"repositorios.html#provider-includes-e-providers-url","text":"O campo provider-includes permite listar um conjunto de arquivos que listam nomes de pacotes fornecidos por este reposit\u00f3rio. Nesse caso, o hash deve ser um sha256 dos arquivos. O campo providers-url descreve como os arquivos do provedor s\u00e3o encontrados no servidor. \u00c9 um caminho absoluto da raiz do reposit\u00f3rio. Deve conter os placeholders %package% e %hash% . Um exemplo: { \"provider-includes\": { \"providers-a.json\": { \"sha256\": \"f5b4bc0b354108ef08614e569c1ed01a2782e67641744864a74e788982886f4c\" }, \"providers-b.json\": { \"sha256\": \"b38372163fac0573053536f5b8ef11b86f804ea8b016d239e706191203f6efac\" } }, \"providers-url\": \"/p/%package%$%hash%.json\" } Esses arquivos cont\u00eam listas de nomes de pacotes e hashes para verificar a integridade do arquivo, por exemplo: { \"providers\": { \"acme/foo\": { \"sha256\": \"38968de1305c2e17f4de33aea164515bc787c42c7e2d6e25948539a14268bb82\" }, \"acme/bar\": { \"sha256\": \"4dd24c930bd6e1103251306d6336ac813b563a220d9ca14f4743c032fb047233\" } } } O arquivo acima declara que acme/foo e acme/bar podem ser encontrados neste reposit\u00f3rio, carregando o arquivo referenciado por providers-url , substituindo %package% pelo nome do pacote com o nome do vendor e %hash% pelo campo sha256 . Esses arquivos cont\u00eam defini\u00e7\u00f5es de pacotes, conforme descrito acima . Estes campos s\u00e3o opcionais. Voc\u00ea provavelmente n\u00e3o precisa deles para seu pr\u00f3prio reposit\u00f3rio personalizado.","title":"provider-includes e providers-url"},{"location":"repositorios.html#opcoes-de-stream","text":"O arquivo packages.json \u00e9 carregado usando um stream PHP. Voc\u00ea pode definir op\u00e7\u00f5es extras para esse stream usando o par\u00e2metro options . Voc\u00ea pode definir qualquer op\u00e7\u00e3o de contexto de stream PHP v\u00e1lida. Consulte Op\u00e7\u00f5es e par\u00e2metros de contexto para obter mais informa\u00e7\u00f5es.","title":"Op\u00e7\u00f5es de Stream"},{"location":"repositorios.html#vcs","text":"VCS significa sistema de controle de vers\u00e3o. Isso inclui sistemas de versionamento como git, svn, fossil ou hg. O Composer possui um tipo de reposit\u00f3rio para instalar pacotes desses sistemas.","title":"VCS"},{"location":"repositorios.html#carregando-um-pacote-de-um-repositorio-vcs","text":"Existem alguns casos de uso para isso. O mais comum \u00e9 manter seu pr\u00f3prio fork de uma biblioteca de terceiros. Se voc\u00ea estiver usando uma determinada biblioteca para seu projeto e decidir alterar algo na biblioteca, desejar\u00e1 que seu projeto use a vers\u00e3o alterada. Se a biblioteca estiver no GitHub (esse \u00e9 o caso na maioria das vezes), voc\u00ea pode simplesmente fazer o fork dela l\u00e1 e fazer o push das suas altera\u00e7\u00f5es para o seu fork. Depois disso, voc\u00ea atualiza o composer.json do projeto. Tudo que voc\u00ea precisa fazer \u00e9 adicionar seu fork como um reposit\u00f3rio e atualizar a restri\u00e7\u00e3o de vers\u00e3o para apontar para seu branch personalizado. No composer.json , voc\u00ea deve prefixar o nome do seu branch personalizado com dev- . Para conven\u00e7\u00f5es de nomenclatura de restri\u00e7\u00f5es de vers\u00e3o, consulte Bibliotecas para obter mais informa\u00e7\u00f5es. Exemplo assumindo que voc\u00ea alterou o monolog para corrigir um erro no branch bugfix : { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://github.com/igorw/monolog\" } ], \"require\": { \"monolog/monolog\": \"dev-bugfix\" } } Quando voc\u00ea executar php composer.phar update , voc\u00ea deve obter sua vers\u00e3o modificada do monolog/monolog em vez da vers\u00e3o do Packagist. Observe que voc\u00ea n\u00e3o deve renomear o pacote, a menos que realmente pretenda fazer o fork do projeto a longo prazo e se afastar completamente do pacote original. O Composer selecionar\u00e1 seu pacote corretamente no lugar do original, j\u00e1 que o reposit\u00f3rio personalizado tem prioridade sobre o Packagist. Se voc\u00ea deseja renomear o pacote, deve faz\u00ea-lo no branch padr\u00e3o (geralmente master ) e n\u00e3o no feature branch, pois o nome do pacote \u00e9 obtido do branch padr\u00e3o. Observe tamb\u00e9m que a substitui\u00e7\u00e3o n\u00e3o funcionar\u00e1 se voc\u00ea alterar a propriedade name no arquivo composer.json do reposit\u00f3rio criado pelo fork, pois ela precisa corresponder \u00e0 original para a substitui\u00e7\u00e3o funcionar. Se outra depend\u00eancia depender do pacote criado pelo fork, \u00e9 poss\u00edvel adicionar um alias em linha para que ela corresponda a uma restri\u00e7\u00e3o que, de outra forma, ela n\u00e3o iria. Para obter mais informa\u00e7\u00f5es, consulte o artigo sobre aliases .","title":"Carregando um Pacote de um Reposit\u00f3rio VCS"},{"location":"repositorios.html#usando-repositorios-privados","text":"Exatamente a mesma solu\u00e7\u00e3o permite que voc\u00ea trabalhe com seus reposit\u00f3rios privados no GitHub e BitBucket: { \"require\": { \"vendor/meu-repo-privado\": \"dev-master\" }, \"repositories\": [ { \"type\": \"vcs\", \"url\": \"git@bitbucket.org:vendor/meu-repo-privado.git\" } ] } O \u00fanico requisito \u00e9 a instala\u00e7\u00e3o de chaves SSH para um cliente git.","title":"Usando Reposit\u00f3rios Privados"},{"location":"repositorios.html#alternativas-ao-git","text":"Git n\u00e3o \u00e9 o \u00fanico sistema de controle de vers\u00e3o suportado pelo reposit\u00f3rio VCS. Os seguintes s\u00e3o suportados: Git: git-scm.com Subversion: subversion.apache.org Mercurial: mercurial-scm.org Fossil : fossil-scm.org Para obter pacotes desses sistemas, voc\u00ea precisa ter seus respectivos clientes instalados. Isso pode ser inconveniente. E por esse motivo, h\u00e1 suporte especial ao GitHub e BitBucket que usa as APIs fornecidas por esses sites para buscar os pacotes sem precisar instalar o sistema de controle de vers\u00e3o. O reposit\u00f3rio VCS fornece op\u00e7\u00f5es dist para eles que buscam os pacotes como arquivos zip. GitHub: github.com (Git) BitBucket: bitbucket.org (Git e Mercurial) O driver VCS a ser usado \u00e9 detectado automaticamente com base na URL. Entretanto, se voc\u00ea precisar especificar um por qualquer motivo, poder\u00e1 usar git-bitbucket , hg-bitbucket , github , gitlab , perforce , fossil , git , svn ou hg como o tipo de reposit\u00f3rio em vez de vcs . Se voc\u00ea definir a chave no-api como true em um reposit\u00f3rio github , clonar\u00e1 o reposit\u00f3rio como faria com qualquer outro reposit\u00f3rio git, em vez de usar a API do GitHub. Por\u00e9m, diferente de usar o driver git diretamente, o Composer ainda tentar\u00e1 usar os arquivos zip do GitHub. Note que: Para permitir que o Composer escolha qual driver usar , o tipo de reposit\u00f3rio precisa ser definido como vcs ; Se voc\u00ea j\u00e1 usou um reposit\u00f3rio privado , isso significa que o Composer deve ter clonado ele no cache. Se voc\u00ea deseja instalar o mesmo pacote com drivers, lembre-se de executar o comando composer clearcache seguido do comando composer update para atualizar o cache do Composer e instalar o pacote a partir de dist .","title":"Alternativas ao Git"},{"location":"repositorios.html#configuracao-do-driver-do-bitbucket","text":"O driver do BitBucket usa OAuth para acessar seus reposit\u00f3rios privados por meio das APIs REST do BitBucket e voc\u00ea precisar\u00e1 criar um consumidor OAuth para usar o driver, consulte a Documenta\u00e7\u00e3o da Atlassian . Voc\u00ea precisar\u00e1 preencher a URL de callback com algo para satisfazer o BitBucket, mas o endere\u00e7o n\u00e3o precisa ir a lugar algum e n\u00e3o \u00e9 usado pelo Composer. Depois de criar um consumidor OAuth no painel de controle do BitBucket, voc\u00ea precisa configurar o arquivo auth.json com as credenciais desta forma (mais informa\u00e7\u00f5es aqui ): { \"bitbucket-oauth\": { \"bitbucket.org\": { \"consumer-key\": \"minha-chave\", \"consumer-secret\": \"meu-segredo\" } } } Observe que o endpoint do reposit\u00f3rio precisa ser https em vez de git . Como alternativa, se voc\u00ea preferir n\u00e3o ter suas credenciais OAuth em seu sistema de arquivos, poder\u00e1 exportar o bloco bitbucket-oauth acima para a vari\u00e1vel de ambiente COMPOSER_AUTH .","title":"Configura\u00e7\u00e3o do Driver do BitBucket"},{"location":"repositorios.html#opcoes-do-subversion","text":"Como o Subversion n\u00e3o possui um conceito nativo de branches e tags, o Composer assume por padr\u00e3o que o c\u00f3digo est\u00e1 localizado em $url/trunk , $url/branches e $url/tags . Se seu reposit\u00f3rio tiver um layout diferente, voc\u00ea poder\u00e1 alterar esses valores. Por exemplo, se voc\u00ea usasse nomes com iniciais em mai\u00fasculas, poderia configurar o reposit\u00f3rio desta forma: { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"http://svn.exemplo.org.br/projeto-a/\", \"trunk-path\": \"Trunk\", \"branches-path\": \"Branches\", \"tags-path\": \"Tags\" } ] } Se voc\u00ea n\u00e3o tiver um diret\u00f3rio branches ou tags , poder\u00e1 desabilit\u00e1-los completamente definindo branches-path ou tags-path como false . Se o pacote estiver em um subdiret\u00f3rio, por exemplo, /trunk/foo/bar/composer.json e /tags/1.0/foo/bar/composer.json , voc\u00ea pode fazer o Composer acess\u00e1-lo definindo a op\u00e7\u00e3o package-path com o subdiret\u00f3rio, nesse exemplo seria \"package-path\": \"foo/bar/\" . Se voc\u00ea possui um reposit\u00f3rio Subversion privado, pode salvar as credenciais na se\u00e7\u00e3o http-basic da sua configura\u00e7\u00e3o (consulte Esquema ): { \"http-basic\": { \"svn.exemplo.org.br\": { \"username\": \"usuario\", \"password\": \"senha\" } } } Se o seu cliente Subversion estiver configurado para armazenar credenciais por padr\u00e3o, essas credenciais ser\u00e3o salvas para o usu\u00e1rio atual e as credenciais salvas anteriormente para esse servidor ser\u00e3o substitu\u00eddas. Voc\u00ea pode alterar esse comportamento definindo a op\u00e7\u00e3o svn-cache-credentials como false na configura\u00e7\u00e3o do seu reposit\u00f3rio: { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"http://svn.exemplo.org.br/projeto-a/\", \"svn-cache-credentials\": false } ] }","title":"Op\u00e7\u00f5es do Subversion"},{"location":"repositorios.html#pear","text":"\u00c9 poss\u00edvel instalar pacotes de qualquer canal PEAR usando o reposit\u00f3rio pear . O Composer prefixar\u00e1 todos os nomes de pacotes com pear-{NomeCanal}/ para evitar conflitos. Todos os pacotes tamb\u00e9m t\u00eam alias com o prefixo pear-{AliasCanal}/ . Exemplo usando pear2.php.net : { \"repositories\": [ { \"type\": \"pear\", \"url\": \"https://pear2.php.net\" } ], \"require\": { \"pear-pear2.php.net/PEAR2_Text_Markdown\": \"*\", \"pear-pear2/PEAR2_HTTP_Request\": \"*\" } } Nesse caso, o nome abreviado do canal \u00e9 pear2 , portanto, o nome do pacote PEAR2_HTTP_Request se torna pear-pear2/PEAR2_HTTP_Request . Nota: O reposit\u00f3rio pear requer v\u00e1rias requisi\u00e7\u00f5es por pacote, portanto, isso pode retardar consideravelmente o processo de instala\u00e7\u00e3o.","title":"PEAR"},{"location":"repositorios.html#alias-de-vendor-personalizado","text":"\u00c9 poss\u00edvel criar um alias de pacotes de canais PEAR com um nome de vendor personalizado. Exemplo: Suponha que voc\u00ea tenha um reposit\u00f3rio PEAR privado e deseje usar o Composer para incorporar depend\u00eancias de um VCS. Seu reposit\u00f3rio PEAR cont\u00e9m os seguintes pacotes: PacoteBase PacoteIntermediario , que depende do PacoteBase PacoteDeAltoNivel1 e PacoteDeAltoNivel2 , que dependem do PacoteIntermediario Sem um alias de vendor, o Composer usar\u00e1 o nome do canal PEAR como a parte do vendor no nome do pacote: pear-pear.foobar.repo/PacoteBase pear-pear.foobar.repo/PacoteIntermediario pear-pear.foobar.repo/PacoteDeAltoNivel1 pear-pear.foobar.repo/PacoteDeAltoNivel2 Suponha que posteriormente voc\u00ea deseje migrar seus pacotes PEAR para um esquema de nomenclatura e reposit\u00f3rio do Composer e adote o nome de vendor foobar . Os projetos que usam seus pacotes PEAR n\u00e3o veriam os pacotes atualizados, pois eles t\u00eam um nome de vendor diferente ( foobar/PacoteIntermediario vs. pear-pear.foobar.repo/PacoteIntermediario ). Ao especificar vendor-alias para o reposit\u00f3rio PEAR desde o in\u00edcio, voc\u00ea pode evitar esse cen\u00e1rio e proteger os nomes de seus pacotes de mudan\u00e7as futuras. Para ilustrar, o exemplo a seguir obteria os pacotes PacoteBase , PacoteDeAltoNivel1 e PacoteDeAltoNivel2 do seu reposit\u00f3rio PEAR e o PacoteIntermediario de um reposit\u00f3rio do GitHub: { \"repositories\": [ { \"type\": \"git\", \"url\": \"https://github.com/foobar/intermediario.git\" }, { \"type\": \"pear\", \"url\": \"http://pear.foobar.repo\", \"vendor-alias\": \"foobar\" } ], \"require\": { \"foobar/PacoteDeAltoNivel1\": \"*\", \"foobar/PacoteDeAltoNivel2\": \"*\" } }","title":"Alias de Vendor Personalizado"},{"location":"repositorios.html#package","text":"Se voc\u00ea deseja usar um projeto que n\u00e3o oferece suporte ao Composer por qualquer um dos meios acima, voc\u00ea mesmo ainda pode definir o pacote usando um reposit\u00f3rio package . Basicamente, voc\u00ea define as mesmas informa\u00e7\u00f5es inclu\u00eddas no packages.json do reposit\u00f3rio composer , mas apenas para um \u00fanico pacote. Novamente, os campos m\u00ednimos necess\u00e1rios s\u00e3o name , version e dist ou source . Aqui est\u00e1 um exemplo para o mecanismo de template Smarty: { \"repositories\": [ { \"type\": \"package\", \"package\": { \"name\": \"smarty/smarty\", \"version\": \"3.1.7\", \"dist\": { \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\", \"type\": \"zip\" }, \"source\": { \"url\": \"http://smarty-php.googlecode.com/svn/\", \"type\": \"svn\", \"reference\": \"tags/Smarty_3_1_7/distribution/\" }, \"autoload\": { \"classmap\": [\"libs/\"] } } } ], \"require\": { \"smarty/smarty\": \"3.1.*\" } } Normalmente, voc\u00ea n\u00e3o incluiria a parte source , pois realmente n\u00e3o precisa dela. Nota : Esse tipo de reposit\u00f3rio possui algumas limita\u00e7\u00f5es e deve ser evitado sempre que poss\u00edvel: O Composer n\u00e3o atualizar\u00e1 o pacote, a menos que voc\u00ea altere o campo version . O Composer n\u00e3o atualizar\u00e1 as refer\u00eancias dos commits, portanto, se voc\u00ea usar master como refer\u00eancia, ter\u00e1 que excluir o pacote para for\u00e7ar uma atualiza\u00e7\u00e3o e precisar\u00e1 lidar com um arquivo lock inst\u00e1vel. A chave package em um reposit\u00f3rio package pode ser definida como um array para definir v\u00e1rias vers\u00f5es de um pacote: { \"repositories\": [ { \"type\": \"package\", \"package\": [ { \"name\": \"foo/bar\", \"version\": \"1.0.0\", ... }, { \"name\": \"foo/bar\", \"version\": \"2.0.0\", ... } ] } ] }","title":"Package"},{"location":"repositorios.html#hospedando-seu-proprio-repositorio","text":"Embora voc\u00ea provavelmente deseje colocar seus pacotes no Packagist na maioria das vezes, existem alguns casos de uso para hospedar seu pr\u00f3prio reposit\u00f3rio. Pacotes de empresas privadas: Se voc\u00ea faz parte de uma empresa que usa o Composer para seus pacotes internamente, conv\u00e9m manter esses pacotes privados. Ecossistema separado: Se voc\u00ea tem um projeto que possui seu pr\u00f3prio ecossistema e os pacotes n\u00e3o s\u00e3o realmente reutiliz\u00e1veis pela imensa comunidade PHP, conv\u00e9m mant\u00ea-los separados do Packagist. Um exemplo disso seriam os plugins do WordPress. Para hospedar seus pr\u00f3prios pacotes, \u00e9 recomendado o tipo de reposit\u00f3rio nativo composer , que oferece o melhor desempenho. Existem algumas ferramentas que podem te ajudar a criar um reposit\u00f3rio composer .","title":"Hospedando Seu Pr\u00f3prio Reposit\u00f3rio"},{"location":"repositorios.html#packagist-privado","text":"Packagist Privado \u00e9 uma aplica\u00e7\u00e3o hospedada ou com hospedagem pr\u00f3pria que fornece hospedagem de pacotes privados, al\u00e9m do espelhamento do GitHub, Packagist.org e outros reposit\u00f3rios de pacotes. Visite Packagist.com para obter mais informa\u00e7\u00f5es.","title":"Packagist Privado"},{"location":"repositorios.html#satis","text":"Satis \u00e9 um gerador de reposit\u00f3rios composer est\u00e1ticos. Parece um pouco com uma vers\u00e3o ultra leve e est\u00e1tica do Packagist, baseada em arquivos. Voc\u00ea fornece a ele um composer.json contendo reposit\u00f3rios, geralmente VCS, e defini\u00e7\u00f5es de reposit\u00f3rios de pacotes. Ele buscar\u00e1 todos os pacotes que est\u00e3o em require e far\u00e1 o dump de um packages.json , que \u00e9 o seu reposit\u00f3rio composer . Verifique o reposit\u00f3rio do Satis no GitHub e o artigo sobre o Satis para obter mais informa\u00e7\u00f5es.","title":"Satis"},{"location":"repositorios.html#artifact","text":"Existem alguns casos em que n\u00e3o \u00e9 poss\u00edvel ter online nenhum dos tipos de reposit\u00f3rio mencionados anteriormente, nem mesmo o VCS. Um exemplo t\u00edpico pode ser a troca de bibliotecas entre organiza\u00e7\u00f5es atrav\u00e9s de artefatos constru\u00eddos. Claro, na maioria das vezes eles s\u00e3o privados. Para simplificar a manuten\u00e7\u00e3o, pode-se simplesmente usar um reposit\u00f3rio do tipo artifact com um diret\u00f3rio contendo arquivos zip desses pacotes privados: { \"repositories\": [ { \"type\": \"artifact\", \"url\": \"caminho/para/o/diretorio/com/zips/\" } ], \"require\": { \"vendor-privado-um/core\": \"15.6.2\", \"vendor-privado-dois/connectivity\": \"*\", \"acme-corp/parser\": \"10.3.5\" } } Cada artefato zip \u00e9 um arquivo zip com um composer.json no diret\u00f3rio raiz: unzip -l acme-corp-parser-10.3.5.zip composer.json ... Se houver dois arquivos com vers\u00f5es diferentes de um pacote, eles ser\u00e3o importados. Quando um arquivo com uma vers\u00e3o mais recente for adicionado no diret\u00f3rio de artefatos e voc\u00ea executar update , essa vers\u00e3o tamb\u00e9m ser\u00e1 importada e o Composer atualizar\u00e1 para a vers\u00e3o mais recente.","title":"Artifact"},{"location":"repositorios.html#path","text":"Al\u00e9m do reposit\u00f3rio artifact , \u00e9 poss\u00edvel usar o reposit\u00f3rio path , que permite depender de um diret\u00f3rio local, absoluto ou relativo. Isso pode ser especialmente \u00fatil ao lidar com reposit\u00f3rios monol\u00edticos. Por exemplo, se voc\u00ea possui a seguinte estrutura de diret\u00f3rios no seu reposit\u00f3rio: apps \u2514\u2500\u2500 minha-aplicacao \u2514\u2500\u2500 composer.json pacotes \u2514\u2500\u2500 meu-pacote \u2514\u2500\u2500 composer.json Ent\u00e3o, para adicionar o pacote meu/pacote como uma depend\u00eancia, no arquivo apps/minha-aplicacao/composer.json , voc\u00ea pode usar a seguinte configura\u00e7\u00e3o: { \"repositories\": [ { \"type\": \"path\", \"url\": \"../../pacotes/meu-pacote\" } ], \"require\": { \"meu/pacote\": \"*\" } } Se o pacote for um reposit\u00f3rio VCS local, a vers\u00e3o poder\u00e1 ser inferida a partir do branch ou tag do qual foi feito o checkout. Caso contr\u00e1rio, a vers\u00e3o dever\u00e1 ser explicitamente definida no arquivo composer.json do pacote. Se a vers\u00e3o n\u00e3o puder ser resolvida por esses meios, presume-se que seja dev-master . Se poss\u00edvel, ser\u00e1 criado um link simb\u00f3lico do pacote local; nesse caso a sa\u00edda no console exibir\u00e1 Symlinking from ../../pacotes/meu-pacote . Se a cria\u00e7\u00e3o do link simb\u00f3lico n\u00e3o for poss\u00edvel, o pacote ser\u00e1 copiado. Nesse caso, o console exibir\u00e1 Mirrored from ../../pacotes/meu-pacote . Em vez da estrat\u00e9gia de fallback padr\u00e3o, voc\u00ea pode for\u00e7ar o uso do link simb\u00f3lico com a op\u00e7\u00e3o \"symlink\": true ou o espelhamento com a op\u00e7\u00e3o \"symlink\": false . For\u00e7ar o espelhamento pode ser \u00fatil ao implantar ou gerar pacotes a partir de um reposit\u00f3rio monol\u00edtico. Nota: No Windows, os links simb\u00f3licos de diret\u00f3rio s\u00e3o implementados usando jun\u00e7\u00f5es NTFS porque elas podem ser criadas por usu\u00e1rios n\u00e3o administradores. O espelhamento sempre ser\u00e1 usado nas vers\u00f5es abaixo do Windows 7 ou se proc_open estiver desabilitado. { \"repositories\": [ { \"type\": \"path\", \"url\": \"../../pacotes/meu-pacote\", \"options\": { \"symlink\": false } } ] } O til no in\u00edcio dos caminhos \u00e9 expandido para a pasta inicial do usu\u00e1rio atual e as vari\u00e1veis de ambiente s\u00e3o processadas usando as nota\u00e7\u00f5es do Windows e Linux/Mac. Por exemplo, ~/git/meu-pacote automaticamente carregar\u00e1 o clone de meu-pacote de /home/<usuario>/git/meu-pacote , equivalente a $HOME/git/meu-pacote ou %USERPROFILE%/git/meu-pacote . Nota: Caminhos de reposit\u00f3rios tamb\u00e9m podem conter curingas como * e ? . Para mais detalhes, consulte a fun\u00e7\u00e3o glob do PHP .","title":"Path"},{"location":"repositorios.html#desabilitando-o-packagistorg","text":"Voc\u00ea pode desabilitar o reposit\u00f3rio padr\u00e3o Packagist.org adicionando isto ao seu composer.json : { \"repositories\": [ { \"packagist.org\": false } ] } Voc\u00ea pode desabilitar o Packagist.org globalmente usando a flag de configura\u00e7\u00e3o global: composer config -g repo.packagist false","title":"Desabilitando o Packagist.org"},{"location":"uso-basico.html","text":"Uso B\u00e1sico \u00b6 Introdu\u00e7\u00e3o \u00b6 Para nossa introdu\u00e7\u00e3o ao uso b\u00e1sico, instalaremos o monolog/monolog , uma biblioteca de registro de log. Se voc\u00ea ainda n\u00e3o instalou o Composer, consulte o cap\u00edtulo Introdu\u00e7\u00e3o . Nota: por uma quest\u00e3o de simplicidade, essa introdu\u00e7\u00e3o assumir\u00e1 que voc\u00ea executou uma instala\u00e7\u00e3o local do Composer. composer.json : Configura\u00e7\u00e3o do Projeto \u00b6 Para come\u00e7ar a usar o Composer em seu projeto, tudo o que voc\u00ea precisa \u00e9 de um arquivo composer.json . Esse arquivo descreve as depend\u00eancias do seu projeto e tamb\u00e9m pode conter outros metadados. A Chave require \u00b6 A primeira (e muitas vezes a \u00fanica) coisa especificada no composer.json \u00e9 a chave require . Voc\u00ea est\u00e1 simplesmente dizendo ao Composer de quais pacotes seu projeto depende. { \"require\": { \"monolog/monolog\": \"1.0.*\" } } Como voc\u00ea pode ver, require recebe um objeto que mapeia nomes de pacotes (por exemplo, monolog/monolog ) para restri\u00e7\u00f5es de vers\u00e3o (por exemplo, 1.0.* ). O Composer usa essas informa\u00e7\u00f5es para procurar o conjunto correto de arquivos nos \"reposit\u00f3rios\" de pacotes que voc\u00ea registra usando a chave repositories ou no Packagist, o reposit\u00f3rio de pacotes padr\u00e3o. No exemplo acima, como nenhum outro reposit\u00f3rio foi registrado no arquivo composer.json , sup\u00f5e-se que o pacote monolog/monolog esteja registrado no Packagist. (Veja mais sobre o Packagist abaixo ou leia mais sobre reposit\u00f3rios aqui ). Nomes de Pacotes \u00b6 O nome do pacote consiste no nome do vendor e o nome do projeto. Geralmente, eles ser\u00e3o id\u00eanticos - o nome do vendor existe apenas para prevenir conflitos de nomes. Por exemplo, isso permite que duas pessoas diferentes criem uma biblioteca chamada json . Uma pode ser chamada igorw/json enquanto a outra pode ser seldaek/json . Leia mais sobre a publica\u00e7\u00e3o e a nomea\u00e7\u00e3o de pacotes aqui . (Note que voc\u00ea tamb\u00e9m pode especificar \"pacotes de plataforma\" como depend\u00eancias, permitindo que voc\u00ea exija determinadas vers\u00f5es do software do servidor. Consulte os pacotes de plataforma abaixo.) Restri\u00e7\u00f5es de Vers\u00e3o de Pacote \u00b6 Em nosso exemplo, estamos solicitando o pacote Monolog com a restri\u00e7\u00e3o de vers\u00e3o 1.0.* . Isso significa qualquer vers\u00e3o no branch de desenvolvimento 1.0 ou qualquer vers\u00e3o maior ou igual a 1.0 e menor que 1.1 ( >=1.0 <1.1 ). Leia o artigo sobre vers\u00f5es para obter informa\u00e7\u00f5es mais detalhadas sobre vers\u00f5es, como as vers\u00f5es se relacionam entre si e sobre as restri\u00e7\u00f5es de vers\u00e3o. Como o Composer baixa os arquivos corretos? Quando voc\u00ea especifica uma depend\u00eancia no composer.json , o Composer primeiro pega o nome do pacote solicitado e o procura em qualquer reposit\u00f3rio registrado usando a chave repositories . Se voc\u00ea n\u00e3o registrou nenhum reposit\u00f3rio extra ou se ele n\u00e3o encontra um pacote com esse nome nos reposit\u00f3rios que voc\u00ea especificou, ele volta ao Packagist (mais abaixo ). Quando o Composer encontra o pacote certo, no Packagist ou em um reposit\u00f3rio que voc\u00ea especificou, ele usa os recursos de vers\u00e3o do VCS do pacote (ou seja, branches e tags) para tentar encontrar a melhor correspond\u00eancia para a restri\u00e7\u00e3o de vers\u00e3o que voc\u00ea especificou. Leia sobre vers\u00f5es e resolu\u00e7\u00e3o de pacotes no artigo sobre vers\u00f5es . Nota: Se voc\u00ea est\u00e1 tentando requisitar um pacote mas o Composer gera um erro referente \u00e0 estabilidade do pacote, a vers\u00e3o que voc\u00ea especificou pode n\u00e3o atender aos seus requisitos m\u00ednimos de estabilidade padr\u00e3o. Por padr\u00e3o, apenas vers\u00f5es est\u00e1veis s\u00e3o levadas em considera\u00e7\u00e3o ao procurar vers\u00f5es de pacotes v\u00e1lidas no seu VCS. Voc\u00ea pode se deparar com isso se estiver tentando requisitar as vers\u00f5es dev, alpha, beta ou RC de um pacote. Leia mais sobre flags de estabilidade e a chave minimum-stability na p\u00e1gina do esquema . Instalando Depend\u00eancias \u00b6 Para instalar as depend\u00eancias definidas para o seu projeto, execute o comando install . php composer.phar install Quando voc\u00ea executa esse comando, uma destas duas coisas pode acontecer: Instalando sem o composer.lock \u00b6 Se voc\u00ea nunca executou o comando antes e tamb\u00e9m n\u00e3o h\u00e1 nenhum composer.lock presente, o Composer simplesmente resolve todas as depend\u00eancias listadas no seu arquivo composer.json e baixa a vers\u00e3o mais recente dos arquivos no diret\u00f3rio vendor do seu projeto. (O diret\u00f3rio vendor \u00e9 o local convencional para todos os c\u00f3digos de terceiros em um projeto). Em nosso exemplo acima, voc\u00ea acabaria com os arquivos-fonte do Monolog em vendor/monolog/monolog/ . Se o Monolog listasse quaisquer depend\u00eancias, elas tamb\u00e9m estariam em pastas em vendor/ . Dica: Se voc\u00ea estiver usando o git no seu projeto, provavelmente desejar\u00e1 adicionar vendor ao .gitignore . Voc\u00ea realmente n\u00e3o deseja adicionar todo esse c\u00f3digo de terceiros ao seu reposit\u00f3rio versionado. Quando o Composer termina a instala\u00e7\u00e3o, ele grava todos os pacotes e as vers\u00f5es exatas deles que foram baixadas no arquivo composer.lock , fixando o projeto naquelas vers\u00f5es espec\u00edficas. Voc\u00ea deve fazer o commit do arquivo composer.lock no reposit\u00f3rio do projeto, para que todas as pessoas que trabalham no projeto usem exatamente as mesmas vers\u00f5es das depend\u00eancias (mais abaixo). Instalando com o composer.lock \u00b6 Isso nos leva ao segundo cen\u00e1rio. Se j\u00e1 existe um arquivo composer.lock e um arquivo composer.json quando voc\u00ea executa composer install , significa que voc\u00ea executou o comando install antes ou outra pessoa no projeto executou o comando install e fez o commit do arquivo composer.lock no projeto (o que \u00e9 bom). De qualquer forma, executar install quando um arquivo composer.lock estiver presente resolve e instala todas as depend\u00eancias listadas no composer.json , mas o Composer usa as vers\u00f5es exatas listadas no composer.lock para garantir que as vers\u00f5es dos pacotes sejam consistentes para todas as pessoas que trabalham no seu projeto. Como resultado voc\u00ea ter\u00e1 todas as depend\u00eancias requisitadas pelo arquivo composer.json , mas elas podem n\u00e3o estar nas vers\u00f5es dispon\u00edveis mais recentes (algumas das depend\u00eancias listadas no arquivo composer.lock podem ter lan\u00e7ado vers\u00f5es mais recentes desde que o arquivo foi criado). Isso \u00e9 intencional e garante que seu projeto n\u00e3o quebre por causa de mudan\u00e7as inesperadas nas depend\u00eancias. Fa\u00e7a o Commit do Arquivo composer.lock para o Controle de Vers\u00e3o \u00b6 Fazer o commit desse arquivo para o controle de vers\u00e3o \u00e9 importante porque far\u00e1 com que qualquer pessoa que configure o projeto use exatamente as mesmas vers\u00f5es das depend\u00eancias que voc\u00ea est\u00e1 usando. Seu servidor de integra\u00e7\u00e3o cont\u00ednua, m\u00e1quinas de produ\u00e7\u00e3o, outras pessoas no seu time, tudo e todas as pessoas executam as mesmas depend\u00eancias, o que reduz o potencial para erros que afetam apenas algumas partes das implanta\u00e7\u00f5es. Mesmo se voc\u00ea for a \u00fanica pessoa desenvolvendo, ao reinstalar o projeto ap\u00f3s seis meses voc\u00ea poder\u00e1 se sentir confiante de que as depend\u00eancias instaladas ainda est\u00e3o funcionando, mesmo que suas depend\u00eancias tenham lan\u00e7ado muitas novas vers\u00f5es desde ent\u00e3o. (Veja a nota abaixo sobre o uso do comando update .) Atualizando as Depend\u00eancias para Suas Vers\u00f5es mais Recentes \u00b6 Como mencionado acima, o arquivo composer.lock impede que voc\u00ea obtenha automaticamente as vers\u00f5es mais recentes de suas depend\u00eancias. Para atualizar para as vers\u00f5es mais recentes, use o comando update . Ele buscar\u00e1 as vers\u00f5es correspondentes mais recentes (de acordo com o arquivo composer.json ) e atualizar\u00e1 o arquivo lock com as novas vers\u00f5es. (Isso \u00e9 equivalente a excluir o arquivo composer.lock e executar install novamente.) php composer.phar update Nota: O Composer exibir\u00e1 um aviso ao executar um comando install se o composer.lock n\u00e3o tiver sido atualizado depois que foram feitas altera\u00e7\u00f5es no composer.json que podem afetar a resolu\u00e7\u00e3o de depend\u00eancias. Se voc\u00ea deseja instalar ou atualizar apenas uma depend\u00eancia, voc\u00ea pode list\u00e1-la: php composer.phar update monolog/monolog [...] Nota: Para bibliotecas, n\u00e3o \u00e9 necess\u00e1rio fazer o commit do arquivo lock, consulte tamb\u00e9m: Bibliotecas - Arquivo Lock . Packagist \u00b6 Packagist \u00e9 o principal reposit\u00f3rio do Composer. Um reposit\u00f3rio do Composer \u00e9 basicamente uma fonte de pacotes: um local de onde voc\u00ea pode obter pacotes. O Packagist pretende ser o reposit\u00f3rio central que todas as pessoas usam. Isso significa que voc\u00ea pode exigir automaticamente qualquer pacote dispon\u00edvel l\u00e1 usando require , sem especificar mais detalhes sobre onde o Composer deve procurar pelo pacote. Se voc\u00ea for ao site do Packagist (packagist.org), voc\u00ea pode navegar e procurar por pacotes. \u00c9 recomendado que qualquer projeto de c\u00f3digo aberto usando o Composer publique seus pacotes no Packagist. Uma biblioteca n\u00e3o precisa estar no Packagist para ser usada pelo Composer, mas isso permite a descoberta e ado\u00e7\u00e3o mais r\u00e1pida por outras pessoas. Pacotes de Plataforma \u00b6 O Composer possui pacotes de plataforma, que s\u00e3o pacotes virtuais para itens instalados no sistema, mas que n\u00e3o s\u00e3o realmente instal\u00e1veis pelo Composer. Isso inclui o pr\u00f3prio PHP, extens\u00f5es PHP e algumas bibliotecas do sistema. php representa a vers\u00e3o do PHP do usu\u00e1rio, permitindo aplicar restri\u00e7\u00f5es, por exemplo, ^7.1 . Para exigir uma vers\u00e3o do PHP de 64 bits, voc\u00ea pode exigir o pacote php-64bit . hhvm representa a vers\u00e3o do runtime do HHVM e permite aplicar uma restri\u00e7\u00e3o, por exemplo, ^2.3 . ext-<nome> permite exigir extens\u00f5es PHP (incluindo extens\u00f5es nativas). O versionamento pode ser bastante inconsistente aqui, portanto \u00e9 uma boa ideia definir a restri\u00e7\u00e3o como * . Um exemplo de um nome de pacote de extens\u00e3o \u00e9 ext-gd . lib-<nome> permite que restri\u00e7\u00f5es sejam feitas nas vers\u00f5es das bibliotecas usadas pelo PHP. As seguintes est\u00e3o dispon\u00edveis: curl , iconv , icu , libxml , openssl , pcre , uuid , xsl . Voc\u00ea pode usar show --platform para obter uma lista dos seus pacotes de plataforma dispon\u00edveis localmente. Autoloading \u00b6 Para bibliotecas que especificam informa\u00e7\u00f5es de autoload, o Composer gera um arquivo vendor/autoload.php . Voc\u00ea pode simplesmente incluir esse arquivo e come\u00e7ar a usar as classes que essas bibliotecas fornecem sem nenhum trabalho extra: require __DIR__ . '/vendor/autoload.php'; $log = new Monolog\\Logger('name'); $log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING)); $log->addWarning('Foo'); Voc\u00ea pode at\u00e9 adicionar seu pr\u00f3prio c\u00f3digo ao autoloader, adicionando um campo autoload ao composer.json . { \"autoload\": { \"psr-4\": {\"Acme\\\\\": \"src/\"} } } O Composer registrar\u00e1 um autoloader PSR-4 para o namespace Acme . Voc\u00ea define um mapeamento de namespaces para diret\u00f3rios. O diret\u00f3rio src estaria na raiz do seu projeto, no mesmo n\u00edvel que o diret\u00f3rio vendor . Um exemplo de nome de arquivo seria src/Foo.php contendo uma classe Acme\\Foo . Ap\u00f3s adicionar o campo autoload , \u00e9 necess\u00e1rio executar novamente o dump-autoload para gerar novamente o arquivo vendor/autoload.php . A inclus\u00e3o desse arquivo tamb\u00e9m retornar\u00e1 a inst\u00e2ncia do autoloader, para que voc\u00ea possa armazenar o valor de retorno da chamada ao include em uma vari\u00e1vel e possa adicionar mais namespaces. Isso pode ser \u00fatil para fazer o autoloading de classes em uma suite de testes, por exemplo. $loader = require __DIR__ . '/vendor/autoload.php'; $loader->addPsr4('Acme\\\\Test\\\\', __DIR__); Al\u00e9m do autoloading da PSR-4, o Composer tamb\u00e9m suporta a PSR-0, mapas de classes e autoloading de arquivos. Consulte a refer\u00eancia de autoload para obter mais informa\u00e7\u00f5es. Consulte tamb\u00e9m a documenta\u00e7\u00e3o sobre otimiza\u00e7\u00e3o do autoloader . Nota: O Composer fornece seu pr\u00f3prio autoloader. Se voc\u00ea n\u00e3o quiser us\u00e1-lo, poder\u00e1 incluir os arquivos vendor/composer/autoload_*.php , que retornam arrays associativos que permitem configurar seu pr\u00f3prio autoloader.","title":"Uso B\u00e1sico"},{"location":"uso-basico.html#uso-basico","text":"","title":"Uso B\u00e1sico"},{"location":"uso-basico.html#introducao","text":"Para nossa introdu\u00e7\u00e3o ao uso b\u00e1sico, instalaremos o monolog/monolog , uma biblioteca de registro de log. Se voc\u00ea ainda n\u00e3o instalou o Composer, consulte o cap\u00edtulo Introdu\u00e7\u00e3o . Nota: por uma quest\u00e3o de simplicidade, essa introdu\u00e7\u00e3o assumir\u00e1 que voc\u00ea executou uma instala\u00e7\u00e3o local do Composer.","title":"Introdu\u00e7\u00e3o"},{"location":"uso-basico.html#composerjson-configuracao-do-projeto","text":"Para come\u00e7ar a usar o Composer em seu projeto, tudo o que voc\u00ea precisa \u00e9 de um arquivo composer.json . Esse arquivo descreve as depend\u00eancias do seu projeto e tamb\u00e9m pode conter outros metadados.","title":"composer.json: Configura\u00e7\u00e3o do Projeto"},{"location":"uso-basico.html#a-chave-require","text":"A primeira (e muitas vezes a \u00fanica) coisa especificada no composer.json \u00e9 a chave require . Voc\u00ea est\u00e1 simplesmente dizendo ao Composer de quais pacotes seu projeto depende. { \"require\": { \"monolog/monolog\": \"1.0.*\" } } Como voc\u00ea pode ver, require recebe um objeto que mapeia nomes de pacotes (por exemplo, monolog/monolog ) para restri\u00e7\u00f5es de vers\u00e3o (por exemplo, 1.0.* ). O Composer usa essas informa\u00e7\u00f5es para procurar o conjunto correto de arquivos nos \"reposit\u00f3rios\" de pacotes que voc\u00ea registra usando a chave repositories ou no Packagist, o reposit\u00f3rio de pacotes padr\u00e3o. No exemplo acima, como nenhum outro reposit\u00f3rio foi registrado no arquivo composer.json , sup\u00f5e-se que o pacote monolog/monolog esteja registrado no Packagist. (Veja mais sobre o Packagist abaixo ou leia mais sobre reposit\u00f3rios aqui ).","title":"A Chave require"},{"location":"uso-basico.html#nomes-de-pacotes","text":"O nome do pacote consiste no nome do vendor e o nome do projeto. Geralmente, eles ser\u00e3o id\u00eanticos - o nome do vendor existe apenas para prevenir conflitos de nomes. Por exemplo, isso permite que duas pessoas diferentes criem uma biblioteca chamada json . Uma pode ser chamada igorw/json enquanto a outra pode ser seldaek/json . Leia mais sobre a publica\u00e7\u00e3o e a nomea\u00e7\u00e3o de pacotes aqui . (Note que voc\u00ea tamb\u00e9m pode especificar \"pacotes de plataforma\" como depend\u00eancias, permitindo que voc\u00ea exija determinadas vers\u00f5es do software do servidor. Consulte os pacotes de plataforma abaixo.)","title":"Nomes de Pacotes"},{"location":"uso-basico.html#restricoes-de-versao-de-pacote","text":"Em nosso exemplo, estamos solicitando o pacote Monolog com a restri\u00e7\u00e3o de vers\u00e3o 1.0.* . Isso significa qualquer vers\u00e3o no branch de desenvolvimento 1.0 ou qualquer vers\u00e3o maior ou igual a 1.0 e menor que 1.1 ( >=1.0 <1.1 ). Leia o artigo sobre vers\u00f5es para obter informa\u00e7\u00f5es mais detalhadas sobre vers\u00f5es, como as vers\u00f5es se relacionam entre si e sobre as restri\u00e7\u00f5es de vers\u00e3o. Como o Composer baixa os arquivos corretos? Quando voc\u00ea especifica uma depend\u00eancia no composer.json , o Composer primeiro pega o nome do pacote solicitado e o procura em qualquer reposit\u00f3rio registrado usando a chave repositories . Se voc\u00ea n\u00e3o registrou nenhum reposit\u00f3rio extra ou se ele n\u00e3o encontra um pacote com esse nome nos reposit\u00f3rios que voc\u00ea especificou, ele volta ao Packagist (mais abaixo ). Quando o Composer encontra o pacote certo, no Packagist ou em um reposit\u00f3rio que voc\u00ea especificou, ele usa os recursos de vers\u00e3o do VCS do pacote (ou seja, branches e tags) para tentar encontrar a melhor correspond\u00eancia para a restri\u00e7\u00e3o de vers\u00e3o que voc\u00ea especificou. Leia sobre vers\u00f5es e resolu\u00e7\u00e3o de pacotes no artigo sobre vers\u00f5es . Nota: Se voc\u00ea est\u00e1 tentando requisitar um pacote mas o Composer gera um erro referente \u00e0 estabilidade do pacote, a vers\u00e3o que voc\u00ea especificou pode n\u00e3o atender aos seus requisitos m\u00ednimos de estabilidade padr\u00e3o. Por padr\u00e3o, apenas vers\u00f5es est\u00e1veis s\u00e3o levadas em considera\u00e7\u00e3o ao procurar vers\u00f5es de pacotes v\u00e1lidas no seu VCS. Voc\u00ea pode se deparar com isso se estiver tentando requisitar as vers\u00f5es dev, alpha, beta ou RC de um pacote. Leia mais sobre flags de estabilidade e a chave minimum-stability na p\u00e1gina do esquema .","title":"Restri\u00e7\u00f5es de Vers\u00e3o de Pacote"},{"location":"uso-basico.html#instalando-dependencias","text":"Para instalar as depend\u00eancias definidas para o seu projeto, execute o comando install . php composer.phar install Quando voc\u00ea executa esse comando, uma destas duas coisas pode acontecer:","title":"Instalando Depend\u00eancias"},{"location":"uso-basico.html#instalando-sem-o-composerlock","text":"Se voc\u00ea nunca executou o comando antes e tamb\u00e9m n\u00e3o h\u00e1 nenhum composer.lock presente, o Composer simplesmente resolve todas as depend\u00eancias listadas no seu arquivo composer.json e baixa a vers\u00e3o mais recente dos arquivos no diret\u00f3rio vendor do seu projeto. (O diret\u00f3rio vendor \u00e9 o local convencional para todos os c\u00f3digos de terceiros em um projeto). Em nosso exemplo acima, voc\u00ea acabaria com os arquivos-fonte do Monolog em vendor/monolog/monolog/ . Se o Monolog listasse quaisquer depend\u00eancias, elas tamb\u00e9m estariam em pastas em vendor/ . Dica: Se voc\u00ea estiver usando o git no seu projeto, provavelmente desejar\u00e1 adicionar vendor ao .gitignore . Voc\u00ea realmente n\u00e3o deseja adicionar todo esse c\u00f3digo de terceiros ao seu reposit\u00f3rio versionado. Quando o Composer termina a instala\u00e7\u00e3o, ele grava todos os pacotes e as vers\u00f5es exatas deles que foram baixadas no arquivo composer.lock , fixando o projeto naquelas vers\u00f5es espec\u00edficas. Voc\u00ea deve fazer o commit do arquivo composer.lock no reposit\u00f3rio do projeto, para que todas as pessoas que trabalham no projeto usem exatamente as mesmas vers\u00f5es das depend\u00eancias (mais abaixo).","title":"Instalando sem o composer.lock"},{"location":"uso-basico.html#instalando-com-o-composerlock","text":"Isso nos leva ao segundo cen\u00e1rio. Se j\u00e1 existe um arquivo composer.lock e um arquivo composer.json quando voc\u00ea executa composer install , significa que voc\u00ea executou o comando install antes ou outra pessoa no projeto executou o comando install e fez o commit do arquivo composer.lock no projeto (o que \u00e9 bom). De qualquer forma, executar install quando um arquivo composer.lock estiver presente resolve e instala todas as depend\u00eancias listadas no composer.json , mas o Composer usa as vers\u00f5es exatas listadas no composer.lock para garantir que as vers\u00f5es dos pacotes sejam consistentes para todas as pessoas que trabalham no seu projeto. Como resultado voc\u00ea ter\u00e1 todas as depend\u00eancias requisitadas pelo arquivo composer.json , mas elas podem n\u00e3o estar nas vers\u00f5es dispon\u00edveis mais recentes (algumas das depend\u00eancias listadas no arquivo composer.lock podem ter lan\u00e7ado vers\u00f5es mais recentes desde que o arquivo foi criado). Isso \u00e9 intencional e garante que seu projeto n\u00e3o quebre por causa de mudan\u00e7as inesperadas nas depend\u00eancias.","title":"Instalando com o composer.lock"},{"location":"uso-basico.html#faca-o-commit-do-arquivo-composerlock-para-o-controle-de-versao","text":"Fazer o commit desse arquivo para o controle de vers\u00e3o \u00e9 importante porque far\u00e1 com que qualquer pessoa que configure o projeto use exatamente as mesmas vers\u00f5es das depend\u00eancias que voc\u00ea est\u00e1 usando. Seu servidor de integra\u00e7\u00e3o cont\u00ednua, m\u00e1quinas de produ\u00e7\u00e3o, outras pessoas no seu time, tudo e todas as pessoas executam as mesmas depend\u00eancias, o que reduz o potencial para erros que afetam apenas algumas partes das implanta\u00e7\u00f5es. Mesmo se voc\u00ea for a \u00fanica pessoa desenvolvendo, ao reinstalar o projeto ap\u00f3s seis meses voc\u00ea poder\u00e1 se sentir confiante de que as depend\u00eancias instaladas ainda est\u00e3o funcionando, mesmo que suas depend\u00eancias tenham lan\u00e7ado muitas novas vers\u00f5es desde ent\u00e3o. (Veja a nota abaixo sobre o uso do comando update .)","title":"Fa\u00e7a o Commit do Arquivo composer.lock para o Controle de Vers\u00e3o"},{"location":"uso-basico.html#atualizando-as-dependencias-para-suas-versoes-mais-recentes","text":"Como mencionado acima, o arquivo composer.lock impede que voc\u00ea obtenha automaticamente as vers\u00f5es mais recentes de suas depend\u00eancias. Para atualizar para as vers\u00f5es mais recentes, use o comando update . Ele buscar\u00e1 as vers\u00f5es correspondentes mais recentes (de acordo com o arquivo composer.json ) e atualizar\u00e1 o arquivo lock com as novas vers\u00f5es. (Isso \u00e9 equivalente a excluir o arquivo composer.lock e executar install novamente.) php composer.phar update Nota: O Composer exibir\u00e1 um aviso ao executar um comando install se o composer.lock n\u00e3o tiver sido atualizado depois que foram feitas altera\u00e7\u00f5es no composer.json que podem afetar a resolu\u00e7\u00e3o de depend\u00eancias. Se voc\u00ea deseja instalar ou atualizar apenas uma depend\u00eancia, voc\u00ea pode list\u00e1-la: php composer.phar update monolog/monolog [...] Nota: Para bibliotecas, n\u00e3o \u00e9 necess\u00e1rio fazer o commit do arquivo lock, consulte tamb\u00e9m: Bibliotecas - Arquivo Lock .","title":"Atualizando as Depend\u00eancias para Suas Vers\u00f5es mais Recentes"},{"location":"uso-basico.html#packagist","text":"Packagist \u00e9 o principal reposit\u00f3rio do Composer. Um reposit\u00f3rio do Composer \u00e9 basicamente uma fonte de pacotes: um local de onde voc\u00ea pode obter pacotes. O Packagist pretende ser o reposit\u00f3rio central que todas as pessoas usam. Isso significa que voc\u00ea pode exigir automaticamente qualquer pacote dispon\u00edvel l\u00e1 usando require , sem especificar mais detalhes sobre onde o Composer deve procurar pelo pacote. Se voc\u00ea for ao site do Packagist (packagist.org), voc\u00ea pode navegar e procurar por pacotes. \u00c9 recomendado que qualquer projeto de c\u00f3digo aberto usando o Composer publique seus pacotes no Packagist. Uma biblioteca n\u00e3o precisa estar no Packagist para ser usada pelo Composer, mas isso permite a descoberta e ado\u00e7\u00e3o mais r\u00e1pida por outras pessoas.","title":"Packagist"},{"location":"uso-basico.html#pacotes-de-plataforma","text":"O Composer possui pacotes de plataforma, que s\u00e3o pacotes virtuais para itens instalados no sistema, mas que n\u00e3o s\u00e3o realmente instal\u00e1veis pelo Composer. Isso inclui o pr\u00f3prio PHP, extens\u00f5es PHP e algumas bibliotecas do sistema. php representa a vers\u00e3o do PHP do usu\u00e1rio, permitindo aplicar restri\u00e7\u00f5es, por exemplo, ^7.1 . Para exigir uma vers\u00e3o do PHP de 64 bits, voc\u00ea pode exigir o pacote php-64bit . hhvm representa a vers\u00e3o do runtime do HHVM e permite aplicar uma restri\u00e7\u00e3o, por exemplo, ^2.3 . ext-<nome> permite exigir extens\u00f5es PHP (incluindo extens\u00f5es nativas). O versionamento pode ser bastante inconsistente aqui, portanto \u00e9 uma boa ideia definir a restri\u00e7\u00e3o como * . Um exemplo de um nome de pacote de extens\u00e3o \u00e9 ext-gd . lib-<nome> permite que restri\u00e7\u00f5es sejam feitas nas vers\u00f5es das bibliotecas usadas pelo PHP. As seguintes est\u00e3o dispon\u00edveis: curl , iconv , icu , libxml , openssl , pcre , uuid , xsl . Voc\u00ea pode usar show --platform para obter uma lista dos seus pacotes de plataforma dispon\u00edveis localmente.","title":"Pacotes de Plataforma"},{"location":"uso-basico.html#autoloading","text":"Para bibliotecas que especificam informa\u00e7\u00f5es de autoload, o Composer gera um arquivo vendor/autoload.php . Voc\u00ea pode simplesmente incluir esse arquivo e come\u00e7ar a usar as classes que essas bibliotecas fornecem sem nenhum trabalho extra: require __DIR__ . '/vendor/autoload.php'; $log = new Monolog\\Logger('name'); $log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING)); $log->addWarning('Foo'); Voc\u00ea pode at\u00e9 adicionar seu pr\u00f3prio c\u00f3digo ao autoloader, adicionando um campo autoload ao composer.json . { \"autoload\": { \"psr-4\": {\"Acme\\\\\": \"src/\"} } } O Composer registrar\u00e1 um autoloader PSR-4 para o namespace Acme . Voc\u00ea define um mapeamento de namespaces para diret\u00f3rios. O diret\u00f3rio src estaria na raiz do seu projeto, no mesmo n\u00edvel que o diret\u00f3rio vendor . Um exemplo de nome de arquivo seria src/Foo.php contendo uma classe Acme\\Foo . Ap\u00f3s adicionar o campo autoload , \u00e9 necess\u00e1rio executar novamente o dump-autoload para gerar novamente o arquivo vendor/autoload.php . A inclus\u00e3o desse arquivo tamb\u00e9m retornar\u00e1 a inst\u00e2ncia do autoloader, para que voc\u00ea possa armazenar o valor de retorno da chamada ao include em uma vari\u00e1vel e possa adicionar mais namespaces. Isso pode ser \u00fatil para fazer o autoloading de classes em uma suite de testes, por exemplo. $loader = require __DIR__ . '/vendor/autoload.php'; $loader->addPsr4('Acme\\\\Test\\\\', __DIR__); Al\u00e9m do autoloading da PSR-4, o Composer tamb\u00e9m suporta a PSR-0, mapas de classes e autoloading de arquivos. Consulte a refer\u00eancia de autoload para obter mais informa\u00e7\u00f5es. Consulte tamb\u00e9m a documenta\u00e7\u00e3o sobre otimiza\u00e7\u00e3o do autoloader . Nota: O Composer fornece seu pr\u00f3prio autoloader. Se voc\u00ea n\u00e3o quiser us\u00e1-lo, poder\u00e1 incluir os arquivos vendor/composer/autoload_*.php , que retornam arrays associativos que permitem configurar seu pr\u00f3prio autoloader.","title":"Autoloading"},{"location":"artigos/aliases.html","text":"Aliases \u00b6 Por que Aliases? \u00b6 Quando voc\u00ea estiver usando um reposit\u00f3rio VCS, voc\u00ea obter\u00e1 apenas vers\u00f5es compar\u00e1veis dos branches semelhantes a vers\u00f5es, como 2.0 ou 2.0.x . Para o branch master , voc\u00ea obter\u00e1 uma vers\u00e3o dev-master . Para o branch bugfix , voc\u00ea obter\u00e1 uma vers\u00e3o dev-bugfix . Se o branch master for usado para criar tags de lan\u00e7amentos da linha de desenvolvimento 1.0 , ou seja, 1.0.1 , 1.0.2 , 1.0.3 , etc., qualquer pacote dependendo dele provavelmente exigir\u00e1 a vers\u00e3o 1.0.* . Se algu\u00e9m quiser exigir o dev-master mais recente, ter\u00e1 um problema: outros pacotes podem exigir 1.0.* , portanto, exigir essa vers\u00e3o de desenvolvimento levar\u00e1 a conflitos, pois dev-master n\u00e3o corresponde \u00e0 restri\u00e7\u00e3o 1.0.* . \u00c9 a\u00ed que entram os aliases. Branch alias \u00b6 The dev-master branch is one in your main VCS repo. It is rather common that someone will want the latest master dev version. Thus, Composer allows you to alias your dev-master branch to a 1.0.x-dev version. It is done by specifying a branch-alias field under extra in composer.json : { \"extra\": { \"branch-alias\": { \"dev-master\": \"1.0.x-dev\" } } } If you alias a non-comparable version (such as dev-develop) dev- must prefix the branch name. You may also alias a comparable version (i.e. start with numbers, and end with .x-dev ), but only as a more specific version. For example, 1.x-dev could be aliased as 1.2.x-dev. The alias must be a comparable dev version, and the branch-alias must be present on the branch that it references. For dev-master , you need to commit it on the master branch. As a result, anyone can now require 1.0.* and it will happily install dev-master . In order to use branch aliasing, you must own the repository of the package being aliased. If you want to alias a third party package without maintaining a fork of it, use inline aliases as described below. Require inline alias \u00b6 Branch aliases are great for aliasing main development lines. But in order to use them you need to have control over the source repository, and you need to commit changes to version control. This is not really fun when you want to try a bugfix of some library that is a dependency of your local project. For this reason, you can alias packages in your require and require-dev fields. Let's say you found a bug in the monolog/monolog package. You cloned Monolog on GitHub and fixed the issue in a branch named bugfix . Now you want to install that version of monolog in your local project. You are using symfony/monolog-bundle which requires monolog/monolog version 1.* . So you need your dev-bugfix to match that constraint. Add this to your project's root composer.json : { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://github.com/you/monolog\" } ], \"require\": { \"symfony/monolog-bundle\": \"2.0\", \"monolog/monolog\": \"dev-bugfix as 1.0.x-dev\" } } Or let composer add it for you with: php composer.phar require monolog/monolog:\"dev-bugfix as 1.0.x-dev\" That will fetch the dev-bugfix version of monolog/monolog from your GitHub and alias it to 1.0.x-dev . Note: Inline aliasing is a root-only feature. If a package with inline aliases is required, the alias (right of the as ) is used as the version constraint. The part left of the as is discarded. As a consequence, if A requires B and B requires monolog/monolog version dev-bugfix as 1.0.x-dev , installing A will make B require 1.0.x-dev , which may exist as a branch alias or an actual 1.0 branch. If it does not, it must be inline-aliased again in A's composer.json . Note: Inline aliasing should be avoided, especially for published packages/libraries. If you found a bug, try and get your fix merged upstream. This helps to avoid issues for users of your package.","title":"Aliases"},{"location":"artigos/aliases.html#aliases","text":"","title":"Aliases"},{"location":"artigos/aliases.html#por-que-aliases","text":"Quando voc\u00ea estiver usando um reposit\u00f3rio VCS, voc\u00ea obter\u00e1 apenas vers\u00f5es compar\u00e1veis dos branches semelhantes a vers\u00f5es, como 2.0 ou 2.0.x . Para o branch master , voc\u00ea obter\u00e1 uma vers\u00e3o dev-master . Para o branch bugfix , voc\u00ea obter\u00e1 uma vers\u00e3o dev-bugfix . Se o branch master for usado para criar tags de lan\u00e7amentos da linha de desenvolvimento 1.0 , ou seja, 1.0.1 , 1.0.2 , 1.0.3 , etc., qualquer pacote dependendo dele provavelmente exigir\u00e1 a vers\u00e3o 1.0.* . Se algu\u00e9m quiser exigir o dev-master mais recente, ter\u00e1 um problema: outros pacotes podem exigir 1.0.* , portanto, exigir essa vers\u00e3o de desenvolvimento levar\u00e1 a conflitos, pois dev-master n\u00e3o corresponde \u00e0 restri\u00e7\u00e3o 1.0.* . \u00c9 a\u00ed que entram os aliases.","title":"Por que Aliases?"},{"location":"artigos/aliases.html#branch-alias","text":"The dev-master branch is one in your main VCS repo. It is rather common that someone will want the latest master dev version. Thus, Composer allows you to alias your dev-master branch to a 1.0.x-dev version. It is done by specifying a branch-alias field under extra in composer.json : { \"extra\": { \"branch-alias\": { \"dev-master\": \"1.0.x-dev\" } } } If you alias a non-comparable version (such as dev-develop) dev- must prefix the branch name. You may also alias a comparable version (i.e. start with numbers, and end with .x-dev ), but only as a more specific version. For example, 1.x-dev could be aliased as 1.2.x-dev. The alias must be a comparable dev version, and the branch-alias must be present on the branch that it references. For dev-master , you need to commit it on the master branch. As a result, anyone can now require 1.0.* and it will happily install dev-master . In order to use branch aliasing, you must own the repository of the package being aliased. If you want to alias a third party package without maintaining a fork of it, use inline aliases as described below.","title":"Branch alias"},{"location":"artigos/aliases.html#require-inline-alias","text":"Branch aliases are great for aliasing main development lines. But in order to use them you need to have control over the source repository, and you need to commit changes to version control. This is not really fun when you want to try a bugfix of some library that is a dependency of your local project. For this reason, you can alias packages in your require and require-dev fields. Let's say you found a bug in the monolog/monolog package. You cloned Monolog on GitHub and fixed the issue in a branch named bugfix . Now you want to install that version of monolog in your local project. You are using symfony/monolog-bundle which requires monolog/monolog version 1.* . So you need your dev-bugfix to match that constraint. Add this to your project's root composer.json : { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://github.com/you/monolog\" } ], \"require\": { \"symfony/monolog-bundle\": \"2.0\", \"monolog/monolog\": \"dev-bugfix as 1.0.x-dev\" } } Or let composer add it for you with: php composer.phar require monolog/monolog:\"dev-bugfix as 1.0.x-dev\" That will fetch the dev-bugfix version of monolog/monolog from your GitHub and alias it to 1.0.x-dev . Note: Inline aliasing is a root-only feature. If a package with inline aliases is required, the alias (right of the as ) is used as the version constraint. The part left of the as is discarded. As a consequence, if A requires B and B requires monolog/monolog version dev-bugfix as 1.0.x-dev , installing A will make B require 1.0.x-dev , which may exist as a branch alias or an actual 1.0 branch. If it does not, it must be inline-aliased again in A's composer.json . Note: Inline aliasing should be avoided, especially for published packages/libraries. If you found a bug, try and get your fix merged upstream. This helps to avoid issues for users of your package.","title":"Require inline alias"}]}